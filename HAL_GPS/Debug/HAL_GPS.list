
HAL_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800435c  0800435c  0000535c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800448c  0800448c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800448c  0800448c  0000548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004494  08004494  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004494  08004494  00005494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004498  08004498  00005498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800449c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000238  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a0  200002a0  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aff8  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b3f  00000000  00000000  00011090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  00012bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007cd  00000000  00000000  000135e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217f8  00000000  00000000  00013dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c808  00000000  00000000  000355a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6e0f  00000000  00000000  00041dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00108bbc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034a4  00000000  00000000  00108c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0010c0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004344 	.word	0x08004344

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004344 	.word	0x08004344

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <UART1_Read>:
#include "GPS.h"
#include <string.h>

extern UART_HandleTypeDef huart1;

char UART1_Read(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
    uint8_t c;
    HAL_UART_Receive(&huart1, &c, 1, HAL_MAX_DELAY);
 80005a2:	1df9      	adds	r1, r7, #7
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005a8:	2201      	movs	r2, #1
 80005aa:	4804      	ldr	r0, [pc, #16]	@ (80005bc <UART1_Read+0x20>)
 80005ac:	f002 f8fe 	bl	80027ac <HAL_UART_Receive>
    return (char)c;
 80005b0:	79fb      	ldrb	r3, [r7, #7]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000dc 	.word	0x200000dc

080005c0 <GPS_Read_Location>:

uint8_t GPS_Read_Location(char *latitude, char *longitude) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b0a0      	sub	sp, #128	@ 0x80
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
    char line[100];
    int i = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    char c;

    while (1) {
        c = UART1_Read();
 80005ce:	f7ff ffe5 	bl	800059c <UART1_Read>
 80005d2:	4603      	mov	r3, r0
 80005d4:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

        if (c == '$') {
 80005d8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80005dc:	2b24      	cmp	r3, #36	@ 0x24
 80005de:	d1f6      	bne.n	80005ce <GPS_Read_Location+0xe>
            line[i++] = c;
 80005e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005e2:	1c5a      	adds	r2, r3, #1
 80005e4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80005e6:	3380      	adds	r3, #128	@ 0x80
 80005e8:	443b      	add	r3, r7
 80005ea:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 80005ee:	f803 2c74 	strb.w	r2, [r3, #-116]

            while (i < 99) {
 80005f2:	e011      	b.n	8000618 <GPS_Read_Location+0x58>
                c = UART1_Read();
 80005f4:	f7ff ffd2 	bl	800059c <UART1_Read>
 80005f8:	4603      	mov	r3, r0
 80005fa:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
                line[i++] = c;
 80005fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000604:	3380      	adds	r3, #128	@ 0x80
 8000606:	443b      	add	r3, r7
 8000608:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 800060c:	f803 2c74 	strb.w	r2, [r3, #-116]
                if (c == '\n') break;
 8000610:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000614:	2b0a      	cmp	r3, #10
 8000616:	d003      	beq.n	8000620 <GPS_Read_Location+0x60>
            while (i < 99) {
 8000618:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800061a:	2b62      	cmp	r3, #98	@ 0x62
 800061c:	ddea      	ble.n	80005f4 <GPS_Read_Location+0x34>
 800061e:	e000      	b.n	8000622 <GPS_Read_Location+0x62>
                if (c == '\n') break;
 8000620:	bf00      	nop
            }
            line[i] = '\0';
 8000622:	f107 020c 	add.w	r2, r7, #12
 8000626:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000628:	4413      	add	r3, r2
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]

            if (strstr(line, "$GPRMC") != NULL) {
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	491a      	ldr	r1, [pc, #104]	@ (800069c <GPS_Read_Location+0xdc>)
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fe21 	bl	800327c <strstr>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d025      	beq.n	800068c <GPS_Read_Location+0xcc>
                char *token;
                int field = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	677b      	str	r3, [r7, #116]	@ 0x74
                token = strtok(line, ",");
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	4915      	ldr	r1, [pc, #84]	@ (80006a0 <GPS_Read_Location+0xe0>)
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fdba 	bl	80031c4 <strtok>
 8000650:	67b8      	str	r0, [r7, #120]	@ 0x78

                while (token != NULL) {
 8000652:	e018      	b.n	8000686 <GPS_Read_Location+0xc6>
                    field++;
 8000654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000656:	3301      	adds	r3, #1
 8000658:	677b      	str	r3, [r7, #116]	@ 0x74
                    if (field == 4) {
 800065a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800065c:	2b04      	cmp	r3, #4
 800065e:	d104      	bne.n	800066a <GPS_Read_Location+0xaa>
                        strcpy(latitude, token);
 8000660:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f002 fe93 	bl	800338e <strcpy>
 8000668:	e008      	b.n	800067c <GPS_Read_Location+0xbc>
                    } else if (field == 6) {
 800066a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800066c:	2b06      	cmp	r3, #6
 800066e:	d105      	bne.n	800067c <GPS_Read_Location+0xbc>
                        strcpy(longitude, token);
 8000670:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000672:	6838      	ldr	r0, [r7, #0]
 8000674:	f002 fe8b 	bl	800338e <strcpy>
                        return 1;
 8000678:	2301      	movs	r3, #1
 800067a:	e00a      	b.n	8000692 <GPS_Read_Location+0xd2>
                    }
                    token = strtok(NULL, ",");
 800067c:	4908      	ldr	r1, [pc, #32]	@ (80006a0 <GPS_Read_Location+0xe0>)
 800067e:	2000      	movs	r0, #0
 8000680:	f002 fda0 	bl	80031c4 <strtok>
 8000684:	67b8      	str	r0, [r7, #120]	@ 0x78
                while (token != NULL) {
 8000686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1e3      	bne.n	8000654 <GPS_Read_Location+0x94>
                }
            }
            i = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        c = UART1_Read();
 8000690:	e79d      	b.n	80005ce <GPS_Read_Location+0xe>
        }
    }

    return 0;
}
 8000692:	4618      	mov	r0, r3
 8000694:	3780      	adds	r7, #128	@ 0x80
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	0800435c 	.word	0x0800435c
 80006a0:	08004364 	.word	0x08004364

080006a4 <LcdSendNibble>:

#define EN  (1 << 2)
#define RS  (1 << 0)
#define BL  (1 << 3)

static void LcdSendNibble(uint8_t nibble, uint8_t control) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
    uint8_t data = (nibble << 4) | control | BL | EN;
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	011b      	lsls	r3, r3, #4
 80006ba:	b25a      	sxtb	r2, r3
 80006bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	f043 030c 	orr.w	r3, r3, #12
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(lcd_i2c, LCD_SLAVE_ADDR_W, &data, 1, HAL_MAX_DELAY);
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <LcdSendNibble+0x70>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	f107 020f 	add.w	r2, r7, #15
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2301      	movs	r3, #1
 80006de:	214e      	movs	r1, #78	@ 0x4e
 80006e0:	f001 f822 	bl	8001728 <HAL_I2C_Master_Transmit>
    HAL_Delay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 fc35 	bl	8000f54 <HAL_Delay>
    data &= ~EN;
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	f023 0304 	bic.w	r3, r3, #4
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(lcd_i2c, LCD_SLAVE_ADDR_W, &data, 1, HAL_MAX_DELAY);
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <LcdSendNibble+0x70>)
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	f107 020f 	add.w	r2, r7, #15
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2301      	movs	r3, #1
 8000704:	214e      	movs	r1, #78	@ 0x4e
 8000706:	f001 f80f 	bl	8001728 <HAL_I2C_Master_Transmit>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000084 	.word	0x20000084

08000718 <LcdWriteByte>:

void LcdWriteByte(uint8_t cmd, uint8_t data) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
    uint8_t control = (cmd == LCD_DATA) ? RS : 0;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b01      	cmp	r3, #1
 800072c:	bf0c      	ite	eq
 800072e:	2301      	moveq	r3, #1
 8000730:	2300      	movne	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	73fb      	strb	r3, [r7, #15]
    LcdSendNibble((data >> 4), control);
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	091b      	lsrs	r3, r3, #4
 800073a:	b2db      	uxtb	r3, r3
 800073c:	7bfa      	ldrb	r2, [r7, #15]
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ffaf 	bl	80006a4 <LcdSendNibble>
    LcdSendNibble((data & 0x0F), control);
 8000746:	79bb      	ldrb	r3, [r7, #6]
 8000748:	f003 030f 	and.w	r3, r3, #15
 800074c:	b2db      	uxtb	r3, r3
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ffa6 	bl	80006a4 <LcdSendNibble>
    HAL_Delay(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f000 fbfb 	bl	8000f54 <HAL_Delay>
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <LcdInit>:

void LcdInit(I2C_HandleTypeDef *hi2c) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    lcd_i2c = hi2c;
 8000770:	4a1a      	ldr	r2, [pc, #104]	@ (80007dc <LcdInit+0x74>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
    HAL_Delay(50);
 8000776:	2032      	movs	r0, #50	@ 0x32
 8000778:	f000 fbec 	bl	8000f54 <HAL_Delay>
    LcdSendNibble(0x03, 0);
 800077c:	2100      	movs	r1, #0
 800077e:	2003      	movs	r0, #3
 8000780:	f7ff ff90 	bl	80006a4 <LcdSendNibble>
    HAL_Delay(5);
 8000784:	2005      	movs	r0, #5
 8000786:	f000 fbe5 	bl	8000f54 <HAL_Delay>
    LcdSendNibble(0x03, 0);
 800078a:	2100      	movs	r1, #0
 800078c:	2003      	movs	r0, #3
 800078e:	f7ff ff89 	bl	80006a4 <LcdSendNibble>
    HAL_Delay(5);
 8000792:	2005      	movs	r0, #5
 8000794:	f000 fbde 	bl	8000f54 <HAL_Delay>
    LcdSendNibble(0x03, 0);
 8000798:	2100      	movs	r1, #0
 800079a:	2003      	movs	r0, #3
 800079c:	f7ff ff82 	bl	80006a4 <LcdSendNibble>
    HAL_Delay(5);
 80007a0:	2005      	movs	r0, #5
 80007a2:	f000 fbd7 	bl	8000f54 <HAL_Delay>
    LcdSendNibble(0x02, 0);
 80007a6:	2100      	movs	r1, #0
 80007a8:	2002      	movs	r0, #2
 80007aa:	f7ff ff7b 	bl	80006a4 <LcdSendNibble>

    LcdWriteByte(LCD_CMD, 0x28); // 2 lines
 80007ae:	2128      	movs	r1, #40	@ 0x28
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff ffb1 	bl	8000718 <LcdWriteByte>
    LcdWriteByte(LCD_CMD, 0x0C); // Display ON
 80007b6:	210c      	movs	r1, #12
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ffad 	bl	8000718 <LcdWriteByte>
    LcdWriteByte(LCD_CMD, 0x06); // Entry mode
 80007be:	2106      	movs	r1, #6
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff ffa9 	bl	8000718 <LcdWriteByte>
    LcdWriteByte(LCD_CMD, 0x01); // Clear
 80007c6:	2101      	movs	r1, #1
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ffa5 	bl	8000718 <LcdWriteByte>
    HAL_Delay(5);
 80007ce:	2005      	movs	r0, #5
 80007d0:	f000 fbc0 	bl	8000f54 <HAL_Delay>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000084 	.word	0x20000084

080007e0 <LcdPuts>:

void LcdPuts(uint8_t line, char *str) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
    LcdWriteByte(LCD_CMD, line);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	4619      	mov	r1, r3
 80007f0:	2000      	movs	r0, #0
 80007f2:	f7ff ff91 	bl	8000718 <LcdWriteByte>
    while (*str) {
 80007f6:	e007      	b.n	8000808 <LcdPuts+0x28>
        LcdWriteByte(LCD_DATA, *str++);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	603a      	str	r2, [r7, #0]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff ff88 	bl	8000718 <LcdWriteByte>
    while (*str) {
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d1f3      	bne.n	80007f8 <LcdPuts+0x18>
    }
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000822:	f000 fb25 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000826:	f000 f849 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082a:	f000 f909 	bl	8000a40 <MX_GPIO_Init>
  MX_I2C1_Init();
 800082e:	f000 f8af 	bl	8000990 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000832:	f000 f8db 	bl	80009ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LcdInit(&hi2c1);
 8000836:	481a      	ldr	r0, [pc, #104]	@ (80008a0 <main+0x84>)
 8000838:	f7ff ff96 	bl	8000768 <LcdInit>
      LcdPuts(LCD_LINE1, "Waiting GPS...");
 800083c:	4919      	ldr	r1, [pc, #100]	@ (80008a4 <main+0x88>)
 800083e:	2080      	movs	r0, #128	@ 0x80
 8000840:	f7ff ffce 	bl	80007e0 <LcdPuts>
      HAL_Delay(1000);
 8000844:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000848:	f000 fb84 	bl	8000f54 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (GPS_Read_Location(latitude, longitude)) {
 800084c:	4916      	ldr	r1, [pc, #88]	@ (80008a8 <main+0x8c>)
 800084e:	4817      	ldr	r0, [pc, #92]	@ (80008ac <main+0x90>)
 8000850:	f7ff feb6 	bl	80005c0 <GPS_Read_Location>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d018      	beq.n	800088c <main+0x70>
	              char line1[20];
	              char line2[20];

	              snprintf(line1, sizeof(line1), "Lat:%s", latitude);
 800085a:	f107 0014 	add.w	r0, r7, #20
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <main+0x90>)
 8000860:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <main+0x94>)
 8000862:	2114      	movs	r1, #20
 8000864:	f002 fc2c 	bl	80030c0 <sniprintf>
	              snprintf(line2, sizeof(line2), "Lon:%s", longitude);
 8000868:	4638      	mov	r0, r7
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <main+0x8c>)
 800086c:	4a11      	ldr	r2, [pc, #68]	@ (80008b4 <main+0x98>)
 800086e:	2114      	movs	r1, #20
 8000870:	f002 fc26 	bl	80030c0 <sniprintf>

	              LcdPuts(LCD_LINE1, line1);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	2080      	movs	r0, #128	@ 0x80
 800087c:	f7ff ffb0 	bl	80007e0 <LcdPuts>
	              LcdPuts(LCD_LINE2, line2);
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	20c0      	movs	r0, #192	@ 0xc0
 8000886:	f7ff ffab 	bl	80007e0 <LcdPuts>
 800088a:	e003      	b.n	8000894 <main+0x78>
	          } else {
	              LcdPuts(LCD_LINE1, "Waiting GPS");
 800088c:	490a      	ldr	r1, [pc, #40]	@ (80008b8 <main+0x9c>)
 800088e:	2080      	movs	r0, #128	@ 0x80
 8000890:	f7ff ffa6 	bl	80007e0 <LcdPuts>
	          }

	          HAL_Delay(2000);
 8000894:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000898:	f000 fb5c 	bl	8000f54 <HAL_Delay>
	  if (GPS_Read_Location(latitude, longitude)) {
 800089c:	e7d6      	b.n	800084c <main+0x30>
 800089e:	bf00      	nop
 80008a0:	20000088 	.word	0x20000088
 80008a4:	08004368 	.word	0x08004368
 80008a8:	20000138 	.word	0x20000138
 80008ac:	20000124 	.word	0x20000124
 80008b0:	08004378 	.word	0x08004378
 80008b4:	08004380 	.word	0x08004380
 80008b8:	08004388 	.word	0x08004388

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	@ 0x50
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2230      	movs	r2, #48	@ 0x30
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fc71 	bl	80031b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <SystemClock_Config+0xcc>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	4a27      	ldr	r2, [pc, #156]	@ (8000988 <SystemClock_Config+0xcc>)
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <SystemClock_Config+0xcc>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	4b22      	ldr	r3, [pc, #136]	@ (800098c <SystemClock_Config+0xd0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <SystemClock_Config+0xd0>)
 8000906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <SystemClock_Config+0xd0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091c:	2301      	movs	r3, #1
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000920:	2310      	movs	r3, #16
 8000922:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000928:	2300      	movs	r3, #0
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800092c:	2308      	movs	r3, #8
 800092e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000930:	2332      	movs	r3, #50	@ 0x32
 8000932:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000938:	2307      	movs	r3, #7
 800093a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fa4b 	bl	8001ddc <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800094c:	f000 f8a0 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000954:	2302      	movs	r3, #2
 8000956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000962:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2101      	movs	r1, #1
 800096e:	4618      	mov	r0, r3
 8000970:	f001 fcac 	bl	80022cc <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800097a:	f000 f889 	bl	8000a90 <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	@ 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_I2C1_Init+0x50>)
 8000996:	4a13      	ldr	r2, [pc, #76]	@ (80009e4 <MX_I2C1_Init+0x54>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_I2C1_Init+0x50>)
 800099c:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <MX_I2C1_Init+0x58>)
 800099e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_I2C1_Init+0x50>)
 80009ce:	f000 fd67 	bl	80014a0 <HAL_I2C_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d8:	f000 f85a 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000088 	.word	0x20000088
 80009e4:	40005400 	.word	0x40005400
 80009e8:	000186a0 	.word	0x000186a0

080009ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	@ (8000a3c <MX_USART1_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 80009f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a24:	f001 fe72 	bl	800270c <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f000 f82f 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000dc 	.word	0x200000dc
 8000a3c:	40011000 	.word	0x40011000

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <MX_GPIO_Init+0x4c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a8c <MX_GPIO_Init+0x4c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <MX_GPIO_Init+0x4c>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_GPIO_Init+0x4c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <MX_GPIO_Init+0x4c>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_GPIO_Init+0x4c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <Error_Handler+0x8>

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ada:	2007      	movs	r0, #7
 8000adc:	f000 fb10 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a19      	ldr	r2, [pc, #100]	@ (8000b70 <HAL_I2C_MspInit+0x84>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d12b      	bne.n	8000b66 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a17      	ldr	r2, [pc, #92]	@ (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b2a:	23c0      	movs	r3, #192	@ 0xc0
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <HAL_I2C_MspInit+0x8c>)
 8000b46:	f000 fb0f 	bl	8001168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a08      	ldr	r2, [pc, #32]	@ (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	@ 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40005400 	.word	0x40005400
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020400 	.word	0x40020400

08000b7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	@ (8000c00 <HAL_UART_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12c      	bne.n	8000bf8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a17      	ldr	r2, [pc, #92]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba8:	f043 0310 	orr.w	r3, r3, #16
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f003 0310 	and.w	r3, r3, #16
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <HAL_UART_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bd6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be8:	2307      	movs	r3, #7
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <HAL_UART_MspInit+0x8c>)
 8000bf4:	f000 fab8 	bl	8001168 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	@ 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40011000 	.word	0x40011000
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <NMI_Handler+0x4>

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <MemManage_Handler+0x4>

08000c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c62:	f000 f957 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  return 1;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_kill>:

int _kill(int pid, int sig)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c84:	f002 fb56 	bl	8003334 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2216      	movs	r2, #22
 8000c8c:	601a      	str	r2, [r3, #0]
  return -1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_exit>:

void _exit (int status)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ca2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffe7 	bl	8000c7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <_exit+0x12>

08000cb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e00a      	b.n	8000cd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cc2:	f3af 8000 	nop.w
 8000cc6:	4601      	mov	r1, r0
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60ba      	str	r2, [r7, #8]
 8000cce:	b2ca      	uxtb	r2, r1
 8000cd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf0      	blt.n	8000cc2 <_read+0x12>
  }

  return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	e009      	b.n	8000d10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf1      	blt.n	8000cfc <_write+0x12>
  }
  return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_close>:

int _close(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_isatty>:

int _isatty(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f002 faba 	bl	8003334 <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20020000 	.word	0x20020000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	2000014c 	.word	0x2000014c
 8000df4:	200002a0 	.word	0x200002a0

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e20:	f7ff ffea 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f002 fa79 	bl	8003340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fce5 	bl	800081c <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e60:	0800449c 	.word	0x0800449c
  ldr r2, =_sbss
 8000e64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e68:	200002a0 	.word	0x200002a0

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	@ (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f931 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fdfa 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f93b 	bl	800114e <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ef0:	f000 f911 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000150 	.word	0x20000150

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	@ (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000150 	.word	0x20000150

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	@ (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff47 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff5c 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffb0 	bl	80010bc <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e16b      	b.n	800145c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 815a 	bne.w	8001456 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80b4 	beq.w	8001456 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b60      	ldr	r3, [pc, #384]	@ (8001474 <HAL_GPIO_Init+0x30c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a5f      	ldr	r2, [pc, #380]	@ (8001474 <HAL_GPIO_Init+0x30c>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001474 <HAL_GPIO_Init+0x30c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130a:	4a5b      	ldr	r2, [pc, #364]	@ (8001478 <HAL_GPIO_Init+0x310>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a52      	ldr	r2, [pc, #328]	@ (800147c <HAL_GPIO_Init+0x314>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d02b      	beq.n	800138e <HAL_GPIO_Init+0x226>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a51      	ldr	r2, [pc, #324]	@ (8001480 <HAL_GPIO_Init+0x318>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d025      	beq.n	800138a <HAL_GPIO_Init+0x222>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a50      	ldr	r2, [pc, #320]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d01f      	beq.n	8001386 <HAL_GPIO_Init+0x21e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4f      	ldr	r2, [pc, #316]	@ (8001488 <HAL_GPIO_Init+0x320>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x21a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4e      	ldr	r2, [pc, #312]	@ (800148c <HAL_GPIO_Init+0x324>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x216>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4d      	ldr	r2, [pc, #308]	@ (8001490 <HAL_GPIO_Init+0x328>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x212>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4c      	ldr	r2, [pc, #304]	@ (8001494 <HAL_GPIO_Init+0x32c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x20e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4b      	ldr	r2, [pc, #300]	@ (8001498 <HAL_GPIO_Init+0x330>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x20a>
 800136e:	2307      	movs	r3, #7
 8001370:	e00e      	b.n	8001390 <HAL_GPIO_Init+0x228>
 8001372:	2308      	movs	r3, #8
 8001374:	e00c      	b.n	8001390 <HAL_GPIO_Init+0x228>
 8001376:	2306      	movs	r3, #6
 8001378:	e00a      	b.n	8001390 <HAL_GPIO_Init+0x228>
 800137a:	2305      	movs	r3, #5
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x228>
 800137e:	2304      	movs	r3, #4
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x228>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x228>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x228>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x228>
 800138e:	2300      	movs	r3, #0
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	@ (8001478 <HAL_GPIO_Init+0x310>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b3b      	ldr	r3, [pc, #236]	@ (800149c <HAL_GPIO_Init+0x334>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d2:	4a32      	ldr	r2, [pc, #200]	@ (800149c <HAL_GPIO_Init+0x334>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d8:	4b30      	ldr	r3, [pc, #192]	@ (800149c <HAL_GPIO_Init+0x334>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013fc:	4a27      	ldr	r2, [pc, #156]	@ (800149c <HAL_GPIO_Init+0x334>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001402:	4b26      	ldr	r3, [pc, #152]	@ (800149c <HAL_GPIO_Init+0x334>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001426:	4a1d      	ldr	r2, [pc, #116]	@ (800149c <HAL_GPIO_Init+0x334>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <HAL_GPIO_Init+0x334>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001450:	4a12      	ldr	r2, [pc, #72]	@ (800149c <HAL_GPIO_Init+0x334>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	f67f ae90 	bls.w	8001184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40021400 	.word	0x40021400
 8001494:	40021800 	.word	0x40021800
 8001498:	40021c00 	.word	0x40021c00
 800149c:	40013c00 	.word	0x40013c00

080014a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e12b      	b.n	800170a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fb10 	bl	8000aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2224      	movs	r2, #36	@ 0x24
 80014d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001504:	f001 f8da 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8001508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4a81      	ldr	r2, [pc, #516]	@ (8001714 <HAL_I2C_Init+0x274>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d807      	bhi.n	8001524 <HAL_I2C_Init+0x84>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4a80      	ldr	r2, [pc, #512]	@ (8001718 <HAL_I2C_Init+0x278>)
 8001518:	4293      	cmp	r3, r2
 800151a:	bf94      	ite	ls
 800151c:	2301      	movls	r3, #1
 800151e:	2300      	movhi	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	e006      	b.n	8001532 <HAL_I2C_Init+0x92>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4a7d      	ldr	r2, [pc, #500]	@ (800171c <HAL_I2C_Init+0x27c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	bf94      	ite	ls
 800152c:	2301      	movls	r3, #1
 800152e:	2300      	movhi	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0e7      	b.n	800170a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a78      	ldr	r2, [pc, #480]	@ (8001720 <HAL_I2C_Init+0x280>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9b      	lsrs	r3, r3, #18
 8001544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	430a      	orrs	r2, r1
 8001558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	4a6a      	ldr	r2, [pc, #424]	@ (8001714 <HAL_I2C_Init+0x274>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d802      	bhi.n	8001574 <HAL_I2C_Init+0xd4>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	3301      	adds	r3, #1
 8001572:	e009      	b.n	8001588 <HAL_I2C_Init+0xe8>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	4a69      	ldr	r2, [pc, #420]	@ (8001724 <HAL_I2C_Init+0x284>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	099b      	lsrs	r3, r3, #6
 8001586:	3301      	adds	r3, #1
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	430b      	orrs	r3, r1
 800158e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800159a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	495c      	ldr	r1, [pc, #368]	@ (8001714 <HAL_I2C_Init+0x274>)
 80015a4:	428b      	cmp	r3, r1
 80015a6:	d819      	bhi.n	80015dc <HAL_I2C_Init+0x13c>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1e59      	subs	r1, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b6:	1c59      	adds	r1, r3, #1
 80015b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015bc:	400b      	ands	r3, r1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00a      	beq.n	80015d8 <HAL_I2C_Init+0x138>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1e59      	subs	r1, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d0:	3301      	adds	r3, #1
 80015d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d6:	e051      	b.n	800167c <HAL_I2C_Init+0x1dc>
 80015d8:	2304      	movs	r3, #4
 80015da:	e04f      	b.n	800167c <HAL_I2C_Init+0x1dc>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <HAL_I2C_Init+0x168>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1e58      	subs	r0, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	440b      	add	r3, r1
 80015f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	e012      	b.n	800162e <HAL_I2C_Init+0x18e>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	1e58      	subs	r0, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	0099      	lsls	r1, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	fbb0 f3f3 	udiv	r3, r0, r3
 800161e:	3301      	adds	r3, #1
 8001620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf0c      	ite	eq
 8001628:	2301      	moveq	r3, #1
 800162a:	2300      	movne	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Init+0x196>
 8001632:	2301      	movs	r3, #1
 8001634:	e022      	b.n	800167c <HAL_I2C_Init+0x1dc>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10e      	bne.n	800165c <HAL_I2C_Init+0x1bc>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1e58      	subs	r0, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6859      	ldr	r1, [r3, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	440b      	add	r3, r1
 800164c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001650:	3301      	adds	r3, #1
 8001652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800165a:	e00f      	b.n	800167c <HAL_I2C_Init+0x1dc>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1e58      	subs	r0, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	0099      	lsls	r1, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001672:	3301      	adds	r3, #1
 8001674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001678:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	6809      	ldr	r1, [r1, #0]
 8001680:	4313      	orrs	r3, r2
 8001682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69da      	ldr	r2, [r3, #28]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6911      	ldr	r1, [r2, #16]
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68d2      	ldr	r2, [r2, #12]
 80016b6:	4311      	orrs	r1, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	430b      	orrs	r3, r1
 80016be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2220      	movs	r2, #32
 80016f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	000186a0 	.word	0x000186a0
 8001718:	001e847f 	.word	0x001e847f
 800171c:	003d08ff 	.word	0x003d08ff
 8001720:	431bde83 	.word	0x431bde83
 8001724:	10624dd3 	.word	0x10624dd3

08001728 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af02      	add	r7, sp, #8
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	461a      	mov	r2, r3
 8001734:	460b      	mov	r3, r1
 8001736:	817b      	strh	r3, [r7, #10]
 8001738:	4613      	mov	r3, r2
 800173a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff fbfe 	bl	8000f3c <HAL_GetTick>
 8001740:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b20      	cmp	r3, #32
 800174c:	f040 80e0 	bne.w	8001910 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2319      	movs	r3, #25
 8001756:	2201      	movs	r2, #1
 8001758:	4970      	ldr	r1, [pc, #448]	@ (800191c <HAL_I2C_Master_Transmit+0x1f4>)
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f964 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001766:	2302      	movs	r3, #2
 8001768:	e0d3      	b.n	8001912 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_I2C_Master_Transmit+0x50>
 8001774:	2302      	movs	r3, #2
 8001776:	e0cc      	b.n	8001912 <HAL_I2C_Master_Transmit+0x1ea>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b01      	cmp	r3, #1
 800178c:	d007      	beq.n	800179e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0201 	orr.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2221      	movs	r2, #33	@ 0x21
 80017b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2210      	movs	r2, #16
 80017ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	893a      	ldrh	r2, [r7, #8]
 80017ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4a50      	ldr	r2, [pc, #320]	@ (8001920 <HAL_I2C_Master_Transmit+0x1f8>)
 80017de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017e0:	8979      	ldrh	r1, [r7, #10]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	6a3a      	ldr	r2, [r7, #32]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f89c 	bl	8001924 <I2C_MasterRequestWrite>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e08d      	b.n	8001912 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800180c:	e066      	b.n	80018dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	6a39      	ldr	r1, [r7, #32]
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 fa22 	bl	8001c5c <I2C_WaitOnTXEFlagUntilTimeout>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00d      	beq.n	800183a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	2b04      	cmp	r3, #4
 8001824:	d107      	bne.n	8001836 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001834:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06b      	b.n	8001912 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001854:	b29b      	uxth	r3, r3
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b04      	cmp	r3, #4
 8001876:	d11b      	bne.n	80018b0 <HAL_I2C_Master_Transmit+0x188>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d017      	beq.n	80018b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	6a39      	ldr	r1, [r7, #32]
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 fa19 	bl	8001cec <I2C_WaitOnBTFFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00d      	beq.n	80018dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d107      	bne.n	80018d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e01a      	b.n	8001912 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d194      	bne.n	800180e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	e000      	b.n	8001912 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001910:	2302      	movs	r3, #2
  }
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	00100002 	.word	0x00100002
 8001920:	ffff0000 	.word	0xffff0000

08001924 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	460b      	mov	r3, r1
 8001932:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b08      	cmp	r3, #8
 800193e:	d006      	beq.n	800194e <I2C_MasterRequestWrite+0x2a>
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d003      	beq.n	800194e <I2C_MasterRequestWrite+0x2a>
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800194c:	d108      	bne.n	8001960 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e00b      	b.n	8001978 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001964:	2b12      	cmp	r3, #18
 8001966:	d107      	bne.n	8001978 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001976:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f84f 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00d      	beq.n	80019ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800199e:	d103      	bne.n	80019a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e035      	b.n	8001a18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019b4:	d108      	bne.n	80019c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019b6:	897b      	ldrh	r3, [r7, #10]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80019c4:	611a      	str	r2, [r3, #16]
 80019c6:	e01b      	b.n	8001a00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	11db      	asrs	r3, r3, #7
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f003 0306 	and.w	r3, r3, #6
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f063 030f 	orn	r3, r3, #15
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	490e      	ldr	r1, [pc, #56]	@ (8001a20 <I2C_MasterRequestWrite+0xfc>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f898 	bl	8001b1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e010      	b.n	8001a18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019f6:	897b      	ldrh	r3, [r7, #10]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <I2C_MasterRequestWrite+0x100>)
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f888 	bl	8001b1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	00010008 	.word	0x00010008
 8001a24:	00010002 	.word	0x00010002

08001a28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a38:	e048      	b.n	8001acc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a40:	d044      	beq.n	8001acc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a42:	f7ff fa7b 	bl	8000f3c <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d302      	bcc.n	8001a58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d139      	bne.n	8001acc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	0c1b      	lsrs	r3, r3, #16
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d10d      	bne.n	8001a7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	e00c      	b.n	8001a98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	43da      	mvns	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf0c      	ite	eq
 8001a90:	2301      	moveq	r3, #1
 8001a92:	2300      	movne	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d116      	bne.n	8001acc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	f043 0220 	orr.w	r2, r3, #32
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e023      	b.n	8001b14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d10d      	bne.n	8001af2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	43da      	mvns	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	bf0c      	ite	eq
 8001ae8:	2301      	moveq	r3, #1
 8001aea:	2300      	movne	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	e00c      	b.n	8001b0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	43da      	mvns	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	4013      	ands	r3, r2
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d093      	beq.n	8001a3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b2a:	e071      	b.n	8001c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b3a:	d123      	bne.n	8001b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f043 0204 	orr.w	r2, r3, #4
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e067      	b.n	8001c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b8a:	d041      	beq.n	8001c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8c:	f7ff f9d6 	bl	8000f3c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d302      	bcc.n	8001ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d136      	bne.n	8001c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	0c1b      	lsrs	r3, r3, #16
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d10c      	bne.n	8001bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf14      	ite	ne
 8001bbe:	2301      	movne	r3, #1
 8001bc0:	2300      	moveq	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	e00b      	b.n	8001bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d016      	beq.n	8001c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f043 0220 	orr.w	r2, r3, #32
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e021      	b.n	8001c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	0c1b      	lsrs	r3, r3, #16
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10c      	bne.n	8001c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	43da      	mvns	r2, r3
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	4013      	ands	r3, r2
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	e00b      	b.n	8001c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf14      	ite	ne
 8001c46:	2301      	movne	r3, #1
 8001c48:	2300      	moveq	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f47f af6d 	bne.w	8001b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c68:	e034      	b.n	8001cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 f886 	bl	8001d7c <I2C_IsAcknowledgeFailed>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e034      	b.n	8001ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c80:	d028      	beq.n	8001cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c82:	f7ff f95b 	bl	8000f3c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d302      	bcc.n	8001c98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11d      	bne.n	8001cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	2b80      	cmp	r3, #128	@ 0x80
 8001ca4:	d016      	beq.n	8001cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e007      	b.n	8001ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cde:	2b80      	cmp	r3, #128	@ 0x80
 8001ce0:	d1c3      	bne.n	8001c6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cf8:	e034      	b.n	8001d64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f83e 	bl	8001d7c <I2C_IsAcknowledgeFailed>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e034      	b.n	8001d74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d10:	d028      	beq.n	8001d64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d12:	f7ff f913 	bl	8000f3c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d302      	bcc.n	8001d28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d11d      	bne.n	8001d64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d016      	beq.n	8001d64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d50:	f043 0220 	orr.w	r2, r3, #32
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e007      	b.n	8001d74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d1c3      	bne.n	8001cfa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d92:	d11b      	bne.n	8001dcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	f043 0204 	orr.w	r2, r3, #4
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e267      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d075      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dfa:	4b88      	ldr	r3, [pc, #544]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d00c      	beq.n	8001e20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e06:	4b85      	ldr	r3, [pc, #532]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d112      	bne.n	8001e38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e12:	4b82      	ldr	r3, [pc, #520]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e1e:	d10b      	bne.n	8001e38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	4b7e      	ldr	r3, [pc, #504]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d05b      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x108>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d157      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e242      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e40:	d106      	bne.n	8001e50 <HAL_RCC_OscConfig+0x74>
 8001e42:	4b76      	ldr	r3, [pc, #472]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a75      	ldr	r2, [pc, #468]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e01d      	b.n	8001e8c <HAL_RCC_OscConfig+0xb0>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x98>
 8001e5a:	4b70      	ldr	r3, [pc, #448]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a6f      	ldr	r2, [pc, #444]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b6d      	ldr	r3, [pc, #436]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a6c      	ldr	r2, [pc, #432]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0xb0>
 8001e74:	4b69      	ldr	r3, [pc, #420]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a68      	ldr	r2, [pc, #416]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b66      	ldr	r3, [pc, #408]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a65      	ldr	r2, [pc, #404]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff f852 	bl	8000f3c <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff f84e 	bl	8000f3c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	@ 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e207      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b5b      	ldr	r3, [pc, #364]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0xc0>
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f83e 	bl	8000f3c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff f83a 	bl	8000f3c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	@ 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1f3      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	4b51      	ldr	r3, [pc, #324]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0xe8>
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d063      	beq.n	8001fba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efe:	4b47      	ldr	r3, [pc, #284]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d11c      	bne.n	8001f44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f0a:	4b44      	ldr	r3, [pc, #272]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d116      	bne.n	8001f44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	4b41      	ldr	r3, [pc, #260]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_RCC_OscConfig+0x152>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e1c7      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4937      	ldr	r1, [pc, #220]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	e03a      	b.n	8001fba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d020      	beq.n	8001f8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f4c:	4b34      	ldr	r3, [pc, #208]	@ (8002020 <HAL_RCC_OscConfig+0x244>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f52:	f7fe fff3 	bl	8000f3c <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5a:	f7fe ffef 	bl	8000f3c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1a8      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4b28      	ldr	r3, [pc, #160]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4925      	ldr	r1, [pc, #148]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	e015      	b.n	8001fba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8e:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <HAL_RCC_OscConfig+0x244>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe ffd2 	bl	8000f3c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7fe ffce 	bl	8000f3c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e187      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	4b1b      	ldr	r3, [pc, #108]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d036      	beq.n	8002034 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d016      	beq.n	8001ffc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_RCC_OscConfig+0x248>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd4:	f7fe ffb2 	bl	8000f3c <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fdc:	f7fe ffae 	bl	8000f3c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e167      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <HAL_RCC_OscConfig+0x240>)
 8001ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x200>
 8001ffa:	e01b      	b.n	8002034 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffc:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_RCC_OscConfig+0x248>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002002:	f7fe ff9b 	bl	8000f3c <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	e00e      	b.n	8002028 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200a:	f7fe ff97 	bl	8000f3c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d907      	bls.n	8002028 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e150      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
 800201c:	40023800 	.word	0x40023800
 8002020:	42470000 	.word	0x42470000
 8002024:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002028:	4b88      	ldr	r3, [pc, #544]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 800202a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ea      	bne.n	800200a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 8097 	beq.w	8002170 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002046:	4b81      	ldr	r3, [pc, #516]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10f      	bne.n	8002072 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b7d      	ldr	r3, [pc, #500]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	4a7c      	ldr	r2, [pc, #496]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 800205c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002060:	6413      	str	r3, [r2, #64]	@ 0x40
 8002062:	4b7a      	ldr	r3, [pc, #488]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206e:	2301      	movs	r3, #1
 8002070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002072:	4b77      	ldr	r3, [pc, #476]	@ (8002250 <HAL_RCC_OscConfig+0x474>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d118      	bne.n	80020b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207e:	4b74      	ldr	r3, [pc, #464]	@ (8002250 <HAL_RCC_OscConfig+0x474>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a73      	ldr	r2, [pc, #460]	@ (8002250 <HAL_RCC_OscConfig+0x474>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208a:	f7fe ff57 	bl	8000f3c <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002092:	f7fe ff53 	bl	8000f3c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e10c      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002250 <HAL_RCC_OscConfig+0x474>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x2ea>
 80020b8:	4b64      	ldr	r3, [pc, #400]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020bc:	4a63      	ldr	r2, [pc, #396]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c4:	e01c      	b.n	8002100 <HAL_RCC_OscConfig+0x324>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b05      	cmp	r3, #5
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x30c>
 80020ce:	4b5f      	ldr	r3, [pc, #380]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d2:	4a5e      	ldr	r2, [pc, #376]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020da:	4b5c      	ldr	r3, [pc, #368]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020de:	4a5b      	ldr	r2, [pc, #364]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e6:	e00b      	b.n	8002100 <HAL_RCC_OscConfig+0x324>
 80020e8:	4b58      	ldr	r3, [pc, #352]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	4a57      	ldr	r2, [pc, #348]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80020ee:	f023 0301 	bic.w	r3, r3, #1
 80020f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f4:	4b55      	ldr	r3, [pc, #340]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f8:	4a54      	ldr	r2, [pc, #336]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80020fa:	f023 0304 	bic.w	r3, r3, #4
 80020fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7fe ff18 	bl	8000f3c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210e:	e00a      	b.n	8002126 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002110:	f7fe ff14 	bl	8000f3c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e0cb      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002126:	4b49      	ldr	r3, [pc, #292]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0ee      	beq.n	8002110 <HAL_RCC_OscConfig+0x334>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7fe ff02 	bl	8000f3c <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213a:	e00a      	b.n	8002152 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213c:	f7fe fefe 	bl	8000f3c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e0b5      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002152:	4b3e      	ldr	r3, [pc, #248]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1ee      	bne.n	800213c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800215e:	7dfb      	ldrb	r3, [r7, #23]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002164:	4b39      	ldr	r3, [pc, #228]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	4a38      	ldr	r2, [pc, #224]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 800216a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800216e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80a1 	beq.w	80022bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800217a:	4b34      	ldr	r3, [pc, #208]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b08      	cmp	r3, #8
 8002184:	d05c      	beq.n	8002240 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d141      	bne.n	8002212 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b31      	ldr	r3, [pc, #196]	@ (8002254 <HAL_RCC_OscConfig+0x478>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7fe fed2 	bl	8000f3c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7fe fece 	bl	8000f3c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e087      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b27      	ldr	r3, [pc, #156]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69da      	ldr	r2, [r3, #28]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	019b      	lsls	r3, r3, #6
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	085b      	lsrs	r3, r3, #1
 80021d2:	3b01      	subs	r3, #1
 80021d4:	041b      	lsls	r3, r3, #16
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	491b      	ldr	r1, [pc, #108]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_RCC_OscConfig+0x478>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe fea7 	bl	8000f3c <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f2:	f7fe fea3 	bl	8000f3c <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e05c      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x416>
 8002210:	e054      	b.n	80022bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b10      	ldr	r3, [pc, #64]	@ (8002254 <HAL_RCC_OscConfig+0x478>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe fe90 	bl	8000f3c <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fe8c 	bl	8000f3c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e045      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_RCC_OscConfig+0x470>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x444>
 800223e:	e03d      	b.n	80022bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e038      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
 800224c:	40023800 	.word	0x40023800
 8002250:	40007000 	.word	0x40007000
 8002254:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002258:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <HAL_RCC_OscConfig+0x4ec>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d028      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d121      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d11a      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002288:	4013      	ands	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800228e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002290:	4293      	cmp	r3, r2
 8002292:	d111      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	3b01      	subs	r3, #1
 80022a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800

080022cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0cc      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e0:	4b68      	ldr	r3, [pc, #416]	@ (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d90c      	bls.n	8002308 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b65      	ldr	r3, [pc, #404]	@ (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b63      	ldr	r3, [pc, #396]	@ (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0b8      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d020      	beq.n	8002356 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002320:	4b59      	ldr	r3, [pc, #356]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a58      	ldr	r2, [pc, #352]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800232a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002338:	4b53      	ldr	r3, [pc, #332]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a52      	ldr	r2, [pc, #328]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002342:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002344:	4b50      	ldr	r3, [pc, #320]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	494d      	ldr	r1, [pc, #308]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d044      	beq.n	80023ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b47      	ldr	r3, [pc, #284]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d119      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e07f      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d003      	beq.n	800238a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002386:	2b03      	cmp	r3, #3
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	4b3f      	ldr	r3, [pc, #252]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e06f      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	4b3b      	ldr	r3, [pc, #236]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e067      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023aa:	4b37      	ldr	r3, [pc, #220]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f023 0203 	bic.w	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4934      	ldr	r1, [pc, #208]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023bc:	f7fe fdbe 	bl	8000f3c <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	e00a      	b.n	80023da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c4:	f7fe fdba 	bl	8000f3c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e04f      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	4b2b      	ldr	r3, [pc, #172]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 020c 	and.w	r2, r3, #12
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1eb      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b25      	ldr	r3, [pc, #148]	@ (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d20c      	bcs.n	8002414 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b22      	ldr	r3, [pc, #136]	@ (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b20      	ldr	r3, [pc, #128]	@ (8002484 <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e032      	b.n	800247a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002420:	4b19      	ldr	r3, [pc, #100]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4916      	ldr	r1, [pc, #88]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243e:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	490e      	ldr	r1, [pc, #56]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002452:	f000 f821 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8002456:	4602      	mov	r2, r0
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	490a      	ldr	r1, [pc, #40]	@ (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	5ccb      	ldrb	r3, [r1, r3]
 8002466:	fa22 f303 	lsr.w	r3, r2, r3
 800246a:	4a09      	ldr	r2, [pc, #36]	@ (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800246e:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fd1e 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023c00 	.word	0x40023c00
 8002488:	40023800 	.word	0x40023800
 800248c:	08004394 	.word	0x08004394
 8002490:	20000000 	.word	0x20000000
 8002494:	20000004 	.word	0x20000004

08002498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800249c:	b094      	sub	sp, #80	@ 0x50
 800249e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b0:	4b79      	ldr	r3, [pc, #484]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d00d      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x40>
 80024bc:	2b08      	cmp	r3, #8
 80024be:	f200 80e1 	bhi.w	8002684 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x34>
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d003      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ca:	e0db      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024cc:	4b73      	ldr	r3, [pc, #460]	@ (800269c <HAL_RCC_GetSysClockFreq+0x204>)
 80024ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024d0:	e0db      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024d2:	4b73      	ldr	r3, [pc, #460]	@ (80026a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80024d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024d6:	e0d8      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x200>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d063      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	099b      	lsrs	r3, r3, #6
 80024f4:	2200      	movs	r2, #0
 80024f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002500:	633b      	str	r3, [r7, #48]	@ 0x30
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	@ 0x34
 8002506:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800250a:	4622      	mov	r2, r4
 800250c:	462b      	mov	r3, r5
 800250e:	f04f 0000 	mov.w	r0, #0
 8002512:	f04f 0100 	mov.w	r1, #0
 8002516:	0159      	lsls	r1, r3, #5
 8002518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800251c:	0150      	lsls	r0, r2, #5
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4621      	mov	r1, r4
 8002524:	1a51      	subs	r1, r2, r1
 8002526:	6139      	str	r1, [r7, #16]
 8002528:	4629      	mov	r1, r5
 800252a:	eb63 0301 	sbc.w	r3, r3, r1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800253c:	4659      	mov	r1, fp
 800253e:	018b      	lsls	r3, r1, #6
 8002540:	4651      	mov	r1, sl
 8002542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002546:	4651      	mov	r1, sl
 8002548:	018a      	lsls	r2, r1, #6
 800254a:	4651      	mov	r1, sl
 800254c:	ebb2 0801 	subs.w	r8, r2, r1
 8002550:	4659      	mov	r1, fp
 8002552:	eb63 0901 	sbc.w	r9, r3, r1
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800256a:	4690      	mov	r8, r2
 800256c:	4699      	mov	r9, r3
 800256e:	4623      	mov	r3, r4
 8002570:	eb18 0303 	adds.w	r3, r8, r3
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	462b      	mov	r3, r5
 8002578:	eb49 0303 	adc.w	r3, r9, r3
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800258a:	4629      	mov	r1, r5
 800258c:	024b      	lsls	r3, r1, #9
 800258e:	4621      	mov	r1, r4
 8002590:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002594:	4621      	mov	r1, r4
 8002596:	024a      	lsls	r2, r1, #9
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800259e:	2200      	movs	r2, #0
 80025a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025a8:	f7fd fe62 	bl	8000270 <__aeabi_uldivmod>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4613      	mov	r3, r2
 80025b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025b4:	e058      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b6:	4b38      	ldr	r3, [pc, #224]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	099b      	lsrs	r3, r3, #6
 80025bc:	2200      	movs	r2, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	4611      	mov	r1, r2
 80025c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025c6:	623b      	str	r3, [r7, #32]
 80025c8:	2300      	movs	r3, #0
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80025cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025d0:	4642      	mov	r2, r8
 80025d2:	464b      	mov	r3, r9
 80025d4:	f04f 0000 	mov.w	r0, #0
 80025d8:	f04f 0100 	mov.w	r1, #0
 80025dc:	0159      	lsls	r1, r3, #5
 80025de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e2:	0150      	lsls	r0, r2, #5
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4641      	mov	r1, r8
 80025ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ee:	4649      	mov	r1, r9
 80025f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	f04f 0300 	mov.w	r3, #0
 80025fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002600:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002604:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002608:	ebb2 040a 	subs.w	r4, r2, sl
 800260c:	eb63 050b 	sbc.w	r5, r3, fp
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	00eb      	lsls	r3, r5, #3
 800261a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800261e:	00e2      	lsls	r2, r4, #3
 8002620:	4614      	mov	r4, r2
 8002622:	461d      	mov	r5, r3
 8002624:	4643      	mov	r3, r8
 8002626:	18e3      	adds	r3, r4, r3
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	464b      	mov	r3, r9
 800262c:	eb45 0303 	adc.w	r3, r5, r3
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800263e:	4629      	mov	r1, r5
 8002640:	028b      	lsls	r3, r1, #10
 8002642:	4621      	mov	r1, r4
 8002644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002648:	4621      	mov	r1, r4
 800264a:	028a      	lsls	r2, r1, #10
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002652:	2200      	movs	r2, #0
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	61fa      	str	r2, [r7, #28]
 8002658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800265c:	f7fd fe08 	bl	8000270 <__aeabi_uldivmod>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4613      	mov	r3, r2
 8002666:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002668:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x200>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	3301      	adds	r3, #1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002678:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800267a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800267c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002680:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002682:	e002      	b.n	800268a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002684:	4b05      	ldr	r3, [pc, #20]	@ (800269c <HAL_RCC_GetSysClockFreq+0x204>)
 8002686:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800268a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800268c:	4618      	mov	r0, r3
 800268e:	3750      	adds	r7, #80	@ 0x50
 8002690:	46bd      	mov	sp, r7
 8002692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	00f42400 	.word	0x00f42400
 80026a0:	007a1200 	.word	0x007a1200

080026a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a8:	4b03      	ldr	r3, [pc, #12]	@ (80026b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000

080026bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026c0:	f7ff fff0 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0a9b      	lsrs	r3, r3, #10
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4903      	ldr	r1, [pc, #12]	@ (80026e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	080043a4 	.word	0x080043a4

080026e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026e8:	f7ff ffdc 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	0b5b      	lsrs	r3, r3, #13
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	4903      	ldr	r1, [pc, #12]	@ (8002708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40023800 	.word	0x40023800
 8002708:	080043a4 	.word	0x080043a4

0800270c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e042      	b.n	80027a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe fa22 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2224      	movs	r2, #36	@ 0x24
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800274e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f97f 	bl	8002a54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	@ 0x28
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	f040 8081 	bne.w	80028d0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <HAL_UART_Receive+0x2e>
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e079      	b.n	80028d2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2222      	movs	r2, #34	@ 0x22
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f2:	f7fe fba3 	bl	8000f3c <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800280c:	d108      	bne.n	8002820 <HAL_UART_Receive+0x74>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d104      	bne.n	8002820 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e003      	b.n	8002828 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002828:	e047      	b.n	80028ba <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	2120      	movs	r1, #32
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f850 	bl	80028da <UART_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e042      	b.n	80028d2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285e:	b29a      	uxth	r2, r3
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	3302      	adds	r3, #2
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	e01f      	b.n	80028ac <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002874:	d007      	beq.n	8002886 <HAL_UART_Receive+0xda>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <HAL_UART_Receive+0xe8>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	e008      	b.n	80028a6 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	3b01      	subs	r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1b2      	bne.n	800282a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	4613      	mov	r3, r2
 80028e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ea:	e03b      	b.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028f2:	d037      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7fe fb22 	bl	8000f3c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	6a3a      	ldr	r2, [r7, #32]
 8002900:	429a      	cmp	r2, r3
 8002902:	d302      	bcc.n	800290a <UART_WaitOnFlagUntilTimeout+0x30>
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e03a      	b.n	8002984 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b80      	cmp	r3, #128	@ 0x80
 8002920:	d020      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b40      	cmp	r3, #64	@ 0x40
 8002926:	d01d      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b08      	cmp	r3, #8
 8002934:	d116      	bne.n	8002964 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f81d 	bl	800298c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2208      	movs	r2, #8
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e00f      	b.n	8002984 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	429a      	cmp	r2, r3
 8002980:	d0b4      	beq.n	80028ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b095      	sub	sp, #84	@ 0x54
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299e:	e853 3f00 	ldrex	r3, [r3]
 80029a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80029b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029bc:	e841 2300 	strex	r3, r2, [r1]
 80029c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e5      	bne.n	8002994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3314      	adds	r3, #20
 80029ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029f0:	e841 2300 	strex	r3, r2, [r1]
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e5      	bne.n	80029c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d119      	bne.n	8002a38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f023 0310 	bic.w	r3, r3, #16
 8002a1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a24:	61ba      	str	r2, [r7, #24]
 8002a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	6979      	ldr	r1, [r7, #20]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	e841 2300 	strex	r3, r2, [r1]
 8002a30:	613b      	str	r3, [r7, #16]
   return(result);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e5      	bne.n	8002a04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a46:	bf00      	nop
 8002a48:	3754      	adds	r7, #84	@ 0x54
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a58:	b0c0      	sub	sp, #256	@ 0x100
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a70:	68d9      	ldr	r1, [r3, #12]
 8002a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	ea40 0301 	orr.w	r3, r0, r1
 8002a7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002aac:	f021 010c 	bic.w	r1, r1, #12
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002aba:	430b      	orrs	r3, r1
 8002abc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ace:	6999      	ldr	r1, [r3, #24]
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	ea40 0301 	orr.w	r3, r0, r1
 8002ada:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b8f      	ldr	r3, [pc, #572]	@ (8002d20 <UART_SetConfig+0x2cc>)
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d005      	beq.n	8002af4 <UART_SetConfig+0xa0>
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b8d      	ldr	r3, [pc, #564]	@ (8002d24 <UART_SetConfig+0x2d0>)
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d104      	bne.n	8002afe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002af4:	f7ff fdf6 	bl	80026e4 <HAL_RCC_GetPCLK2Freq>
 8002af8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002afc:	e003      	b.n	8002b06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002afe:	f7ff fddd 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8002b02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b10:	f040 810c 	bne.w	8002d2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	1891      	adds	r1, r2, r2
 8002b2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b2e:	415b      	adcs	r3, r3
 8002b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b36:	4621      	mov	r1, r4
 8002b38:	eb12 0801 	adds.w	r8, r2, r1
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	eb43 0901 	adc.w	r9, r3, r1
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b56:	4690      	mov	r8, r2
 8002b58:	4699      	mov	r9, r3
 8002b5a:	4623      	mov	r3, r4
 8002b5c:	eb18 0303 	adds.w	r3, r8, r3
 8002b60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b64:	462b      	mov	r3, r5
 8002b66:	eb49 0303 	adc.w	r3, r9, r3
 8002b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b82:	460b      	mov	r3, r1
 8002b84:	18db      	adds	r3, r3, r3
 8002b86:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b88:	4613      	mov	r3, r2
 8002b8a:	eb42 0303 	adc.w	r3, r2, r3
 8002b8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b98:	f7fd fb6a 	bl	8000270 <__aeabi_uldivmod>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4b61      	ldr	r3, [pc, #388]	@ (8002d28 <UART_SetConfig+0x2d4>)
 8002ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	011c      	lsls	r4, r3, #4
 8002baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002bb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002bbc:	4642      	mov	r2, r8
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	1891      	adds	r1, r2, r2
 8002bc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002bc4:	415b      	adcs	r3, r3
 8002bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bcc:	4641      	mov	r1, r8
 8002bce:	eb12 0a01 	adds.w	sl, r2, r1
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	eb43 0b01 	adc.w	fp, r3, r1
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002be4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002be8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bec:	4692      	mov	sl, r2
 8002bee:	469b      	mov	fp, r3
 8002bf0:	4643      	mov	r3, r8
 8002bf2:	eb1a 0303 	adds.w	r3, sl, r3
 8002bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	eb4b 0303 	adc.w	r3, fp, r3
 8002c00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	18db      	adds	r3, r3, r3
 8002c1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c1e:	4613      	mov	r3, r2
 8002c20:	eb42 0303 	adc.w	r3, r2, r3
 8002c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c2e:	f7fd fb1f 	bl	8000270 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <UART_SetConfig+0x2d4>)
 8002c3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2264      	movs	r2, #100	@ 0x64
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	1acb      	subs	r3, r1, r3
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c4e:	4b36      	ldr	r3, [pc, #216]	@ (8002d28 <UART_SetConfig+0x2d4>)
 8002c50:	fba3 2302 	umull	r2, r3, r3, r2
 8002c54:	095b      	lsrs	r3, r3, #5
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c5c:	441c      	add	r4, r3
 8002c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c70:	4642      	mov	r2, r8
 8002c72:	464b      	mov	r3, r9
 8002c74:	1891      	adds	r1, r2, r2
 8002c76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c78:	415b      	adcs	r3, r3
 8002c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c80:	4641      	mov	r1, r8
 8002c82:	1851      	adds	r1, r2, r1
 8002c84:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c86:	4649      	mov	r1, r9
 8002c88:	414b      	adcs	r3, r1
 8002c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c98:	4659      	mov	r1, fp
 8002c9a:	00cb      	lsls	r3, r1, #3
 8002c9c:	4651      	mov	r1, sl
 8002c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	00ca      	lsls	r2, r1, #3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	4642      	mov	r2, r8
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cb4:	464b      	mov	r3, r9
 8002cb6:	460a      	mov	r2, r1
 8002cb8:	eb42 0303 	adc.w	r3, r2, r3
 8002cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ccc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002cd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	18db      	adds	r3, r3, r3
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cda:	4613      	mov	r3, r2
 8002cdc:	eb42 0303 	adc.w	r3, r2, r3
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ce6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cea:	f7fd fac1 	bl	8000270 <__aeabi_uldivmod>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <UART_SetConfig+0x2d4>)
 8002cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	2164      	movs	r1, #100	@ 0x64
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	3332      	adds	r3, #50	@ 0x32
 8002d06:	4a08      	ldr	r2, [pc, #32]	@ (8002d28 <UART_SetConfig+0x2d4>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	f003 0207 	and.w	r2, r3, #7
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4422      	add	r2, r4
 8002d1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d1c:	e106      	b.n	8002f2c <UART_SetConfig+0x4d8>
 8002d1e:	bf00      	nop
 8002d20:	40011000 	.word	0x40011000
 8002d24:	40011400 	.word	0x40011400
 8002d28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d30:	2200      	movs	r2, #0
 8002d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d3e:	4642      	mov	r2, r8
 8002d40:	464b      	mov	r3, r9
 8002d42:	1891      	adds	r1, r2, r2
 8002d44:	6239      	str	r1, [r7, #32]
 8002d46:	415b      	adcs	r3, r3
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d4e:	4641      	mov	r1, r8
 8002d50:	1854      	adds	r4, r2, r1
 8002d52:	4649      	mov	r1, r9
 8002d54:	eb43 0501 	adc.w	r5, r3, r1
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	00eb      	lsls	r3, r5, #3
 8002d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d66:	00e2      	lsls	r2, r4, #3
 8002d68:	4614      	mov	r4, r2
 8002d6a:	461d      	mov	r5, r3
 8002d6c:	4643      	mov	r3, r8
 8002d6e:	18e3      	adds	r3, r4, r3
 8002d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d74:	464b      	mov	r3, r9
 8002d76:	eb45 0303 	adc.w	r3, r5, r3
 8002d7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	008b      	lsls	r3, r1, #2
 8002d9e:	4621      	mov	r1, r4
 8002da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da4:	4621      	mov	r1, r4
 8002da6:	008a      	lsls	r2, r1, #2
 8002da8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002dac:	f7fd fa60 	bl	8000270 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4b60      	ldr	r3, [pc, #384]	@ (8002f38 <UART_SetConfig+0x4e4>)
 8002db6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	011c      	lsls	r4, r3, #4
 8002dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002dcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002dd0:	4642      	mov	r2, r8
 8002dd2:	464b      	mov	r3, r9
 8002dd4:	1891      	adds	r1, r2, r2
 8002dd6:	61b9      	str	r1, [r7, #24]
 8002dd8:	415b      	adcs	r3, r3
 8002dda:	61fb      	str	r3, [r7, #28]
 8002ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de0:	4641      	mov	r1, r8
 8002de2:	1851      	adds	r1, r2, r1
 8002de4:	6139      	str	r1, [r7, #16]
 8002de6:	4649      	mov	r1, r9
 8002de8:	414b      	adcs	r3, r1
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002df8:	4659      	mov	r1, fp
 8002dfa:	00cb      	lsls	r3, r1, #3
 8002dfc:	4651      	mov	r1, sl
 8002dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e02:	4651      	mov	r1, sl
 8002e04:	00ca      	lsls	r2, r1, #3
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e14:	464b      	mov	r3, r9
 8002e16:	460a      	mov	r2, r1
 8002e18:	eb42 0303 	adc.w	r3, r2, r3
 8002e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e38:	4649      	mov	r1, r9
 8002e3a:	008b      	lsls	r3, r1, #2
 8002e3c:	4641      	mov	r1, r8
 8002e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e42:	4641      	mov	r1, r8
 8002e44:	008a      	lsls	r2, r1, #2
 8002e46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e4a:	f7fd fa11 	bl	8000270 <__aeabi_uldivmod>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4611      	mov	r1, r2
 8002e54:	4b38      	ldr	r3, [pc, #224]	@ (8002f38 <UART_SetConfig+0x4e4>)
 8002e56:	fba3 2301 	umull	r2, r3, r3, r1
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2264      	movs	r2, #100	@ 0x64
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	1acb      	subs	r3, r1, r3
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	3332      	adds	r3, #50	@ 0x32
 8002e68:	4a33      	ldr	r2, [pc, #204]	@ (8002f38 <UART_SetConfig+0x4e4>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e74:	441c      	add	r4, r3
 8002e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e84:	4642      	mov	r2, r8
 8002e86:	464b      	mov	r3, r9
 8002e88:	1891      	adds	r1, r2, r2
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	415b      	adcs	r3, r3
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e94:	4641      	mov	r1, r8
 8002e96:	1851      	adds	r1, r2, r1
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	414b      	adcs	r3, r1
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002eac:	4659      	mov	r1, fp
 8002eae:	00cb      	lsls	r3, r1, #3
 8002eb0:	4651      	mov	r1, sl
 8002eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb6:	4651      	mov	r1, sl
 8002eb8:	00ca      	lsls	r2, r1, #3
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	460a      	mov	r2, r1
 8002eca:	eb42 0303 	adc.w	r3, r2, r3
 8002ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002eda:	667a      	str	r2, [r7, #100]	@ 0x64
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ee8:	4649      	mov	r1, r9
 8002eea:	008b      	lsls	r3, r1, #2
 8002eec:	4641      	mov	r1, r8
 8002eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ef2:	4641      	mov	r1, r8
 8002ef4:	008a      	lsls	r2, r1, #2
 8002ef6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002efa:	f7fd f9b9 	bl	8000270 <__aeabi_uldivmod>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <UART_SetConfig+0x4e4>)
 8002f04:	fba3 1302 	umull	r1, r3, r3, r2
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	2164      	movs	r1, #100	@ 0x64
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	3332      	adds	r3, #50	@ 0x32
 8002f16:	4a08      	ldr	r2, [pc, #32]	@ (8002f38 <UART_SetConfig+0x4e4>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	f003 020f 	and.w	r2, r3, #15
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4422      	add	r2, r4
 8002f2a:	609a      	str	r2, [r3, #8]
}
 8002f2c:	bf00      	nop
 8002f2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f32:	46bd      	mov	sp, r7
 8002f34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f38:	51eb851f 	.word	0x51eb851f

08002f3c <std>:
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	b510      	push	{r4, lr}
 8002f40:	4604      	mov	r4, r0
 8002f42:	e9c0 3300 	strd	r3, r3, [r0]
 8002f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f4a:	6083      	str	r3, [r0, #8]
 8002f4c:	8181      	strh	r1, [r0, #12]
 8002f4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f50:	81c2      	strh	r2, [r0, #14]
 8002f52:	6183      	str	r3, [r0, #24]
 8002f54:	4619      	mov	r1, r3
 8002f56:	2208      	movs	r2, #8
 8002f58:	305c      	adds	r0, #92	@ 0x5c
 8002f5a:	f000 f92a 	bl	80031b2 <memset>
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <std+0x58>)
 8002f60:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f62:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <std+0x5c>)
 8002f64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f66:	4b0d      	ldr	r3, [pc, #52]	@ (8002f9c <std+0x60>)
 8002f68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <std+0x64>)
 8002f6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa4 <std+0x68>)
 8002f70:	6224      	str	r4, [r4, #32]
 8002f72:	429c      	cmp	r4, r3
 8002f74:	d006      	beq.n	8002f84 <std+0x48>
 8002f76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f7a:	4294      	cmp	r4, r2
 8002f7c:	d002      	beq.n	8002f84 <std+0x48>
 8002f7e:	33d0      	adds	r3, #208	@ 0xd0
 8002f80:	429c      	cmp	r4, r3
 8002f82:	d105      	bne.n	8002f90 <std+0x54>
 8002f84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f8c:	f000 b9fc 	b.w	8003388 <__retarget_lock_init_recursive>
 8002f90:	bd10      	pop	{r4, pc}
 8002f92:	bf00      	nop
 8002f94:	0800312d 	.word	0x0800312d
 8002f98:	0800314f 	.word	0x0800314f
 8002f9c:	08003187 	.word	0x08003187
 8002fa0:	080031ab 	.word	0x080031ab
 8002fa4:	20000154 	.word	0x20000154

08002fa8 <stdio_exit_handler>:
 8002fa8:	4a02      	ldr	r2, [pc, #8]	@ (8002fb4 <stdio_exit_handler+0xc>)
 8002faa:	4903      	ldr	r1, [pc, #12]	@ (8002fb8 <stdio_exit_handler+0x10>)
 8002fac:	4803      	ldr	r0, [pc, #12]	@ (8002fbc <stdio_exit_handler+0x14>)
 8002fae:	f000 b869 	b.w	8003084 <_fwalk_sglue>
 8002fb2:	bf00      	nop
 8002fb4:	2000000c 	.word	0x2000000c
 8002fb8:	08003cad 	.word	0x08003cad
 8002fbc:	2000001c 	.word	0x2000001c

08002fc0 <cleanup_stdio>:
 8002fc0:	6841      	ldr	r1, [r0, #4]
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <cleanup_stdio+0x34>)
 8002fc4:	4299      	cmp	r1, r3
 8002fc6:	b510      	push	{r4, lr}
 8002fc8:	4604      	mov	r4, r0
 8002fca:	d001      	beq.n	8002fd0 <cleanup_stdio+0x10>
 8002fcc:	f000 fe6e 	bl	8003cac <_fflush_r>
 8002fd0:	68a1      	ldr	r1, [r4, #8]
 8002fd2:	4b09      	ldr	r3, [pc, #36]	@ (8002ff8 <cleanup_stdio+0x38>)
 8002fd4:	4299      	cmp	r1, r3
 8002fd6:	d002      	beq.n	8002fde <cleanup_stdio+0x1e>
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f000 fe67 	bl	8003cac <_fflush_r>
 8002fde:	68e1      	ldr	r1, [r4, #12]
 8002fe0:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <cleanup_stdio+0x3c>)
 8002fe2:	4299      	cmp	r1, r3
 8002fe4:	d004      	beq.n	8002ff0 <cleanup_stdio+0x30>
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fec:	f000 be5e 	b.w	8003cac <_fflush_r>
 8002ff0:	bd10      	pop	{r4, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000154 	.word	0x20000154
 8002ff8:	200001bc 	.word	0x200001bc
 8002ffc:	20000224 	.word	0x20000224

08003000 <global_stdio_init.part.0>:
 8003000:	b510      	push	{r4, lr}
 8003002:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <global_stdio_init.part.0+0x30>)
 8003004:	4c0b      	ldr	r4, [pc, #44]	@ (8003034 <global_stdio_init.part.0+0x34>)
 8003006:	4a0c      	ldr	r2, [pc, #48]	@ (8003038 <global_stdio_init.part.0+0x38>)
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	4620      	mov	r0, r4
 800300c:	2200      	movs	r2, #0
 800300e:	2104      	movs	r1, #4
 8003010:	f7ff ff94 	bl	8002f3c <std>
 8003014:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003018:	2201      	movs	r2, #1
 800301a:	2109      	movs	r1, #9
 800301c:	f7ff ff8e 	bl	8002f3c <std>
 8003020:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003024:	2202      	movs	r2, #2
 8003026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800302a:	2112      	movs	r1, #18
 800302c:	f7ff bf86 	b.w	8002f3c <std>
 8003030:	2000028c 	.word	0x2000028c
 8003034:	20000154 	.word	0x20000154
 8003038:	08002fa9 	.word	0x08002fa9

0800303c <__sfp_lock_acquire>:
 800303c:	4801      	ldr	r0, [pc, #4]	@ (8003044 <__sfp_lock_acquire+0x8>)
 800303e:	f000 b9a4 	b.w	800338a <__retarget_lock_acquire_recursive>
 8003042:	bf00      	nop
 8003044:	20000295 	.word	0x20000295

08003048 <__sfp_lock_release>:
 8003048:	4801      	ldr	r0, [pc, #4]	@ (8003050 <__sfp_lock_release+0x8>)
 800304a:	f000 b99f 	b.w	800338c <__retarget_lock_release_recursive>
 800304e:	bf00      	nop
 8003050:	20000295 	.word	0x20000295

08003054 <__sinit>:
 8003054:	b510      	push	{r4, lr}
 8003056:	4604      	mov	r4, r0
 8003058:	f7ff fff0 	bl	800303c <__sfp_lock_acquire>
 800305c:	6a23      	ldr	r3, [r4, #32]
 800305e:	b11b      	cbz	r3, 8003068 <__sinit+0x14>
 8003060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003064:	f7ff bff0 	b.w	8003048 <__sfp_lock_release>
 8003068:	4b04      	ldr	r3, [pc, #16]	@ (800307c <__sinit+0x28>)
 800306a:	6223      	str	r3, [r4, #32]
 800306c:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <__sinit+0x2c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f5      	bne.n	8003060 <__sinit+0xc>
 8003074:	f7ff ffc4 	bl	8003000 <global_stdio_init.part.0>
 8003078:	e7f2      	b.n	8003060 <__sinit+0xc>
 800307a:	bf00      	nop
 800307c:	08002fc1 	.word	0x08002fc1
 8003080:	2000028c 	.word	0x2000028c

08003084 <_fwalk_sglue>:
 8003084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003088:	4607      	mov	r7, r0
 800308a:	4688      	mov	r8, r1
 800308c:	4614      	mov	r4, r2
 800308e:	2600      	movs	r6, #0
 8003090:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003094:	f1b9 0901 	subs.w	r9, r9, #1
 8003098:	d505      	bpl.n	80030a6 <_fwalk_sglue+0x22>
 800309a:	6824      	ldr	r4, [r4, #0]
 800309c:	2c00      	cmp	r4, #0
 800309e:	d1f7      	bne.n	8003090 <_fwalk_sglue+0xc>
 80030a0:	4630      	mov	r0, r6
 80030a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030a6:	89ab      	ldrh	r3, [r5, #12]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d907      	bls.n	80030bc <_fwalk_sglue+0x38>
 80030ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030b0:	3301      	adds	r3, #1
 80030b2:	d003      	beq.n	80030bc <_fwalk_sglue+0x38>
 80030b4:	4629      	mov	r1, r5
 80030b6:	4638      	mov	r0, r7
 80030b8:	47c0      	blx	r8
 80030ba:	4306      	orrs	r6, r0
 80030bc:	3568      	adds	r5, #104	@ 0x68
 80030be:	e7e9      	b.n	8003094 <_fwalk_sglue+0x10>

080030c0 <sniprintf>:
 80030c0:	b40c      	push	{r2, r3}
 80030c2:	b530      	push	{r4, r5, lr}
 80030c4:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <sniprintf+0x68>)
 80030c6:	1e0c      	subs	r4, r1, #0
 80030c8:	681d      	ldr	r5, [r3, #0]
 80030ca:	b09d      	sub	sp, #116	@ 0x74
 80030cc:	da08      	bge.n	80030e0 <sniprintf+0x20>
 80030ce:	238b      	movs	r3, #139	@ 0x8b
 80030d0:	602b      	str	r3, [r5, #0]
 80030d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030d6:	b01d      	add	sp, #116	@ 0x74
 80030d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80030dc:	b002      	add	sp, #8
 80030de:	4770      	bx	lr
 80030e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80030e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	931b      	str	r3, [sp, #108]	@ 0x6c
 80030ee:	bf14      	ite	ne
 80030f0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80030f4:	4623      	moveq	r3, r4
 80030f6:	9304      	str	r3, [sp, #16]
 80030f8:	9307      	str	r3, [sp, #28]
 80030fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80030fe:	9002      	str	r0, [sp, #8]
 8003100:	9006      	str	r0, [sp, #24]
 8003102:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003106:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003108:	ab21      	add	r3, sp, #132	@ 0x84
 800310a:	a902      	add	r1, sp, #8
 800310c:	4628      	mov	r0, r5
 800310e:	9301      	str	r3, [sp, #4]
 8003110:	f000 fac0 	bl	8003694 <_svfiprintf_r>
 8003114:	1c43      	adds	r3, r0, #1
 8003116:	bfbc      	itt	lt
 8003118:	238b      	movlt	r3, #139	@ 0x8b
 800311a:	602b      	strlt	r3, [r5, #0]
 800311c:	2c00      	cmp	r4, #0
 800311e:	d0da      	beq.n	80030d6 <sniprintf+0x16>
 8003120:	9b02      	ldr	r3, [sp, #8]
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e7d6      	b.n	80030d6 <sniprintf+0x16>
 8003128:	20000018 	.word	0x20000018

0800312c <__sread>:
 800312c:	b510      	push	{r4, lr}
 800312e:	460c      	mov	r4, r1
 8003130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003134:	f000 f8da 	bl	80032ec <_read_r>
 8003138:	2800      	cmp	r0, #0
 800313a:	bfab      	itete	ge
 800313c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800313e:	89a3      	ldrhlt	r3, [r4, #12]
 8003140:	181b      	addge	r3, r3, r0
 8003142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003146:	bfac      	ite	ge
 8003148:	6563      	strge	r3, [r4, #84]	@ 0x54
 800314a:	81a3      	strhlt	r3, [r4, #12]
 800314c:	bd10      	pop	{r4, pc}

0800314e <__swrite>:
 800314e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003152:	461f      	mov	r7, r3
 8003154:	898b      	ldrh	r3, [r1, #12]
 8003156:	05db      	lsls	r3, r3, #23
 8003158:	4605      	mov	r5, r0
 800315a:	460c      	mov	r4, r1
 800315c:	4616      	mov	r6, r2
 800315e:	d505      	bpl.n	800316c <__swrite+0x1e>
 8003160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003164:	2302      	movs	r3, #2
 8003166:	2200      	movs	r2, #0
 8003168:	f000 f8ae 	bl	80032c8 <_lseek_r>
 800316c:	89a3      	ldrh	r3, [r4, #12]
 800316e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003176:	81a3      	strh	r3, [r4, #12]
 8003178:	4632      	mov	r2, r6
 800317a:	463b      	mov	r3, r7
 800317c:	4628      	mov	r0, r5
 800317e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003182:	f000 b8c5 	b.w	8003310 <_write_r>

08003186 <__sseek>:
 8003186:	b510      	push	{r4, lr}
 8003188:	460c      	mov	r4, r1
 800318a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800318e:	f000 f89b 	bl	80032c8 <_lseek_r>
 8003192:	1c43      	adds	r3, r0, #1
 8003194:	89a3      	ldrh	r3, [r4, #12]
 8003196:	bf15      	itete	ne
 8003198:	6560      	strne	r0, [r4, #84]	@ 0x54
 800319a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800319e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80031a2:	81a3      	strheq	r3, [r4, #12]
 80031a4:	bf18      	it	ne
 80031a6:	81a3      	strhne	r3, [r4, #12]
 80031a8:	bd10      	pop	{r4, pc}

080031aa <__sclose>:
 80031aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ae:	f000 b87b 	b.w	80032a8 <_close_r>

080031b2 <memset>:
 80031b2:	4402      	add	r2, r0
 80031b4:	4603      	mov	r3, r0
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d100      	bne.n	80031bc <memset+0xa>
 80031ba:	4770      	bx	lr
 80031bc:	f803 1b01 	strb.w	r1, [r3], #1
 80031c0:	e7f9      	b.n	80031b6 <memset+0x4>
	...

080031c4 <strtok>:
 80031c4:	4b16      	ldr	r3, [pc, #88]	@ (8003220 <strtok+0x5c>)
 80031c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ca:	681f      	ldr	r7, [r3, #0]
 80031cc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80031ce:	4605      	mov	r5, r0
 80031d0:	460e      	mov	r6, r1
 80031d2:	b9ec      	cbnz	r4, 8003210 <strtok+0x4c>
 80031d4:	2050      	movs	r0, #80	@ 0x50
 80031d6:	f000 f94b 	bl	8003470 <malloc>
 80031da:	4602      	mov	r2, r0
 80031dc:	6478      	str	r0, [r7, #68]	@ 0x44
 80031de:	b920      	cbnz	r0, 80031ea <strtok+0x26>
 80031e0:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <strtok+0x60>)
 80031e2:	4811      	ldr	r0, [pc, #68]	@ (8003228 <strtok+0x64>)
 80031e4:	215b      	movs	r1, #91	@ 0x5b
 80031e6:	f000 f8db 	bl	80033a0 <__assert_func>
 80031ea:	e9c0 4400 	strd	r4, r4, [r0]
 80031ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80031f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80031f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80031fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80031fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8003202:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8003206:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800320a:	6184      	str	r4, [r0, #24]
 800320c:	7704      	strb	r4, [r0, #28]
 800320e:	6244      	str	r4, [r0, #36]	@ 0x24
 8003210:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003212:	4631      	mov	r1, r6
 8003214:	4628      	mov	r0, r5
 8003216:	2301      	movs	r3, #1
 8003218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800321c:	f000 b806 	b.w	800322c <__strtok_r>
 8003220:	20000018 	.word	0x20000018
 8003224:	080043ac 	.word	0x080043ac
 8003228:	080043c3 	.word	0x080043c3

0800322c <__strtok_r>:
 800322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322e:	4604      	mov	r4, r0
 8003230:	b908      	cbnz	r0, 8003236 <__strtok_r+0xa>
 8003232:	6814      	ldr	r4, [r2, #0]
 8003234:	b144      	cbz	r4, 8003248 <__strtok_r+0x1c>
 8003236:	4620      	mov	r0, r4
 8003238:	f814 5b01 	ldrb.w	r5, [r4], #1
 800323c:	460f      	mov	r7, r1
 800323e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003242:	b91e      	cbnz	r6, 800324c <__strtok_r+0x20>
 8003244:	b965      	cbnz	r5, 8003260 <__strtok_r+0x34>
 8003246:	6015      	str	r5, [r2, #0]
 8003248:	2000      	movs	r0, #0
 800324a:	e005      	b.n	8003258 <__strtok_r+0x2c>
 800324c:	42b5      	cmp	r5, r6
 800324e:	d1f6      	bne.n	800323e <__strtok_r+0x12>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f0      	bne.n	8003236 <__strtok_r+0xa>
 8003254:	6014      	str	r4, [r2, #0]
 8003256:	7003      	strb	r3, [r0, #0]
 8003258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800325a:	461c      	mov	r4, r3
 800325c:	e00c      	b.n	8003278 <__strtok_r+0x4c>
 800325e:	b91d      	cbnz	r5, 8003268 <__strtok_r+0x3c>
 8003260:	4627      	mov	r7, r4
 8003262:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003266:	460e      	mov	r6, r1
 8003268:	f816 5b01 	ldrb.w	r5, [r6], #1
 800326c:	42ab      	cmp	r3, r5
 800326e:	d1f6      	bne.n	800325e <__strtok_r+0x32>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f2      	beq.n	800325a <__strtok_r+0x2e>
 8003274:	2300      	movs	r3, #0
 8003276:	703b      	strb	r3, [r7, #0]
 8003278:	6014      	str	r4, [r2, #0]
 800327a:	e7ed      	b.n	8003258 <__strtok_r+0x2c>

0800327c <strstr>:
 800327c:	780a      	ldrb	r2, [r1, #0]
 800327e:	b570      	push	{r4, r5, r6, lr}
 8003280:	b96a      	cbnz	r2, 800329e <strstr+0x22>
 8003282:	bd70      	pop	{r4, r5, r6, pc}
 8003284:	429a      	cmp	r2, r3
 8003286:	d109      	bne.n	800329c <strstr+0x20>
 8003288:	460c      	mov	r4, r1
 800328a:	4605      	mov	r5, r0
 800328c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f6      	beq.n	8003282 <strstr+0x6>
 8003294:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003298:	429e      	cmp	r6, r3
 800329a:	d0f7      	beq.n	800328c <strstr+0x10>
 800329c:	3001      	adds	r0, #1
 800329e:	7803      	ldrb	r3, [r0, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1ef      	bne.n	8003284 <strstr+0x8>
 80032a4:	4618      	mov	r0, r3
 80032a6:	e7ec      	b.n	8003282 <strstr+0x6>

080032a8 <_close_r>:
 80032a8:	b538      	push	{r3, r4, r5, lr}
 80032aa:	4d06      	ldr	r5, [pc, #24]	@ (80032c4 <_close_r+0x1c>)
 80032ac:	2300      	movs	r3, #0
 80032ae:	4604      	mov	r4, r0
 80032b0:	4608      	mov	r0, r1
 80032b2:	602b      	str	r3, [r5, #0]
 80032b4:	f7fd fd35 	bl	8000d22 <_close>
 80032b8:	1c43      	adds	r3, r0, #1
 80032ba:	d102      	bne.n	80032c2 <_close_r+0x1a>
 80032bc:	682b      	ldr	r3, [r5, #0]
 80032be:	b103      	cbz	r3, 80032c2 <_close_r+0x1a>
 80032c0:	6023      	str	r3, [r4, #0]
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
 80032c4:	20000290 	.word	0x20000290

080032c8 <_lseek_r>:
 80032c8:	b538      	push	{r3, r4, r5, lr}
 80032ca:	4d07      	ldr	r5, [pc, #28]	@ (80032e8 <_lseek_r+0x20>)
 80032cc:	4604      	mov	r4, r0
 80032ce:	4608      	mov	r0, r1
 80032d0:	4611      	mov	r1, r2
 80032d2:	2200      	movs	r2, #0
 80032d4:	602a      	str	r2, [r5, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f7fd fd4a 	bl	8000d70 <_lseek>
 80032dc:	1c43      	adds	r3, r0, #1
 80032de:	d102      	bne.n	80032e6 <_lseek_r+0x1e>
 80032e0:	682b      	ldr	r3, [r5, #0]
 80032e2:	b103      	cbz	r3, 80032e6 <_lseek_r+0x1e>
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	bd38      	pop	{r3, r4, r5, pc}
 80032e8:	20000290 	.word	0x20000290

080032ec <_read_r>:
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4d07      	ldr	r5, [pc, #28]	@ (800330c <_read_r+0x20>)
 80032f0:	4604      	mov	r4, r0
 80032f2:	4608      	mov	r0, r1
 80032f4:	4611      	mov	r1, r2
 80032f6:	2200      	movs	r2, #0
 80032f8:	602a      	str	r2, [r5, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f7fd fcd8 	bl	8000cb0 <_read>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	d102      	bne.n	800330a <_read_r+0x1e>
 8003304:	682b      	ldr	r3, [r5, #0]
 8003306:	b103      	cbz	r3, 800330a <_read_r+0x1e>
 8003308:	6023      	str	r3, [r4, #0]
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	20000290 	.word	0x20000290

08003310 <_write_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4d07      	ldr	r5, [pc, #28]	@ (8003330 <_write_r+0x20>)
 8003314:	4604      	mov	r4, r0
 8003316:	4608      	mov	r0, r1
 8003318:	4611      	mov	r1, r2
 800331a:	2200      	movs	r2, #0
 800331c:	602a      	str	r2, [r5, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	f7fd fce3 	bl	8000cea <_write>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d102      	bne.n	800332e <_write_r+0x1e>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	b103      	cbz	r3, 800332e <_write_r+0x1e>
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	20000290 	.word	0x20000290

08003334 <__errno>:
 8003334:	4b01      	ldr	r3, [pc, #4]	@ (800333c <__errno+0x8>)
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000018 	.word	0x20000018

08003340 <__libc_init_array>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	4d0d      	ldr	r5, [pc, #52]	@ (8003378 <__libc_init_array+0x38>)
 8003344:	4c0d      	ldr	r4, [pc, #52]	@ (800337c <__libc_init_array+0x3c>)
 8003346:	1b64      	subs	r4, r4, r5
 8003348:	10a4      	asrs	r4, r4, #2
 800334a:	2600      	movs	r6, #0
 800334c:	42a6      	cmp	r6, r4
 800334e:	d109      	bne.n	8003364 <__libc_init_array+0x24>
 8003350:	4d0b      	ldr	r5, [pc, #44]	@ (8003380 <__libc_init_array+0x40>)
 8003352:	4c0c      	ldr	r4, [pc, #48]	@ (8003384 <__libc_init_array+0x44>)
 8003354:	f000 fff6 	bl	8004344 <_init>
 8003358:	1b64      	subs	r4, r4, r5
 800335a:	10a4      	asrs	r4, r4, #2
 800335c:	2600      	movs	r6, #0
 800335e:	42a6      	cmp	r6, r4
 8003360:	d105      	bne.n	800336e <__libc_init_array+0x2e>
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	f855 3b04 	ldr.w	r3, [r5], #4
 8003368:	4798      	blx	r3
 800336a:	3601      	adds	r6, #1
 800336c:	e7ee      	b.n	800334c <__libc_init_array+0xc>
 800336e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003372:	4798      	blx	r3
 8003374:	3601      	adds	r6, #1
 8003376:	e7f2      	b.n	800335e <__libc_init_array+0x1e>
 8003378:	08004494 	.word	0x08004494
 800337c:	08004494 	.word	0x08004494
 8003380:	08004494 	.word	0x08004494
 8003384:	08004498 	.word	0x08004498

08003388 <__retarget_lock_init_recursive>:
 8003388:	4770      	bx	lr

0800338a <__retarget_lock_acquire_recursive>:
 800338a:	4770      	bx	lr

0800338c <__retarget_lock_release_recursive>:
 800338c:	4770      	bx	lr

0800338e <strcpy>:
 800338e:	4603      	mov	r3, r0
 8003390:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003394:	f803 2b01 	strb.w	r2, [r3], #1
 8003398:	2a00      	cmp	r2, #0
 800339a:	d1f9      	bne.n	8003390 <strcpy+0x2>
 800339c:	4770      	bx	lr
	...

080033a0 <__assert_func>:
 80033a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033a2:	4614      	mov	r4, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4b09      	ldr	r3, [pc, #36]	@ (80033cc <__assert_func+0x2c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4605      	mov	r5, r0
 80033ac:	68d8      	ldr	r0, [r3, #12]
 80033ae:	b14c      	cbz	r4, 80033c4 <__assert_func+0x24>
 80033b0:	4b07      	ldr	r3, [pc, #28]	@ (80033d0 <__assert_func+0x30>)
 80033b2:	9100      	str	r1, [sp, #0]
 80033b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80033b8:	4906      	ldr	r1, [pc, #24]	@ (80033d4 <__assert_func+0x34>)
 80033ba:	462b      	mov	r3, r5
 80033bc:	f000 fc9e 	bl	8003cfc <fiprintf>
 80033c0:	f000 fce6 	bl	8003d90 <abort>
 80033c4:	4b04      	ldr	r3, [pc, #16]	@ (80033d8 <__assert_func+0x38>)
 80033c6:	461c      	mov	r4, r3
 80033c8:	e7f3      	b.n	80033b2 <__assert_func+0x12>
 80033ca:	bf00      	nop
 80033cc:	20000018 	.word	0x20000018
 80033d0:	0800441d 	.word	0x0800441d
 80033d4:	0800442a 	.word	0x0800442a
 80033d8:	08004458 	.word	0x08004458

080033dc <_free_r>:
 80033dc:	b538      	push	{r3, r4, r5, lr}
 80033de:	4605      	mov	r5, r0
 80033e0:	2900      	cmp	r1, #0
 80033e2:	d041      	beq.n	8003468 <_free_r+0x8c>
 80033e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033e8:	1f0c      	subs	r4, r1, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bfb8      	it	lt
 80033ee:	18e4      	addlt	r4, r4, r3
 80033f0:	f000 f8e8 	bl	80035c4 <__malloc_lock>
 80033f4:	4a1d      	ldr	r2, [pc, #116]	@ (800346c <_free_r+0x90>)
 80033f6:	6813      	ldr	r3, [r2, #0]
 80033f8:	b933      	cbnz	r3, 8003408 <_free_r+0x2c>
 80033fa:	6063      	str	r3, [r4, #4]
 80033fc:	6014      	str	r4, [r2, #0]
 80033fe:	4628      	mov	r0, r5
 8003400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003404:	f000 b8e4 	b.w	80035d0 <__malloc_unlock>
 8003408:	42a3      	cmp	r3, r4
 800340a:	d908      	bls.n	800341e <_free_r+0x42>
 800340c:	6820      	ldr	r0, [r4, #0]
 800340e:	1821      	adds	r1, r4, r0
 8003410:	428b      	cmp	r3, r1
 8003412:	bf01      	itttt	eq
 8003414:	6819      	ldreq	r1, [r3, #0]
 8003416:	685b      	ldreq	r3, [r3, #4]
 8003418:	1809      	addeq	r1, r1, r0
 800341a:	6021      	streq	r1, [r4, #0]
 800341c:	e7ed      	b.n	80033fa <_free_r+0x1e>
 800341e:	461a      	mov	r2, r3
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	b10b      	cbz	r3, 8003428 <_free_r+0x4c>
 8003424:	42a3      	cmp	r3, r4
 8003426:	d9fa      	bls.n	800341e <_free_r+0x42>
 8003428:	6811      	ldr	r1, [r2, #0]
 800342a:	1850      	adds	r0, r2, r1
 800342c:	42a0      	cmp	r0, r4
 800342e:	d10b      	bne.n	8003448 <_free_r+0x6c>
 8003430:	6820      	ldr	r0, [r4, #0]
 8003432:	4401      	add	r1, r0
 8003434:	1850      	adds	r0, r2, r1
 8003436:	4283      	cmp	r3, r0
 8003438:	6011      	str	r1, [r2, #0]
 800343a:	d1e0      	bne.n	80033fe <_free_r+0x22>
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	6053      	str	r3, [r2, #4]
 8003442:	4408      	add	r0, r1
 8003444:	6010      	str	r0, [r2, #0]
 8003446:	e7da      	b.n	80033fe <_free_r+0x22>
 8003448:	d902      	bls.n	8003450 <_free_r+0x74>
 800344a:	230c      	movs	r3, #12
 800344c:	602b      	str	r3, [r5, #0]
 800344e:	e7d6      	b.n	80033fe <_free_r+0x22>
 8003450:	6820      	ldr	r0, [r4, #0]
 8003452:	1821      	adds	r1, r4, r0
 8003454:	428b      	cmp	r3, r1
 8003456:	bf04      	itt	eq
 8003458:	6819      	ldreq	r1, [r3, #0]
 800345a:	685b      	ldreq	r3, [r3, #4]
 800345c:	6063      	str	r3, [r4, #4]
 800345e:	bf04      	itt	eq
 8003460:	1809      	addeq	r1, r1, r0
 8003462:	6021      	streq	r1, [r4, #0]
 8003464:	6054      	str	r4, [r2, #4]
 8003466:	e7ca      	b.n	80033fe <_free_r+0x22>
 8003468:	bd38      	pop	{r3, r4, r5, pc}
 800346a:	bf00      	nop
 800346c:	2000029c 	.word	0x2000029c

08003470 <malloc>:
 8003470:	4b02      	ldr	r3, [pc, #8]	@ (800347c <malloc+0xc>)
 8003472:	4601      	mov	r1, r0
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	f000 b825 	b.w	80034c4 <_malloc_r>
 800347a:	bf00      	nop
 800347c:	20000018 	.word	0x20000018

08003480 <sbrk_aligned>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	4e0f      	ldr	r6, [pc, #60]	@ (80034c0 <sbrk_aligned+0x40>)
 8003484:	460c      	mov	r4, r1
 8003486:	6831      	ldr	r1, [r6, #0]
 8003488:	4605      	mov	r5, r0
 800348a:	b911      	cbnz	r1, 8003492 <sbrk_aligned+0x12>
 800348c:	f000 fc62 	bl	8003d54 <_sbrk_r>
 8003490:	6030      	str	r0, [r6, #0]
 8003492:	4621      	mov	r1, r4
 8003494:	4628      	mov	r0, r5
 8003496:	f000 fc5d 	bl	8003d54 <_sbrk_r>
 800349a:	1c43      	adds	r3, r0, #1
 800349c:	d103      	bne.n	80034a6 <sbrk_aligned+0x26>
 800349e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80034a2:	4620      	mov	r0, r4
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
 80034a6:	1cc4      	adds	r4, r0, #3
 80034a8:	f024 0403 	bic.w	r4, r4, #3
 80034ac:	42a0      	cmp	r0, r4
 80034ae:	d0f8      	beq.n	80034a2 <sbrk_aligned+0x22>
 80034b0:	1a21      	subs	r1, r4, r0
 80034b2:	4628      	mov	r0, r5
 80034b4:	f000 fc4e 	bl	8003d54 <_sbrk_r>
 80034b8:	3001      	adds	r0, #1
 80034ba:	d1f2      	bne.n	80034a2 <sbrk_aligned+0x22>
 80034bc:	e7ef      	b.n	800349e <sbrk_aligned+0x1e>
 80034be:	bf00      	nop
 80034c0:	20000298 	.word	0x20000298

080034c4 <_malloc_r>:
 80034c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034c8:	1ccd      	adds	r5, r1, #3
 80034ca:	f025 0503 	bic.w	r5, r5, #3
 80034ce:	3508      	adds	r5, #8
 80034d0:	2d0c      	cmp	r5, #12
 80034d2:	bf38      	it	cc
 80034d4:	250c      	movcc	r5, #12
 80034d6:	2d00      	cmp	r5, #0
 80034d8:	4606      	mov	r6, r0
 80034da:	db01      	blt.n	80034e0 <_malloc_r+0x1c>
 80034dc:	42a9      	cmp	r1, r5
 80034de:	d904      	bls.n	80034ea <_malloc_r+0x26>
 80034e0:	230c      	movs	r3, #12
 80034e2:	6033      	str	r3, [r6, #0]
 80034e4:	2000      	movs	r0, #0
 80034e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035c0 <_malloc_r+0xfc>
 80034ee:	f000 f869 	bl	80035c4 <__malloc_lock>
 80034f2:	f8d8 3000 	ldr.w	r3, [r8]
 80034f6:	461c      	mov	r4, r3
 80034f8:	bb44      	cbnz	r4, 800354c <_malloc_r+0x88>
 80034fa:	4629      	mov	r1, r5
 80034fc:	4630      	mov	r0, r6
 80034fe:	f7ff ffbf 	bl	8003480 <sbrk_aligned>
 8003502:	1c43      	adds	r3, r0, #1
 8003504:	4604      	mov	r4, r0
 8003506:	d158      	bne.n	80035ba <_malloc_r+0xf6>
 8003508:	f8d8 4000 	ldr.w	r4, [r8]
 800350c:	4627      	mov	r7, r4
 800350e:	2f00      	cmp	r7, #0
 8003510:	d143      	bne.n	800359a <_malloc_r+0xd6>
 8003512:	2c00      	cmp	r4, #0
 8003514:	d04b      	beq.n	80035ae <_malloc_r+0xea>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	4639      	mov	r1, r7
 800351a:	4630      	mov	r0, r6
 800351c:	eb04 0903 	add.w	r9, r4, r3
 8003520:	f000 fc18 	bl	8003d54 <_sbrk_r>
 8003524:	4581      	cmp	r9, r0
 8003526:	d142      	bne.n	80035ae <_malloc_r+0xea>
 8003528:	6821      	ldr	r1, [r4, #0]
 800352a:	1a6d      	subs	r5, r5, r1
 800352c:	4629      	mov	r1, r5
 800352e:	4630      	mov	r0, r6
 8003530:	f7ff ffa6 	bl	8003480 <sbrk_aligned>
 8003534:	3001      	adds	r0, #1
 8003536:	d03a      	beq.n	80035ae <_malloc_r+0xea>
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	442b      	add	r3, r5
 800353c:	6023      	str	r3, [r4, #0]
 800353e:	f8d8 3000 	ldr.w	r3, [r8]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	bb62      	cbnz	r2, 80035a0 <_malloc_r+0xdc>
 8003546:	f8c8 7000 	str.w	r7, [r8]
 800354a:	e00f      	b.n	800356c <_malloc_r+0xa8>
 800354c:	6822      	ldr	r2, [r4, #0]
 800354e:	1b52      	subs	r2, r2, r5
 8003550:	d420      	bmi.n	8003594 <_malloc_r+0xd0>
 8003552:	2a0b      	cmp	r2, #11
 8003554:	d917      	bls.n	8003586 <_malloc_r+0xc2>
 8003556:	1961      	adds	r1, r4, r5
 8003558:	42a3      	cmp	r3, r4
 800355a:	6025      	str	r5, [r4, #0]
 800355c:	bf18      	it	ne
 800355e:	6059      	strne	r1, [r3, #4]
 8003560:	6863      	ldr	r3, [r4, #4]
 8003562:	bf08      	it	eq
 8003564:	f8c8 1000 	streq.w	r1, [r8]
 8003568:	5162      	str	r2, [r4, r5]
 800356a:	604b      	str	r3, [r1, #4]
 800356c:	4630      	mov	r0, r6
 800356e:	f000 f82f 	bl	80035d0 <__malloc_unlock>
 8003572:	f104 000b 	add.w	r0, r4, #11
 8003576:	1d23      	adds	r3, r4, #4
 8003578:	f020 0007 	bic.w	r0, r0, #7
 800357c:	1ac2      	subs	r2, r0, r3
 800357e:	bf1c      	itt	ne
 8003580:	1a1b      	subne	r3, r3, r0
 8003582:	50a3      	strne	r3, [r4, r2]
 8003584:	e7af      	b.n	80034e6 <_malloc_r+0x22>
 8003586:	6862      	ldr	r2, [r4, #4]
 8003588:	42a3      	cmp	r3, r4
 800358a:	bf0c      	ite	eq
 800358c:	f8c8 2000 	streq.w	r2, [r8]
 8003590:	605a      	strne	r2, [r3, #4]
 8003592:	e7eb      	b.n	800356c <_malloc_r+0xa8>
 8003594:	4623      	mov	r3, r4
 8003596:	6864      	ldr	r4, [r4, #4]
 8003598:	e7ae      	b.n	80034f8 <_malloc_r+0x34>
 800359a:	463c      	mov	r4, r7
 800359c:	687f      	ldr	r7, [r7, #4]
 800359e:	e7b6      	b.n	800350e <_malloc_r+0x4a>
 80035a0:	461a      	mov	r2, r3
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	42a3      	cmp	r3, r4
 80035a6:	d1fb      	bne.n	80035a0 <_malloc_r+0xdc>
 80035a8:	2300      	movs	r3, #0
 80035aa:	6053      	str	r3, [r2, #4]
 80035ac:	e7de      	b.n	800356c <_malloc_r+0xa8>
 80035ae:	230c      	movs	r3, #12
 80035b0:	6033      	str	r3, [r6, #0]
 80035b2:	4630      	mov	r0, r6
 80035b4:	f000 f80c 	bl	80035d0 <__malloc_unlock>
 80035b8:	e794      	b.n	80034e4 <_malloc_r+0x20>
 80035ba:	6005      	str	r5, [r0, #0]
 80035bc:	e7d6      	b.n	800356c <_malloc_r+0xa8>
 80035be:	bf00      	nop
 80035c0:	2000029c 	.word	0x2000029c

080035c4 <__malloc_lock>:
 80035c4:	4801      	ldr	r0, [pc, #4]	@ (80035cc <__malloc_lock+0x8>)
 80035c6:	f7ff bee0 	b.w	800338a <__retarget_lock_acquire_recursive>
 80035ca:	bf00      	nop
 80035cc:	20000294 	.word	0x20000294

080035d0 <__malloc_unlock>:
 80035d0:	4801      	ldr	r0, [pc, #4]	@ (80035d8 <__malloc_unlock+0x8>)
 80035d2:	f7ff bedb 	b.w	800338c <__retarget_lock_release_recursive>
 80035d6:	bf00      	nop
 80035d8:	20000294 	.word	0x20000294

080035dc <__ssputs_r>:
 80035dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e0:	688e      	ldr	r6, [r1, #8]
 80035e2:	461f      	mov	r7, r3
 80035e4:	42be      	cmp	r6, r7
 80035e6:	680b      	ldr	r3, [r1, #0]
 80035e8:	4682      	mov	sl, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	4690      	mov	r8, r2
 80035ee:	d82d      	bhi.n	800364c <__ssputs_r+0x70>
 80035f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80035f8:	d026      	beq.n	8003648 <__ssputs_r+0x6c>
 80035fa:	6965      	ldr	r5, [r4, #20]
 80035fc:	6909      	ldr	r1, [r1, #16]
 80035fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003602:	eba3 0901 	sub.w	r9, r3, r1
 8003606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800360a:	1c7b      	adds	r3, r7, #1
 800360c:	444b      	add	r3, r9
 800360e:	106d      	asrs	r5, r5, #1
 8003610:	429d      	cmp	r5, r3
 8003612:	bf38      	it	cc
 8003614:	461d      	movcc	r5, r3
 8003616:	0553      	lsls	r3, r2, #21
 8003618:	d527      	bpl.n	800366a <__ssputs_r+0x8e>
 800361a:	4629      	mov	r1, r5
 800361c:	f7ff ff52 	bl	80034c4 <_malloc_r>
 8003620:	4606      	mov	r6, r0
 8003622:	b360      	cbz	r0, 800367e <__ssputs_r+0xa2>
 8003624:	6921      	ldr	r1, [r4, #16]
 8003626:	464a      	mov	r2, r9
 8003628:	f000 fba4 	bl	8003d74 <memcpy>
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003636:	81a3      	strh	r3, [r4, #12]
 8003638:	6126      	str	r6, [r4, #16]
 800363a:	6165      	str	r5, [r4, #20]
 800363c:	444e      	add	r6, r9
 800363e:	eba5 0509 	sub.w	r5, r5, r9
 8003642:	6026      	str	r6, [r4, #0]
 8003644:	60a5      	str	r5, [r4, #8]
 8003646:	463e      	mov	r6, r7
 8003648:	42be      	cmp	r6, r7
 800364a:	d900      	bls.n	800364e <__ssputs_r+0x72>
 800364c:	463e      	mov	r6, r7
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	4632      	mov	r2, r6
 8003652:	4641      	mov	r1, r8
 8003654:	f000 fb64 	bl	8003d20 <memmove>
 8003658:	68a3      	ldr	r3, [r4, #8]
 800365a:	1b9b      	subs	r3, r3, r6
 800365c:	60a3      	str	r3, [r4, #8]
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	4433      	add	r3, r6
 8003662:	6023      	str	r3, [r4, #0]
 8003664:	2000      	movs	r0, #0
 8003666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800366a:	462a      	mov	r2, r5
 800366c:	f000 fb97 	bl	8003d9e <_realloc_r>
 8003670:	4606      	mov	r6, r0
 8003672:	2800      	cmp	r0, #0
 8003674:	d1e0      	bne.n	8003638 <__ssputs_r+0x5c>
 8003676:	6921      	ldr	r1, [r4, #16]
 8003678:	4650      	mov	r0, sl
 800367a:	f7ff feaf 	bl	80033dc <_free_r>
 800367e:	230c      	movs	r3, #12
 8003680:	f8ca 3000 	str.w	r3, [sl]
 8003684:	89a3      	ldrh	r3, [r4, #12]
 8003686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800368a:	81a3      	strh	r3, [r4, #12]
 800368c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003690:	e7e9      	b.n	8003666 <__ssputs_r+0x8a>
	...

08003694 <_svfiprintf_r>:
 8003694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003698:	4698      	mov	r8, r3
 800369a:	898b      	ldrh	r3, [r1, #12]
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	b09d      	sub	sp, #116	@ 0x74
 80036a0:	4607      	mov	r7, r0
 80036a2:	460d      	mov	r5, r1
 80036a4:	4614      	mov	r4, r2
 80036a6:	d510      	bpl.n	80036ca <_svfiprintf_r+0x36>
 80036a8:	690b      	ldr	r3, [r1, #16]
 80036aa:	b973      	cbnz	r3, 80036ca <_svfiprintf_r+0x36>
 80036ac:	2140      	movs	r1, #64	@ 0x40
 80036ae:	f7ff ff09 	bl	80034c4 <_malloc_r>
 80036b2:	6028      	str	r0, [r5, #0]
 80036b4:	6128      	str	r0, [r5, #16]
 80036b6:	b930      	cbnz	r0, 80036c6 <_svfiprintf_r+0x32>
 80036b8:	230c      	movs	r3, #12
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036c0:	b01d      	add	sp, #116	@ 0x74
 80036c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c6:	2340      	movs	r3, #64	@ 0x40
 80036c8:	616b      	str	r3, [r5, #20]
 80036ca:	2300      	movs	r3, #0
 80036cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80036ce:	2320      	movs	r3, #32
 80036d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80036d8:	2330      	movs	r3, #48	@ 0x30
 80036da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003878 <_svfiprintf_r+0x1e4>
 80036de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036e2:	f04f 0901 	mov.w	r9, #1
 80036e6:	4623      	mov	r3, r4
 80036e8:	469a      	mov	sl, r3
 80036ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036ee:	b10a      	cbz	r2, 80036f4 <_svfiprintf_r+0x60>
 80036f0:	2a25      	cmp	r2, #37	@ 0x25
 80036f2:	d1f9      	bne.n	80036e8 <_svfiprintf_r+0x54>
 80036f4:	ebba 0b04 	subs.w	fp, sl, r4
 80036f8:	d00b      	beq.n	8003712 <_svfiprintf_r+0x7e>
 80036fa:	465b      	mov	r3, fp
 80036fc:	4622      	mov	r2, r4
 80036fe:	4629      	mov	r1, r5
 8003700:	4638      	mov	r0, r7
 8003702:	f7ff ff6b 	bl	80035dc <__ssputs_r>
 8003706:	3001      	adds	r0, #1
 8003708:	f000 80a7 	beq.w	800385a <_svfiprintf_r+0x1c6>
 800370c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800370e:	445a      	add	r2, fp
 8003710:	9209      	str	r2, [sp, #36]	@ 0x24
 8003712:	f89a 3000 	ldrb.w	r3, [sl]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 809f 	beq.w	800385a <_svfiprintf_r+0x1c6>
 800371c:	2300      	movs	r3, #0
 800371e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003726:	f10a 0a01 	add.w	sl, sl, #1
 800372a:	9304      	str	r3, [sp, #16]
 800372c:	9307      	str	r3, [sp, #28]
 800372e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003732:	931a      	str	r3, [sp, #104]	@ 0x68
 8003734:	4654      	mov	r4, sl
 8003736:	2205      	movs	r2, #5
 8003738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800373c:	484e      	ldr	r0, [pc, #312]	@ (8003878 <_svfiprintf_r+0x1e4>)
 800373e:	f7fc fd47 	bl	80001d0 <memchr>
 8003742:	9a04      	ldr	r2, [sp, #16]
 8003744:	b9d8      	cbnz	r0, 800377e <_svfiprintf_r+0xea>
 8003746:	06d0      	lsls	r0, r2, #27
 8003748:	bf44      	itt	mi
 800374a:	2320      	movmi	r3, #32
 800374c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003750:	0711      	lsls	r1, r2, #28
 8003752:	bf44      	itt	mi
 8003754:	232b      	movmi	r3, #43	@ 0x2b
 8003756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800375a:	f89a 3000 	ldrb.w	r3, [sl]
 800375e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003760:	d015      	beq.n	800378e <_svfiprintf_r+0xfa>
 8003762:	9a07      	ldr	r2, [sp, #28]
 8003764:	4654      	mov	r4, sl
 8003766:	2000      	movs	r0, #0
 8003768:	f04f 0c0a 	mov.w	ip, #10
 800376c:	4621      	mov	r1, r4
 800376e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003772:	3b30      	subs	r3, #48	@ 0x30
 8003774:	2b09      	cmp	r3, #9
 8003776:	d94b      	bls.n	8003810 <_svfiprintf_r+0x17c>
 8003778:	b1b0      	cbz	r0, 80037a8 <_svfiprintf_r+0x114>
 800377a:	9207      	str	r2, [sp, #28]
 800377c:	e014      	b.n	80037a8 <_svfiprintf_r+0x114>
 800377e:	eba0 0308 	sub.w	r3, r0, r8
 8003782:	fa09 f303 	lsl.w	r3, r9, r3
 8003786:	4313      	orrs	r3, r2
 8003788:	9304      	str	r3, [sp, #16]
 800378a:	46a2      	mov	sl, r4
 800378c:	e7d2      	b.n	8003734 <_svfiprintf_r+0xa0>
 800378e:	9b03      	ldr	r3, [sp, #12]
 8003790:	1d19      	adds	r1, r3, #4
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	9103      	str	r1, [sp, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	bfbb      	ittet	lt
 800379a:	425b      	neglt	r3, r3
 800379c:	f042 0202 	orrlt.w	r2, r2, #2
 80037a0:	9307      	strge	r3, [sp, #28]
 80037a2:	9307      	strlt	r3, [sp, #28]
 80037a4:	bfb8      	it	lt
 80037a6:	9204      	strlt	r2, [sp, #16]
 80037a8:	7823      	ldrb	r3, [r4, #0]
 80037aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80037ac:	d10a      	bne.n	80037c4 <_svfiprintf_r+0x130>
 80037ae:	7863      	ldrb	r3, [r4, #1]
 80037b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80037b2:	d132      	bne.n	800381a <_svfiprintf_r+0x186>
 80037b4:	9b03      	ldr	r3, [sp, #12]
 80037b6:	1d1a      	adds	r2, r3, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	9203      	str	r2, [sp, #12]
 80037bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037c0:	3402      	adds	r4, #2
 80037c2:	9305      	str	r3, [sp, #20]
 80037c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003888 <_svfiprintf_r+0x1f4>
 80037c8:	7821      	ldrb	r1, [r4, #0]
 80037ca:	2203      	movs	r2, #3
 80037cc:	4650      	mov	r0, sl
 80037ce:	f7fc fcff 	bl	80001d0 <memchr>
 80037d2:	b138      	cbz	r0, 80037e4 <_svfiprintf_r+0x150>
 80037d4:	9b04      	ldr	r3, [sp, #16]
 80037d6:	eba0 000a 	sub.w	r0, r0, sl
 80037da:	2240      	movs	r2, #64	@ 0x40
 80037dc:	4082      	lsls	r2, r0
 80037de:	4313      	orrs	r3, r2
 80037e0:	3401      	adds	r4, #1
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e8:	4824      	ldr	r0, [pc, #144]	@ (800387c <_svfiprintf_r+0x1e8>)
 80037ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037ee:	2206      	movs	r2, #6
 80037f0:	f7fc fcee 	bl	80001d0 <memchr>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d036      	beq.n	8003866 <_svfiprintf_r+0x1d2>
 80037f8:	4b21      	ldr	r3, [pc, #132]	@ (8003880 <_svfiprintf_r+0x1ec>)
 80037fa:	bb1b      	cbnz	r3, 8003844 <_svfiprintf_r+0x1b0>
 80037fc:	9b03      	ldr	r3, [sp, #12]
 80037fe:	3307      	adds	r3, #7
 8003800:	f023 0307 	bic.w	r3, r3, #7
 8003804:	3308      	adds	r3, #8
 8003806:	9303      	str	r3, [sp, #12]
 8003808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800380a:	4433      	add	r3, r6
 800380c:	9309      	str	r3, [sp, #36]	@ 0x24
 800380e:	e76a      	b.n	80036e6 <_svfiprintf_r+0x52>
 8003810:	fb0c 3202 	mla	r2, ip, r2, r3
 8003814:	460c      	mov	r4, r1
 8003816:	2001      	movs	r0, #1
 8003818:	e7a8      	b.n	800376c <_svfiprintf_r+0xd8>
 800381a:	2300      	movs	r3, #0
 800381c:	3401      	adds	r4, #1
 800381e:	9305      	str	r3, [sp, #20]
 8003820:	4619      	mov	r1, r3
 8003822:	f04f 0c0a 	mov.w	ip, #10
 8003826:	4620      	mov	r0, r4
 8003828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800382c:	3a30      	subs	r2, #48	@ 0x30
 800382e:	2a09      	cmp	r2, #9
 8003830:	d903      	bls.n	800383a <_svfiprintf_r+0x1a6>
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0c6      	beq.n	80037c4 <_svfiprintf_r+0x130>
 8003836:	9105      	str	r1, [sp, #20]
 8003838:	e7c4      	b.n	80037c4 <_svfiprintf_r+0x130>
 800383a:	fb0c 2101 	mla	r1, ip, r1, r2
 800383e:	4604      	mov	r4, r0
 8003840:	2301      	movs	r3, #1
 8003842:	e7f0      	b.n	8003826 <_svfiprintf_r+0x192>
 8003844:	ab03      	add	r3, sp, #12
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	462a      	mov	r2, r5
 800384a:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <_svfiprintf_r+0x1f0>)
 800384c:	a904      	add	r1, sp, #16
 800384e:	4638      	mov	r0, r7
 8003850:	f3af 8000 	nop.w
 8003854:	1c42      	adds	r2, r0, #1
 8003856:	4606      	mov	r6, r0
 8003858:	d1d6      	bne.n	8003808 <_svfiprintf_r+0x174>
 800385a:	89ab      	ldrh	r3, [r5, #12]
 800385c:	065b      	lsls	r3, r3, #25
 800385e:	f53f af2d 	bmi.w	80036bc <_svfiprintf_r+0x28>
 8003862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003864:	e72c      	b.n	80036c0 <_svfiprintf_r+0x2c>
 8003866:	ab03      	add	r3, sp, #12
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	462a      	mov	r2, r5
 800386c:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <_svfiprintf_r+0x1f0>)
 800386e:	a904      	add	r1, sp, #16
 8003870:	4638      	mov	r0, r7
 8003872:	f000 f879 	bl	8003968 <_printf_i>
 8003876:	e7ed      	b.n	8003854 <_svfiprintf_r+0x1c0>
 8003878:	08004459 	.word	0x08004459
 800387c:	08004463 	.word	0x08004463
 8003880:	00000000 	.word	0x00000000
 8003884:	080035dd 	.word	0x080035dd
 8003888:	0800445f 	.word	0x0800445f

0800388c <_printf_common>:
 800388c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003890:	4616      	mov	r6, r2
 8003892:	4698      	mov	r8, r3
 8003894:	688a      	ldr	r2, [r1, #8]
 8003896:	690b      	ldr	r3, [r1, #16]
 8003898:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800389c:	4293      	cmp	r3, r2
 800389e:	bfb8      	it	lt
 80038a0:	4613      	movlt	r3, r2
 80038a2:	6033      	str	r3, [r6, #0]
 80038a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038a8:	4607      	mov	r7, r0
 80038aa:	460c      	mov	r4, r1
 80038ac:	b10a      	cbz	r2, 80038b2 <_printf_common+0x26>
 80038ae:	3301      	adds	r3, #1
 80038b0:	6033      	str	r3, [r6, #0]
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	0699      	lsls	r1, r3, #26
 80038b6:	bf42      	ittt	mi
 80038b8:	6833      	ldrmi	r3, [r6, #0]
 80038ba:	3302      	addmi	r3, #2
 80038bc:	6033      	strmi	r3, [r6, #0]
 80038be:	6825      	ldr	r5, [r4, #0]
 80038c0:	f015 0506 	ands.w	r5, r5, #6
 80038c4:	d106      	bne.n	80038d4 <_printf_common+0x48>
 80038c6:	f104 0a19 	add.w	sl, r4, #25
 80038ca:	68e3      	ldr	r3, [r4, #12]
 80038cc:	6832      	ldr	r2, [r6, #0]
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	42ab      	cmp	r3, r5
 80038d2:	dc26      	bgt.n	8003922 <_printf_common+0x96>
 80038d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038d8:	6822      	ldr	r2, [r4, #0]
 80038da:	3b00      	subs	r3, #0
 80038dc:	bf18      	it	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	0692      	lsls	r2, r2, #26
 80038e2:	d42b      	bmi.n	800393c <_printf_common+0xb0>
 80038e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038e8:	4641      	mov	r1, r8
 80038ea:	4638      	mov	r0, r7
 80038ec:	47c8      	blx	r9
 80038ee:	3001      	adds	r0, #1
 80038f0:	d01e      	beq.n	8003930 <_printf_common+0xa4>
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	6922      	ldr	r2, [r4, #16]
 80038f6:	f003 0306 	and.w	r3, r3, #6
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	bf02      	ittt	eq
 80038fe:	68e5      	ldreq	r5, [r4, #12]
 8003900:	6833      	ldreq	r3, [r6, #0]
 8003902:	1aed      	subeq	r5, r5, r3
 8003904:	68a3      	ldr	r3, [r4, #8]
 8003906:	bf0c      	ite	eq
 8003908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800390c:	2500      	movne	r5, #0
 800390e:	4293      	cmp	r3, r2
 8003910:	bfc4      	itt	gt
 8003912:	1a9b      	subgt	r3, r3, r2
 8003914:	18ed      	addgt	r5, r5, r3
 8003916:	2600      	movs	r6, #0
 8003918:	341a      	adds	r4, #26
 800391a:	42b5      	cmp	r5, r6
 800391c:	d11a      	bne.n	8003954 <_printf_common+0xc8>
 800391e:	2000      	movs	r0, #0
 8003920:	e008      	b.n	8003934 <_printf_common+0xa8>
 8003922:	2301      	movs	r3, #1
 8003924:	4652      	mov	r2, sl
 8003926:	4641      	mov	r1, r8
 8003928:	4638      	mov	r0, r7
 800392a:	47c8      	blx	r9
 800392c:	3001      	adds	r0, #1
 800392e:	d103      	bne.n	8003938 <_printf_common+0xac>
 8003930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003938:	3501      	adds	r5, #1
 800393a:	e7c6      	b.n	80038ca <_printf_common+0x3e>
 800393c:	18e1      	adds	r1, r4, r3
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	2030      	movs	r0, #48	@ 0x30
 8003942:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003946:	4422      	add	r2, r4
 8003948:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800394c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003950:	3302      	adds	r3, #2
 8003952:	e7c7      	b.n	80038e4 <_printf_common+0x58>
 8003954:	2301      	movs	r3, #1
 8003956:	4622      	mov	r2, r4
 8003958:	4641      	mov	r1, r8
 800395a:	4638      	mov	r0, r7
 800395c:	47c8      	blx	r9
 800395e:	3001      	adds	r0, #1
 8003960:	d0e6      	beq.n	8003930 <_printf_common+0xa4>
 8003962:	3601      	adds	r6, #1
 8003964:	e7d9      	b.n	800391a <_printf_common+0x8e>
	...

08003968 <_printf_i>:
 8003968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800396c:	7e0f      	ldrb	r7, [r1, #24]
 800396e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003970:	2f78      	cmp	r7, #120	@ 0x78
 8003972:	4691      	mov	r9, r2
 8003974:	4680      	mov	r8, r0
 8003976:	460c      	mov	r4, r1
 8003978:	469a      	mov	sl, r3
 800397a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800397e:	d807      	bhi.n	8003990 <_printf_i+0x28>
 8003980:	2f62      	cmp	r7, #98	@ 0x62
 8003982:	d80a      	bhi.n	800399a <_printf_i+0x32>
 8003984:	2f00      	cmp	r7, #0
 8003986:	f000 80d1 	beq.w	8003b2c <_printf_i+0x1c4>
 800398a:	2f58      	cmp	r7, #88	@ 0x58
 800398c:	f000 80b8 	beq.w	8003b00 <_printf_i+0x198>
 8003990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003994:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003998:	e03a      	b.n	8003a10 <_printf_i+0xa8>
 800399a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800399e:	2b15      	cmp	r3, #21
 80039a0:	d8f6      	bhi.n	8003990 <_printf_i+0x28>
 80039a2:	a101      	add	r1, pc, #4	@ (adr r1, 80039a8 <_printf_i+0x40>)
 80039a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039a8:	08003a01 	.word	0x08003a01
 80039ac:	08003a15 	.word	0x08003a15
 80039b0:	08003991 	.word	0x08003991
 80039b4:	08003991 	.word	0x08003991
 80039b8:	08003991 	.word	0x08003991
 80039bc:	08003991 	.word	0x08003991
 80039c0:	08003a15 	.word	0x08003a15
 80039c4:	08003991 	.word	0x08003991
 80039c8:	08003991 	.word	0x08003991
 80039cc:	08003991 	.word	0x08003991
 80039d0:	08003991 	.word	0x08003991
 80039d4:	08003b13 	.word	0x08003b13
 80039d8:	08003a3f 	.word	0x08003a3f
 80039dc:	08003acd 	.word	0x08003acd
 80039e0:	08003991 	.word	0x08003991
 80039e4:	08003991 	.word	0x08003991
 80039e8:	08003b35 	.word	0x08003b35
 80039ec:	08003991 	.word	0x08003991
 80039f0:	08003a3f 	.word	0x08003a3f
 80039f4:	08003991 	.word	0x08003991
 80039f8:	08003991 	.word	0x08003991
 80039fc:	08003ad5 	.word	0x08003ad5
 8003a00:	6833      	ldr	r3, [r6, #0]
 8003a02:	1d1a      	adds	r2, r3, #4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6032      	str	r2, [r6, #0]
 8003a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a10:	2301      	movs	r3, #1
 8003a12:	e09c      	b.n	8003b4e <_printf_i+0x1e6>
 8003a14:	6833      	ldr	r3, [r6, #0]
 8003a16:	6820      	ldr	r0, [r4, #0]
 8003a18:	1d19      	adds	r1, r3, #4
 8003a1a:	6031      	str	r1, [r6, #0]
 8003a1c:	0606      	lsls	r6, r0, #24
 8003a1e:	d501      	bpl.n	8003a24 <_printf_i+0xbc>
 8003a20:	681d      	ldr	r5, [r3, #0]
 8003a22:	e003      	b.n	8003a2c <_printf_i+0xc4>
 8003a24:	0645      	lsls	r5, r0, #25
 8003a26:	d5fb      	bpl.n	8003a20 <_printf_i+0xb8>
 8003a28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a2c:	2d00      	cmp	r5, #0
 8003a2e:	da03      	bge.n	8003a38 <_printf_i+0xd0>
 8003a30:	232d      	movs	r3, #45	@ 0x2d
 8003a32:	426d      	negs	r5, r5
 8003a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a38:	4858      	ldr	r0, [pc, #352]	@ (8003b9c <_printf_i+0x234>)
 8003a3a:	230a      	movs	r3, #10
 8003a3c:	e011      	b.n	8003a62 <_printf_i+0xfa>
 8003a3e:	6821      	ldr	r1, [r4, #0]
 8003a40:	6833      	ldr	r3, [r6, #0]
 8003a42:	0608      	lsls	r0, r1, #24
 8003a44:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a48:	d402      	bmi.n	8003a50 <_printf_i+0xe8>
 8003a4a:	0649      	lsls	r1, r1, #25
 8003a4c:	bf48      	it	mi
 8003a4e:	b2ad      	uxthmi	r5, r5
 8003a50:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a52:	4852      	ldr	r0, [pc, #328]	@ (8003b9c <_printf_i+0x234>)
 8003a54:	6033      	str	r3, [r6, #0]
 8003a56:	bf14      	ite	ne
 8003a58:	230a      	movne	r3, #10
 8003a5a:	2308      	moveq	r3, #8
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a62:	6866      	ldr	r6, [r4, #4]
 8003a64:	60a6      	str	r6, [r4, #8]
 8003a66:	2e00      	cmp	r6, #0
 8003a68:	db05      	blt.n	8003a76 <_printf_i+0x10e>
 8003a6a:	6821      	ldr	r1, [r4, #0]
 8003a6c:	432e      	orrs	r6, r5
 8003a6e:	f021 0104 	bic.w	r1, r1, #4
 8003a72:	6021      	str	r1, [r4, #0]
 8003a74:	d04b      	beq.n	8003b0e <_printf_i+0x1a6>
 8003a76:	4616      	mov	r6, r2
 8003a78:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a7c:	fb03 5711 	mls	r7, r3, r1, r5
 8003a80:	5dc7      	ldrb	r7, [r0, r7]
 8003a82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a86:	462f      	mov	r7, r5
 8003a88:	42bb      	cmp	r3, r7
 8003a8a:	460d      	mov	r5, r1
 8003a8c:	d9f4      	bls.n	8003a78 <_printf_i+0x110>
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d10b      	bne.n	8003aaa <_printf_i+0x142>
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	07df      	lsls	r7, r3, #31
 8003a96:	d508      	bpl.n	8003aaa <_printf_i+0x142>
 8003a98:	6923      	ldr	r3, [r4, #16]
 8003a9a:	6861      	ldr	r1, [r4, #4]
 8003a9c:	4299      	cmp	r1, r3
 8003a9e:	bfde      	ittt	le
 8003aa0:	2330      	movle	r3, #48	@ 0x30
 8003aa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003aa6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003aaa:	1b92      	subs	r2, r2, r6
 8003aac:	6122      	str	r2, [r4, #16]
 8003aae:	f8cd a000 	str.w	sl, [sp]
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	aa03      	add	r2, sp, #12
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	4640      	mov	r0, r8
 8003aba:	f7ff fee7 	bl	800388c <_printf_common>
 8003abe:	3001      	adds	r0, #1
 8003ac0:	d14a      	bne.n	8003b58 <_printf_i+0x1f0>
 8003ac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ac6:	b004      	add	sp, #16
 8003ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	f043 0320 	orr.w	r3, r3, #32
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	4832      	ldr	r0, [pc, #200]	@ (8003ba0 <_printf_i+0x238>)
 8003ad6:	2778      	movs	r7, #120	@ 0x78
 8003ad8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	6831      	ldr	r1, [r6, #0]
 8003ae0:	061f      	lsls	r7, r3, #24
 8003ae2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ae6:	d402      	bmi.n	8003aee <_printf_i+0x186>
 8003ae8:	065f      	lsls	r7, r3, #25
 8003aea:	bf48      	it	mi
 8003aec:	b2ad      	uxthmi	r5, r5
 8003aee:	6031      	str	r1, [r6, #0]
 8003af0:	07d9      	lsls	r1, r3, #31
 8003af2:	bf44      	itt	mi
 8003af4:	f043 0320 	orrmi.w	r3, r3, #32
 8003af8:	6023      	strmi	r3, [r4, #0]
 8003afa:	b11d      	cbz	r5, 8003b04 <_printf_i+0x19c>
 8003afc:	2310      	movs	r3, #16
 8003afe:	e7ad      	b.n	8003a5c <_printf_i+0xf4>
 8003b00:	4826      	ldr	r0, [pc, #152]	@ (8003b9c <_printf_i+0x234>)
 8003b02:	e7e9      	b.n	8003ad8 <_printf_i+0x170>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	f023 0320 	bic.w	r3, r3, #32
 8003b0a:	6023      	str	r3, [r4, #0]
 8003b0c:	e7f6      	b.n	8003afc <_printf_i+0x194>
 8003b0e:	4616      	mov	r6, r2
 8003b10:	e7bd      	b.n	8003a8e <_printf_i+0x126>
 8003b12:	6833      	ldr	r3, [r6, #0]
 8003b14:	6825      	ldr	r5, [r4, #0]
 8003b16:	6961      	ldr	r1, [r4, #20]
 8003b18:	1d18      	adds	r0, r3, #4
 8003b1a:	6030      	str	r0, [r6, #0]
 8003b1c:	062e      	lsls	r6, r5, #24
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	d501      	bpl.n	8003b26 <_printf_i+0x1be>
 8003b22:	6019      	str	r1, [r3, #0]
 8003b24:	e002      	b.n	8003b2c <_printf_i+0x1c4>
 8003b26:	0668      	lsls	r0, r5, #25
 8003b28:	d5fb      	bpl.n	8003b22 <_printf_i+0x1ba>
 8003b2a:	8019      	strh	r1, [r3, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	4616      	mov	r6, r2
 8003b32:	e7bc      	b.n	8003aae <_printf_i+0x146>
 8003b34:	6833      	ldr	r3, [r6, #0]
 8003b36:	1d1a      	adds	r2, r3, #4
 8003b38:	6032      	str	r2, [r6, #0]
 8003b3a:	681e      	ldr	r6, [r3, #0]
 8003b3c:	6862      	ldr	r2, [r4, #4]
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4630      	mov	r0, r6
 8003b42:	f7fc fb45 	bl	80001d0 <memchr>
 8003b46:	b108      	cbz	r0, 8003b4c <_printf_i+0x1e4>
 8003b48:	1b80      	subs	r0, r0, r6
 8003b4a:	6060      	str	r0, [r4, #4]
 8003b4c:	6863      	ldr	r3, [r4, #4]
 8003b4e:	6123      	str	r3, [r4, #16]
 8003b50:	2300      	movs	r3, #0
 8003b52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b56:	e7aa      	b.n	8003aae <_printf_i+0x146>
 8003b58:	6923      	ldr	r3, [r4, #16]
 8003b5a:	4632      	mov	r2, r6
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	4640      	mov	r0, r8
 8003b60:	47d0      	blx	sl
 8003b62:	3001      	adds	r0, #1
 8003b64:	d0ad      	beq.n	8003ac2 <_printf_i+0x15a>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	079b      	lsls	r3, r3, #30
 8003b6a:	d413      	bmi.n	8003b94 <_printf_i+0x22c>
 8003b6c:	68e0      	ldr	r0, [r4, #12]
 8003b6e:	9b03      	ldr	r3, [sp, #12]
 8003b70:	4298      	cmp	r0, r3
 8003b72:	bfb8      	it	lt
 8003b74:	4618      	movlt	r0, r3
 8003b76:	e7a6      	b.n	8003ac6 <_printf_i+0x15e>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	4632      	mov	r2, r6
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	4640      	mov	r0, r8
 8003b80:	47d0      	blx	sl
 8003b82:	3001      	adds	r0, #1
 8003b84:	d09d      	beq.n	8003ac2 <_printf_i+0x15a>
 8003b86:	3501      	adds	r5, #1
 8003b88:	68e3      	ldr	r3, [r4, #12]
 8003b8a:	9903      	ldr	r1, [sp, #12]
 8003b8c:	1a5b      	subs	r3, r3, r1
 8003b8e:	42ab      	cmp	r3, r5
 8003b90:	dcf2      	bgt.n	8003b78 <_printf_i+0x210>
 8003b92:	e7eb      	b.n	8003b6c <_printf_i+0x204>
 8003b94:	2500      	movs	r5, #0
 8003b96:	f104 0619 	add.w	r6, r4, #25
 8003b9a:	e7f5      	b.n	8003b88 <_printf_i+0x220>
 8003b9c:	0800446a 	.word	0x0800446a
 8003ba0:	0800447b 	.word	0x0800447b

08003ba4 <__sflush_r>:
 8003ba4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bac:	0716      	lsls	r6, r2, #28
 8003bae:	4605      	mov	r5, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	d454      	bmi.n	8003c5e <__sflush_r+0xba>
 8003bb4:	684b      	ldr	r3, [r1, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	dc02      	bgt.n	8003bc0 <__sflush_r+0x1c>
 8003bba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	dd48      	ble.n	8003c52 <__sflush_r+0xae>
 8003bc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bc2:	2e00      	cmp	r6, #0
 8003bc4:	d045      	beq.n	8003c52 <__sflush_r+0xae>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003bcc:	682f      	ldr	r7, [r5, #0]
 8003bce:	6a21      	ldr	r1, [r4, #32]
 8003bd0:	602b      	str	r3, [r5, #0]
 8003bd2:	d030      	beq.n	8003c36 <__sflush_r+0x92>
 8003bd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003bd6:	89a3      	ldrh	r3, [r4, #12]
 8003bd8:	0759      	lsls	r1, r3, #29
 8003bda:	d505      	bpl.n	8003be8 <__sflush_r+0x44>
 8003bdc:	6863      	ldr	r3, [r4, #4]
 8003bde:	1ad2      	subs	r2, r2, r3
 8003be0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003be2:	b10b      	cbz	r3, 8003be8 <__sflush_r+0x44>
 8003be4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003be6:	1ad2      	subs	r2, r2, r3
 8003be8:	2300      	movs	r3, #0
 8003bea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bec:	6a21      	ldr	r1, [r4, #32]
 8003bee:	4628      	mov	r0, r5
 8003bf0:	47b0      	blx	r6
 8003bf2:	1c43      	adds	r3, r0, #1
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	d106      	bne.n	8003c06 <__sflush_r+0x62>
 8003bf8:	6829      	ldr	r1, [r5, #0]
 8003bfa:	291d      	cmp	r1, #29
 8003bfc:	d82b      	bhi.n	8003c56 <__sflush_r+0xb2>
 8003bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca8 <__sflush_r+0x104>)
 8003c00:	40ca      	lsrs	r2, r1
 8003c02:	07d6      	lsls	r6, r2, #31
 8003c04:	d527      	bpl.n	8003c56 <__sflush_r+0xb2>
 8003c06:	2200      	movs	r2, #0
 8003c08:	6062      	str	r2, [r4, #4]
 8003c0a:	04d9      	lsls	r1, r3, #19
 8003c0c:	6922      	ldr	r2, [r4, #16]
 8003c0e:	6022      	str	r2, [r4, #0]
 8003c10:	d504      	bpl.n	8003c1c <__sflush_r+0x78>
 8003c12:	1c42      	adds	r2, r0, #1
 8003c14:	d101      	bne.n	8003c1a <__sflush_r+0x76>
 8003c16:	682b      	ldr	r3, [r5, #0]
 8003c18:	b903      	cbnz	r3, 8003c1c <__sflush_r+0x78>
 8003c1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c1e:	602f      	str	r7, [r5, #0]
 8003c20:	b1b9      	cbz	r1, 8003c52 <__sflush_r+0xae>
 8003c22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c26:	4299      	cmp	r1, r3
 8003c28:	d002      	beq.n	8003c30 <__sflush_r+0x8c>
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f7ff fbd6 	bl	80033dc <_free_r>
 8003c30:	2300      	movs	r3, #0
 8003c32:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c34:	e00d      	b.n	8003c52 <__sflush_r+0xae>
 8003c36:	2301      	movs	r3, #1
 8003c38:	4628      	mov	r0, r5
 8003c3a:	47b0      	blx	r6
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	1c50      	adds	r0, r2, #1
 8003c40:	d1c9      	bne.n	8003bd6 <__sflush_r+0x32>
 8003c42:	682b      	ldr	r3, [r5, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0c6      	beq.n	8003bd6 <__sflush_r+0x32>
 8003c48:	2b1d      	cmp	r3, #29
 8003c4a:	d001      	beq.n	8003c50 <__sflush_r+0xac>
 8003c4c:	2b16      	cmp	r3, #22
 8003c4e:	d11e      	bne.n	8003c8e <__sflush_r+0xea>
 8003c50:	602f      	str	r7, [r5, #0]
 8003c52:	2000      	movs	r0, #0
 8003c54:	e022      	b.n	8003c9c <__sflush_r+0xf8>
 8003c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c5a:	b21b      	sxth	r3, r3
 8003c5c:	e01b      	b.n	8003c96 <__sflush_r+0xf2>
 8003c5e:	690f      	ldr	r7, [r1, #16]
 8003c60:	2f00      	cmp	r7, #0
 8003c62:	d0f6      	beq.n	8003c52 <__sflush_r+0xae>
 8003c64:	0793      	lsls	r3, r2, #30
 8003c66:	680e      	ldr	r6, [r1, #0]
 8003c68:	bf08      	it	eq
 8003c6a:	694b      	ldreq	r3, [r1, #20]
 8003c6c:	600f      	str	r7, [r1, #0]
 8003c6e:	bf18      	it	ne
 8003c70:	2300      	movne	r3, #0
 8003c72:	eba6 0807 	sub.w	r8, r6, r7
 8003c76:	608b      	str	r3, [r1, #8]
 8003c78:	f1b8 0f00 	cmp.w	r8, #0
 8003c7c:	dde9      	ble.n	8003c52 <__sflush_r+0xae>
 8003c7e:	6a21      	ldr	r1, [r4, #32]
 8003c80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c82:	4643      	mov	r3, r8
 8003c84:	463a      	mov	r2, r7
 8003c86:	4628      	mov	r0, r5
 8003c88:	47b0      	blx	r6
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	dc08      	bgt.n	8003ca0 <__sflush_r+0xfc>
 8003c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c96:	81a3      	strh	r3, [r4, #12]
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ca0:	4407      	add	r7, r0
 8003ca2:	eba8 0800 	sub.w	r8, r8, r0
 8003ca6:	e7e7      	b.n	8003c78 <__sflush_r+0xd4>
 8003ca8:	20400001 	.word	0x20400001

08003cac <_fflush_r>:
 8003cac:	b538      	push	{r3, r4, r5, lr}
 8003cae:	690b      	ldr	r3, [r1, #16]
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	b913      	cbnz	r3, 8003cbc <_fflush_r+0x10>
 8003cb6:	2500      	movs	r5, #0
 8003cb8:	4628      	mov	r0, r5
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	b118      	cbz	r0, 8003cc6 <_fflush_r+0x1a>
 8003cbe:	6a03      	ldr	r3, [r0, #32]
 8003cc0:	b90b      	cbnz	r3, 8003cc6 <_fflush_r+0x1a>
 8003cc2:	f7ff f9c7 	bl	8003054 <__sinit>
 8003cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f3      	beq.n	8003cb6 <_fflush_r+0xa>
 8003cce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003cd0:	07d0      	lsls	r0, r2, #31
 8003cd2:	d404      	bmi.n	8003cde <_fflush_r+0x32>
 8003cd4:	0599      	lsls	r1, r3, #22
 8003cd6:	d402      	bmi.n	8003cde <_fflush_r+0x32>
 8003cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cda:	f7ff fb56 	bl	800338a <__retarget_lock_acquire_recursive>
 8003cde:	4628      	mov	r0, r5
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	f7ff ff5f 	bl	8003ba4 <__sflush_r>
 8003ce6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ce8:	07da      	lsls	r2, r3, #31
 8003cea:	4605      	mov	r5, r0
 8003cec:	d4e4      	bmi.n	8003cb8 <_fflush_r+0xc>
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	059b      	lsls	r3, r3, #22
 8003cf2:	d4e1      	bmi.n	8003cb8 <_fflush_r+0xc>
 8003cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cf6:	f7ff fb49 	bl	800338c <__retarget_lock_release_recursive>
 8003cfa:	e7dd      	b.n	8003cb8 <_fflush_r+0xc>

08003cfc <fiprintf>:
 8003cfc:	b40e      	push	{r1, r2, r3}
 8003cfe:	b503      	push	{r0, r1, lr}
 8003d00:	4601      	mov	r1, r0
 8003d02:	ab03      	add	r3, sp, #12
 8003d04:	4805      	ldr	r0, [pc, #20]	@ (8003d1c <fiprintf+0x20>)
 8003d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d0a:	6800      	ldr	r0, [r0, #0]
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	f000 f89d 	bl	8003e4c <_vfiprintf_r>
 8003d12:	b002      	add	sp, #8
 8003d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d18:	b003      	add	sp, #12
 8003d1a:	4770      	bx	lr
 8003d1c:	20000018 	.word	0x20000018

08003d20 <memmove>:
 8003d20:	4288      	cmp	r0, r1
 8003d22:	b510      	push	{r4, lr}
 8003d24:	eb01 0402 	add.w	r4, r1, r2
 8003d28:	d902      	bls.n	8003d30 <memmove+0x10>
 8003d2a:	4284      	cmp	r4, r0
 8003d2c:	4623      	mov	r3, r4
 8003d2e:	d807      	bhi.n	8003d40 <memmove+0x20>
 8003d30:	1e43      	subs	r3, r0, #1
 8003d32:	42a1      	cmp	r1, r4
 8003d34:	d008      	beq.n	8003d48 <memmove+0x28>
 8003d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d3e:	e7f8      	b.n	8003d32 <memmove+0x12>
 8003d40:	4402      	add	r2, r0
 8003d42:	4601      	mov	r1, r0
 8003d44:	428a      	cmp	r2, r1
 8003d46:	d100      	bne.n	8003d4a <memmove+0x2a>
 8003d48:	bd10      	pop	{r4, pc}
 8003d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d52:	e7f7      	b.n	8003d44 <memmove+0x24>

08003d54 <_sbrk_r>:
 8003d54:	b538      	push	{r3, r4, r5, lr}
 8003d56:	4d06      	ldr	r5, [pc, #24]	@ (8003d70 <_sbrk_r+0x1c>)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	f7fd f814 	bl	8000d8c <_sbrk>
 8003d64:	1c43      	adds	r3, r0, #1
 8003d66:	d102      	bne.n	8003d6e <_sbrk_r+0x1a>
 8003d68:	682b      	ldr	r3, [r5, #0]
 8003d6a:	b103      	cbz	r3, 8003d6e <_sbrk_r+0x1a>
 8003d6c:	6023      	str	r3, [r4, #0]
 8003d6e:	bd38      	pop	{r3, r4, r5, pc}
 8003d70:	20000290 	.word	0x20000290

08003d74 <memcpy>:
 8003d74:	440a      	add	r2, r1
 8003d76:	4291      	cmp	r1, r2
 8003d78:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003d7c:	d100      	bne.n	8003d80 <memcpy+0xc>
 8003d7e:	4770      	bx	lr
 8003d80:	b510      	push	{r4, lr}
 8003d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d8a:	4291      	cmp	r1, r2
 8003d8c:	d1f9      	bne.n	8003d82 <memcpy+0xe>
 8003d8e:	bd10      	pop	{r4, pc}

08003d90 <abort>:
 8003d90:	b508      	push	{r3, lr}
 8003d92:	2006      	movs	r0, #6
 8003d94:	f000 fa2e 	bl	80041f4 <raise>
 8003d98:	2001      	movs	r0, #1
 8003d9a:	f7fc ff7e 	bl	8000c9a <_exit>

08003d9e <_realloc_r>:
 8003d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da2:	4607      	mov	r7, r0
 8003da4:	4614      	mov	r4, r2
 8003da6:	460d      	mov	r5, r1
 8003da8:	b921      	cbnz	r1, 8003db4 <_realloc_r+0x16>
 8003daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dae:	4611      	mov	r1, r2
 8003db0:	f7ff bb88 	b.w	80034c4 <_malloc_r>
 8003db4:	b92a      	cbnz	r2, 8003dc2 <_realloc_r+0x24>
 8003db6:	f7ff fb11 	bl	80033dc <_free_r>
 8003dba:	4625      	mov	r5, r4
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dc2:	f000 fa33 	bl	800422c <_malloc_usable_size_r>
 8003dc6:	4284      	cmp	r4, r0
 8003dc8:	4606      	mov	r6, r0
 8003dca:	d802      	bhi.n	8003dd2 <_realloc_r+0x34>
 8003dcc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dd0:	d8f4      	bhi.n	8003dbc <_realloc_r+0x1e>
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	f7ff fb75 	bl	80034c4 <_malloc_r>
 8003dda:	4680      	mov	r8, r0
 8003ddc:	b908      	cbnz	r0, 8003de2 <_realloc_r+0x44>
 8003dde:	4645      	mov	r5, r8
 8003de0:	e7ec      	b.n	8003dbc <_realloc_r+0x1e>
 8003de2:	42b4      	cmp	r4, r6
 8003de4:	4622      	mov	r2, r4
 8003de6:	4629      	mov	r1, r5
 8003de8:	bf28      	it	cs
 8003dea:	4632      	movcs	r2, r6
 8003dec:	f7ff ffc2 	bl	8003d74 <memcpy>
 8003df0:	4629      	mov	r1, r5
 8003df2:	4638      	mov	r0, r7
 8003df4:	f7ff faf2 	bl	80033dc <_free_r>
 8003df8:	e7f1      	b.n	8003dde <_realloc_r+0x40>

08003dfa <__sfputc_r>:
 8003dfa:	6893      	ldr	r3, [r2, #8]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	b410      	push	{r4}
 8003e02:	6093      	str	r3, [r2, #8]
 8003e04:	da08      	bge.n	8003e18 <__sfputc_r+0x1e>
 8003e06:	6994      	ldr	r4, [r2, #24]
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	db01      	blt.n	8003e10 <__sfputc_r+0x16>
 8003e0c:	290a      	cmp	r1, #10
 8003e0e:	d103      	bne.n	8003e18 <__sfputc_r+0x1e>
 8003e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e14:	f000 b932 	b.w	800407c <__swbuf_r>
 8003e18:	6813      	ldr	r3, [r2, #0]
 8003e1a:	1c58      	adds	r0, r3, #1
 8003e1c:	6010      	str	r0, [r2, #0]
 8003e1e:	7019      	strb	r1, [r3, #0]
 8003e20:	4608      	mov	r0, r1
 8003e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <__sfputs_r>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	460f      	mov	r7, r1
 8003e2e:	4614      	mov	r4, r2
 8003e30:	18d5      	adds	r5, r2, r3
 8003e32:	42ac      	cmp	r4, r5
 8003e34:	d101      	bne.n	8003e3a <__sfputs_r+0x12>
 8003e36:	2000      	movs	r0, #0
 8003e38:	e007      	b.n	8003e4a <__sfputs_r+0x22>
 8003e3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3e:	463a      	mov	r2, r7
 8003e40:	4630      	mov	r0, r6
 8003e42:	f7ff ffda 	bl	8003dfa <__sfputc_r>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	d1f3      	bne.n	8003e32 <__sfputs_r+0xa>
 8003e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e4c <_vfiprintf_r>:
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e50:	460d      	mov	r5, r1
 8003e52:	b09d      	sub	sp, #116	@ 0x74
 8003e54:	4614      	mov	r4, r2
 8003e56:	4698      	mov	r8, r3
 8003e58:	4606      	mov	r6, r0
 8003e5a:	b118      	cbz	r0, 8003e64 <_vfiprintf_r+0x18>
 8003e5c:	6a03      	ldr	r3, [r0, #32]
 8003e5e:	b90b      	cbnz	r3, 8003e64 <_vfiprintf_r+0x18>
 8003e60:	f7ff f8f8 	bl	8003054 <__sinit>
 8003e64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e66:	07d9      	lsls	r1, r3, #31
 8003e68:	d405      	bmi.n	8003e76 <_vfiprintf_r+0x2a>
 8003e6a:	89ab      	ldrh	r3, [r5, #12]
 8003e6c:	059a      	lsls	r2, r3, #22
 8003e6e:	d402      	bmi.n	8003e76 <_vfiprintf_r+0x2a>
 8003e70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e72:	f7ff fa8a 	bl	800338a <__retarget_lock_acquire_recursive>
 8003e76:	89ab      	ldrh	r3, [r5, #12]
 8003e78:	071b      	lsls	r3, r3, #28
 8003e7a:	d501      	bpl.n	8003e80 <_vfiprintf_r+0x34>
 8003e7c:	692b      	ldr	r3, [r5, #16]
 8003e7e:	b99b      	cbnz	r3, 8003ea8 <_vfiprintf_r+0x5c>
 8003e80:	4629      	mov	r1, r5
 8003e82:	4630      	mov	r0, r6
 8003e84:	f000 f938 	bl	80040f8 <__swsetup_r>
 8003e88:	b170      	cbz	r0, 8003ea8 <_vfiprintf_r+0x5c>
 8003e8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e8c:	07dc      	lsls	r4, r3, #31
 8003e8e:	d504      	bpl.n	8003e9a <_vfiprintf_r+0x4e>
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e94:	b01d      	add	sp, #116	@ 0x74
 8003e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e9a:	89ab      	ldrh	r3, [r5, #12]
 8003e9c:	0598      	lsls	r0, r3, #22
 8003e9e:	d4f7      	bmi.n	8003e90 <_vfiprintf_r+0x44>
 8003ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ea2:	f7ff fa73 	bl	800338c <__retarget_lock_release_recursive>
 8003ea6:	e7f3      	b.n	8003e90 <_vfiprintf_r+0x44>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eac:	2320      	movs	r3, #32
 8003eae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eb6:	2330      	movs	r3, #48	@ 0x30
 8003eb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004068 <_vfiprintf_r+0x21c>
 8003ebc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ec0:	f04f 0901 	mov.w	r9, #1
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	469a      	mov	sl, r3
 8003ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ecc:	b10a      	cbz	r2, 8003ed2 <_vfiprintf_r+0x86>
 8003ece:	2a25      	cmp	r2, #37	@ 0x25
 8003ed0:	d1f9      	bne.n	8003ec6 <_vfiprintf_r+0x7a>
 8003ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ed6:	d00b      	beq.n	8003ef0 <_vfiprintf_r+0xa4>
 8003ed8:	465b      	mov	r3, fp
 8003eda:	4622      	mov	r2, r4
 8003edc:	4629      	mov	r1, r5
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f7ff ffa2 	bl	8003e28 <__sfputs_r>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	f000 80a7 	beq.w	8004038 <_vfiprintf_r+0x1ec>
 8003eea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eec:	445a      	add	r2, fp
 8003eee:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 809f 	beq.w	8004038 <_vfiprintf_r+0x1ec>
 8003efa:	2300      	movs	r3, #0
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f04:	f10a 0a01 	add.w	sl, sl, #1
 8003f08:	9304      	str	r3, [sp, #16]
 8003f0a:	9307      	str	r3, [sp, #28]
 8003f0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f10:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f12:	4654      	mov	r4, sl
 8003f14:	2205      	movs	r2, #5
 8003f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1a:	4853      	ldr	r0, [pc, #332]	@ (8004068 <_vfiprintf_r+0x21c>)
 8003f1c:	f7fc f958 	bl	80001d0 <memchr>
 8003f20:	9a04      	ldr	r2, [sp, #16]
 8003f22:	b9d8      	cbnz	r0, 8003f5c <_vfiprintf_r+0x110>
 8003f24:	06d1      	lsls	r1, r2, #27
 8003f26:	bf44      	itt	mi
 8003f28:	2320      	movmi	r3, #32
 8003f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f2e:	0713      	lsls	r3, r2, #28
 8003f30:	bf44      	itt	mi
 8003f32:	232b      	movmi	r3, #43	@ 0x2b
 8003f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f38:	f89a 3000 	ldrb.w	r3, [sl]
 8003f3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f3e:	d015      	beq.n	8003f6c <_vfiprintf_r+0x120>
 8003f40:	9a07      	ldr	r2, [sp, #28]
 8003f42:	4654      	mov	r4, sl
 8003f44:	2000      	movs	r0, #0
 8003f46:	f04f 0c0a 	mov.w	ip, #10
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f50:	3b30      	subs	r3, #48	@ 0x30
 8003f52:	2b09      	cmp	r3, #9
 8003f54:	d94b      	bls.n	8003fee <_vfiprintf_r+0x1a2>
 8003f56:	b1b0      	cbz	r0, 8003f86 <_vfiprintf_r+0x13a>
 8003f58:	9207      	str	r2, [sp, #28]
 8003f5a:	e014      	b.n	8003f86 <_vfiprintf_r+0x13a>
 8003f5c:	eba0 0308 	sub.w	r3, r0, r8
 8003f60:	fa09 f303 	lsl.w	r3, r9, r3
 8003f64:	4313      	orrs	r3, r2
 8003f66:	9304      	str	r3, [sp, #16]
 8003f68:	46a2      	mov	sl, r4
 8003f6a:	e7d2      	b.n	8003f12 <_vfiprintf_r+0xc6>
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	1d19      	adds	r1, r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	9103      	str	r1, [sp, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bfbb      	ittet	lt
 8003f78:	425b      	neglt	r3, r3
 8003f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f7e:	9307      	strge	r3, [sp, #28]
 8003f80:	9307      	strlt	r3, [sp, #28]
 8003f82:	bfb8      	it	lt
 8003f84:	9204      	strlt	r2, [sp, #16]
 8003f86:	7823      	ldrb	r3, [r4, #0]
 8003f88:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f8a:	d10a      	bne.n	8003fa2 <_vfiprintf_r+0x156>
 8003f8c:	7863      	ldrb	r3, [r4, #1]
 8003f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f90:	d132      	bne.n	8003ff8 <_vfiprintf_r+0x1ac>
 8003f92:	9b03      	ldr	r3, [sp, #12]
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	9203      	str	r2, [sp, #12]
 8003f9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f9e:	3402      	adds	r4, #2
 8003fa0:	9305      	str	r3, [sp, #20]
 8003fa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004078 <_vfiprintf_r+0x22c>
 8003fa6:	7821      	ldrb	r1, [r4, #0]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	4650      	mov	r0, sl
 8003fac:	f7fc f910 	bl	80001d0 <memchr>
 8003fb0:	b138      	cbz	r0, 8003fc2 <_vfiprintf_r+0x176>
 8003fb2:	9b04      	ldr	r3, [sp, #16]
 8003fb4:	eba0 000a 	sub.w	r0, r0, sl
 8003fb8:	2240      	movs	r2, #64	@ 0x40
 8003fba:	4082      	lsls	r2, r0
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	3401      	adds	r4, #1
 8003fc0:	9304      	str	r3, [sp, #16]
 8003fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fc6:	4829      	ldr	r0, [pc, #164]	@ (800406c <_vfiprintf_r+0x220>)
 8003fc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003fcc:	2206      	movs	r2, #6
 8003fce:	f7fc f8ff 	bl	80001d0 <memchr>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d03f      	beq.n	8004056 <_vfiprintf_r+0x20a>
 8003fd6:	4b26      	ldr	r3, [pc, #152]	@ (8004070 <_vfiprintf_r+0x224>)
 8003fd8:	bb1b      	cbnz	r3, 8004022 <_vfiprintf_r+0x1d6>
 8003fda:	9b03      	ldr	r3, [sp, #12]
 8003fdc:	3307      	adds	r3, #7
 8003fde:	f023 0307 	bic.w	r3, r3, #7
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	9303      	str	r3, [sp, #12]
 8003fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fe8:	443b      	add	r3, r7
 8003fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fec:	e76a      	b.n	8003ec4 <_vfiprintf_r+0x78>
 8003fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	e7a8      	b.n	8003f4a <_vfiprintf_r+0xfe>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	3401      	adds	r4, #1
 8003ffc:	9305      	str	r3, [sp, #20]
 8003ffe:	4619      	mov	r1, r3
 8004000:	f04f 0c0a 	mov.w	ip, #10
 8004004:	4620      	mov	r0, r4
 8004006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800400a:	3a30      	subs	r2, #48	@ 0x30
 800400c:	2a09      	cmp	r2, #9
 800400e:	d903      	bls.n	8004018 <_vfiprintf_r+0x1cc>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0c6      	beq.n	8003fa2 <_vfiprintf_r+0x156>
 8004014:	9105      	str	r1, [sp, #20]
 8004016:	e7c4      	b.n	8003fa2 <_vfiprintf_r+0x156>
 8004018:	fb0c 2101 	mla	r1, ip, r1, r2
 800401c:	4604      	mov	r4, r0
 800401e:	2301      	movs	r3, #1
 8004020:	e7f0      	b.n	8004004 <_vfiprintf_r+0x1b8>
 8004022:	ab03      	add	r3, sp, #12
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	462a      	mov	r2, r5
 8004028:	4b12      	ldr	r3, [pc, #72]	@ (8004074 <_vfiprintf_r+0x228>)
 800402a:	a904      	add	r1, sp, #16
 800402c:	4630      	mov	r0, r6
 800402e:	f3af 8000 	nop.w
 8004032:	4607      	mov	r7, r0
 8004034:	1c78      	adds	r0, r7, #1
 8004036:	d1d6      	bne.n	8003fe6 <_vfiprintf_r+0x19a>
 8004038:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800403a:	07d9      	lsls	r1, r3, #31
 800403c:	d405      	bmi.n	800404a <_vfiprintf_r+0x1fe>
 800403e:	89ab      	ldrh	r3, [r5, #12]
 8004040:	059a      	lsls	r2, r3, #22
 8004042:	d402      	bmi.n	800404a <_vfiprintf_r+0x1fe>
 8004044:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004046:	f7ff f9a1 	bl	800338c <__retarget_lock_release_recursive>
 800404a:	89ab      	ldrh	r3, [r5, #12]
 800404c:	065b      	lsls	r3, r3, #25
 800404e:	f53f af1f 	bmi.w	8003e90 <_vfiprintf_r+0x44>
 8004052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004054:	e71e      	b.n	8003e94 <_vfiprintf_r+0x48>
 8004056:	ab03      	add	r3, sp, #12
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	462a      	mov	r2, r5
 800405c:	4b05      	ldr	r3, [pc, #20]	@ (8004074 <_vfiprintf_r+0x228>)
 800405e:	a904      	add	r1, sp, #16
 8004060:	4630      	mov	r0, r6
 8004062:	f7ff fc81 	bl	8003968 <_printf_i>
 8004066:	e7e4      	b.n	8004032 <_vfiprintf_r+0x1e6>
 8004068:	08004459 	.word	0x08004459
 800406c:	08004463 	.word	0x08004463
 8004070:	00000000 	.word	0x00000000
 8004074:	08003e29 	.word	0x08003e29
 8004078:	0800445f 	.word	0x0800445f

0800407c <__swbuf_r>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	460e      	mov	r6, r1
 8004080:	4614      	mov	r4, r2
 8004082:	4605      	mov	r5, r0
 8004084:	b118      	cbz	r0, 800408e <__swbuf_r+0x12>
 8004086:	6a03      	ldr	r3, [r0, #32]
 8004088:	b90b      	cbnz	r3, 800408e <__swbuf_r+0x12>
 800408a:	f7fe ffe3 	bl	8003054 <__sinit>
 800408e:	69a3      	ldr	r3, [r4, #24]
 8004090:	60a3      	str	r3, [r4, #8]
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	071a      	lsls	r2, r3, #28
 8004096:	d501      	bpl.n	800409c <__swbuf_r+0x20>
 8004098:	6923      	ldr	r3, [r4, #16]
 800409a:	b943      	cbnz	r3, 80040ae <__swbuf_r+0x32>
 800409c:	4621      	mov	r1, r4
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 f82a 	bl	80040f8 <__swsetup_r>
 80040a4:	b118      	cbz	r0, 80040ae <__swbuf_r+0x32>
 80040a6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80040aa:	4638      	mov	r0, r7
 80040ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	6922      	ldr	r2, [r4, #16]
 80040b2:	1a98      	subs	r0, r3, r2
 80040b4:	6963      	ldr	r3, [r4, #20]
 80040b6:	b2f6      	uxtb	r6, r6
 80040b8:	4283      	cmp	r3, r0
 80040ba:	4637      	mov	r7, r6
 80040bc:	dc05      	bgt.n	80040ca <__swbuf_r+0x4e>
 80040be:	4621      	mov	r1, r4
 80040c0:	4628      	mov	r0, r5
 80040c2:	f7ff fdf3 	bl	8003cac <_fflush_r>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d1ed      	bne.n	80040a6 <__swbuf_r+0x2a>
 80040ca:	68a3      	ldr	r3, [r4, #8]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	60a3      	str	r3, [r4, #8]
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	6022      	str	r2, [r4, #0]
 80040d6:	701e      	strb	r6, [r3, #0]
 80040d8:	6962      	ldr	r2, [r4, #20]
 80040da:	1c43      	adds	r3, r0, #1
 80040dc:	429a      	cmp	r2, r3
 80040de:	d004      	beq.n	80040ea <__swbuf_r+0x6e>
 80040e0:	89a3      	ldrh	r3, [r4, #12]
 80040e2:	07db      	lsls	r3, r3, #31
 80040e4:	d5e1      	bpl.n	80040aa <__swbuf_r+0x2e>
 80040e6:	2e0a      	cmp	r6, #10
 80040e8:	d1df      	bne.n	80040aa <__swbuf_r+0x2e>
 80040ea:	4621      	mov	r1, r4
 80040ec:	4628      	mov	r0, r5
 80040ee:	f7ff fddd 	bl	8003cac <_fflush_r>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d0d9      	beq.n	80040aa <__swbuf_r+0x2e>
 80040f6:	e7d6      	b.n	80040a6 <__swbuf_r+0x2a>

080040f8 <__swsetup_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	4b29      	ldr	r3, [pc, #164]	@ (80041a0 <__swsetup_r+0xa8>)
 80040fc:	4605      	mov	r5, r0
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	460c      	mov	r4, r1
 8004102:	b118      	cbz	r0, 800410c <__swsetup_r+0x14>
 8004104:	6a03      	ldr	r3, [r0, #32]
 8004106:	b90b      	cbnz	r3, 800410c <__swsetup_r+0x14>
 8004108:	f7fe ffa4 	bl	8003054 <__sinit>
 800410c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004110:	0719      	lsls	r1, r3, #28
 8004112:	d422      	bmi.n	800415a <__swsetup_r+0x62>
 8004114:	06da      	lsls	r2, r3, #27
 8004116:	d407      	bmi.n	8004128 <__swsetup_r+0x30>
 8004118:	2209      	movs	r2, #9
 800411a:	602a      	str	r2, [r5, #0]
 800411c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004120:	81a3      	strh	r3, [r4, #12]
 8004122:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004126:	e033      	b.n	8004190 <__swsetup_r+0x98>
 8004128:	0758      	lsls	r0, r3, #29
 800412a:	d512      	bpl.n	8004152 <__swsetup_r+0x5a>
 800412c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800412e:	b141      	cbz	r1, 8004142 <__swsetup_r+0x4a>
 8004130:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004134:	4299      	cmp	r1, r3
 8004136:	d002      	beq.n	800413e <__swsetup_r+0x46>
 8004138:	4628      	mov	r0, r5
 800413a:	f7ff f94f 	bl	80033dc <_free_r>
 800413e:	2300      	movs	r3, #0
 8004140:	6363      	str	r3, [r4, #52]	@ 0x34
 8004142:	89a3      	ldrh	r3, [r4, #12]
 8004144:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004148:	81a3      	strh	r3, [r4, #12]
 800414a:	2300      	movs	r3, #0
 800414c:	6063      	str	r3, [r4, #4]
 800414e:	6923      	ldr	r3, [r4, #16]
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	f043 0308 	orr.w	r3, r3, #8
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	6923      	ldr	r3, [r4, #16]
 800415c:	b94b      	cbnz	r3, 8004172 <__swsetup_r+0x7a>
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004168:	d003      	beq.n	8004172 <__swsetup_r+0x7a>
 800416a:	4621      	mov	r1, r4
 800416c:	4628      	mov	r0, r5
 800416e:	f000 f88b 	bl	8004288 <__smakebuf_r>
 8004172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004176:	f013 0201 	ands.w	r2, r3, #1
 800417a:	d00a      	beq.n	8004192 <__swsetup_r+0x9a>
 800417c:	2200      	movs	r2, #0
 800417e:	60a2      	str	r2, [r4, #8]
 8004180:	6962      	ldr	r2, [r4, #20]
 8004182:	4252      	negs	r2, r2
 8004184:	61a2      	str	r2, [r4, #24]
 8004186:	6922      	ldr	r2, [r4, #16]
 8004188:	b942      	cbnz	r2, 800419c <__swsetup_r+0xa4>
 800418a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800418e:	d1c5      	bne.n	800411c <__swsetup_r+0x24>
 8004190:	bd38      	pop	{r3, r4, r5, pc}
 8004192:	0799      	lsls	r1, r3, #30
 8004194:	bf58      	it	pl
 8004196:	6962      	ldrpl	r2, [r4, #20]
 8004198:	60a2      	str	r2, [r4, #8]
 800419a:	e7f4      	b.n	8004186 <__swsetup_r+0x8e>
 800419c:	2000      	movs	r0, #0
 800419e:	e7f7      	b.n	8004190 <__swsetup_r+0x98>
 80041a0:	20000018 	.word	0x20000018

080041a4 <_raise_r>:
 80041a4:	291f      	cmp	r1, #31
 80041a6:	b538      	push	{r3, r4, r5, lr}
 80041a8:	4605      	mov	r5, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	d904      	bls.n	80041b8 <_raise_r+0x14>
 80041ae:	2316      	movs	r3, #22
 80041b0:	6003      	str	r3, [r0, #0]
 80041b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80041ba:	b112      	cbz	r2, 80041c2 <_raise_r+0x1e>
 80041bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80041c0:	b94b      	cbnz	r3, 80041d6 <_raise_r+0x32>
 80041c2:	4628      	mov	r0, r5
 80041c4:	f000 f830 	bl	8004228 <_getpid_r>
 80041c8:	4622      	mov	r2, r4
 80041ca:	4601      	mov	r1, r0
 80041cc:	4628      	mov	r0, r5
 80041ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041d2:	f000 b817 	b.w	8004204 <_kill_r>
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d00a      	beq.n	80041f0 <_raise_r+0x4c>
 80041da:	1c59      	adds	r1, r3, #1
 80041dc:	d103      	bne.n	80041e6 <_raise_r+0x42>
 80041de:	2316      	movs	r3, #22
 80041e0:	6003      	str	r3, [r0, #0]
 80041e2:	2001      	movs	r0, #1
 80041e4:	e7e7      	b.n	80041b6 <_raise_r+0x12>
 80041e6:	2100      	movs	r1, #0
 80041e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80041ec:	4620      	mov	r0, r4
 80041ee:	4798      	blx	r3
 80041f0:	2000      	movs	r0, #0
 80041f2:	e7e0      	b.n	80041b6 <_raise_r+0x12>

080041f4 <raise>:
 80041f4:	4b02      	ldr	r3, [pc, #8]	@ (8004200 <raise+0xc>)
 80041f6:	4601      	mov	r1, r0
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	f7ff bfd3 	b.w	80041a4 <_raise_r>
 80041fe:	bf00      	nop
 8004200:	20000018 	.word	0x20000018

08004204 <_kill_r>:
 8004204:	b538      	push	{r3, r4, r5, lr}
 8004206:	4d07      	ldr	r5, [pc, #28]	@ (8004224 <_kill_r+0x20>)
 8004208:	2300      	movs	r3, #0
 800420a:	4604      	mov	r4, r0
 800420c:	4608      	mov	r0, r1
 800420e:	4611      	mov	r1, r2
 8004210:	602b      	str	r3, [r5, #0]
 8004212:	f7fc fd32 	bl	8000c7a <_kill>
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	d102      	bne.n	8004220 <_kill_r+0x1c>
 800421a:	682b      	ldr	r3, [r5, #0]
 800421c:	b103      	cbz	r3, 8004220 <_kill_r+0x1c>
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	bd38      	pop	{r3, r4, r5, pc}
 8004222:	bf00      	nop
 8004224:	20000290 	.word	0x20000290

08004228 <_getpid_r>:
 8004228:	f7fc bd1f 	b.w	8000c6a <_getpid>

0800422c <_malloc_usable_size_r>:
 800422c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004230:	1f18      	subs	r0, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	bfbc      	itt	lt
 8004236:	580b      	ldrlt	r3, [r1, r0]
 8004238:	18c0      	addlt	r0, r0, r3
 800423a:	4770      	bx	lr

0800423c <__swhatbuf_r>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	460c      	mov	r4, r1
 8004240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004244:	2900      	cmp	r1, #0
 8004246:	b096      	sub	sp, #88	@ 0x58
 8004248:	4615      	mov	r5, r2
 800424a:	461e      	mov	r6, r3
 800424c:	da0d      	bge.n	800426a <__swhatbuf_r+0x2e>
 800424e:	89a3      	ldrh	r3, [r4, #12]
 8004250:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004254:	f04f 0100 	mov.w	r1, #0
 8004258:	bf14      	ite	ne
 800425a:	2340      	movne	r3, #64	@ 0x40
 800425c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004260:	2000      	movs	r0, #0
 8004262:	6031      	str	r1, [r6, #0]
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	b016      	add	sp, #88	@ 0x58
 8004268:	bd70      	pop	{r4, r5, r6, pc}
 800426a:	466a      	mov	r2, sp
 800426c:	f000 f848 	bl	8004300 <_fstat_r>
 8004270:	2800      	cmp	r0, #0
 8004272:	dbec      	blt.n	800424e <__swhatbuf_r+0x12>
 8004274:	9901      	ldr	r1, [sp, #4]
 8004276:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800427a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800427e:	4259      	negs	r1, r3
 8004280:	4159      	adcs	r1, r3
 8004282:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004286:	e7eb      	b.n	8004260 <__swhatbuf_r+0x24>

08004288 <__smakebuf_r>:
 8004288:	898b      	ldrh	r3, [r1, #12]
 800428a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800428c:	079d      	lsls	r5, r3, #30
 800428e:	4606      	mov	r6, r0
 8004290:	460c      	mov	r4, r1
 8004292:	d507      	bpl.n	80042a4 <__smakebuf_r+0x1c>
 8004294:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	6123      	str	r3, [r4, #16]
 800429c:	2301      	movs	r3, #1
 800429e:	6163      	str	r3, [r4, #20]
 80042a0:	b003      	add	sp, #12
 80042a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a4:	ab01      	add	r3, sp, #4
 80042a6:	466a      	mov	r2, sp
 80042a8:	f7ff ffc8 	bl	800423c <__swhatbuf_r>
 80042ac:	9f00      	ldr	r7, [sp, #0]
 80042ae:	4605      	mov	r5, r0
 80042b0:	4639      	mov	r1, r7
 80042b2:	4630      	mov	r0, r6
 80042b4:	f7ff f906 	bl	80034c4 <_malloc_r>
 80042b8:	b948      	cbnz	r0, 80042ce <__smakebuf_r+0x46>
 80042ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042be:	059a      	lsls	r2, r3, #22
 80042c0:	d4ee      	bmi.n	80042a0 <__smakebuf_r+0x18>
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	f043 0302 	orr.w	r3, r3, #2
 80042ca:	81a3      	strh	r3, [r4, #12]
 80042cc:	e7e2      	b.n	8004294 <__smakebuf_r+0xc>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	6020      	str	r0, [r4, #0]
 80042d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042d6:	81a3      	strh	r3, [r4, #12]
 80042d8:	9b01      	ldr	r3, [sp, #4]
 80042da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80042de:	b15b      	cbz	r3, 80042f8 <__smakebuf_r+0x70>
 80042e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042e4:	4630      	mov	r0, r6
 80042e6:	f000 f81d 	bl	8004324 <_isatty_r>
 80042ea:	b128      	cbz	r0, 80042f8 <__smakebuf_r+0x70>
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	f023 0303 	bic.w	r3, r3, #3
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	81a3      	strh	r3, [r4, #12]
 80042f8:	89a3      	ldrh	r3, [r4, #12]
 80042fa:	431d      	orrs	r5, r3
 80042fc:	81a5      	strh	r5, [r4, #12]
 80042fe:	e7cf      	b.n	80042a0 <__smakebuf_r+0x18>

08004300 <_fstat_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	4d07      	ldr	r5, [pc, #28]	@ (8004320 <_fstat_r+0x20>)
 8004304:	2300      	movs	r3, #0
 8004306:	4604      	mov	r4, r0
 8004308:	4608      	mov	r0, r1
 800430a:	4611      	mov	r1, r2
 800430c:	602b      	str	r3, [r5, #0]
 800430e:	f7fc fd14 	bl	8000d3a <_fstat>
 8004312:	1c43      	adds	r3, r0, #1
 8004314:	d102      	bne.n	800431c <_fstat_r+0x1c>
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	b103      	cbz	r3, 800431c <_fstat_r+0x1c>
 800431a:	6023      	str	r3, [r4, #0]
 800431c:	bd38      	pop	{r3, r4, r5, pc}
 800431e:	bf00      	nop
 8004320:	20000290 	.word	0x20000290

08004324 <_isatty_r>:
 8004324:	b538      	push	{r3, r4, r5, lr}
 8004326:	4d06      	ldr	r5, [pc, #24]	@ (8004340 <_isatty_r+0x1c>)
 8004328:	2300      	movs	r3, #0
 800432a:	4604      	mov	r4, r0
 800432c:	4608      	mov	r0, r1
 800432e:	602b      	str	r3, [r5, #0]
 8004330:	f7fc fd13 	bl	8000d5a <_isatty>
 8004334:	1c43      	adds	r3, r0, #1
 8004336:	d102      	bne.n	800433e <_isatty_r+0x1a>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	b103      	cbz	r3, 800433e <_isatty_r+0x1a>
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	bd38      	pop	{r3, r4, r5, pc}
 8004340:	20000290 	.word	0x20000290

08004344 <_init>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr

08004350 <_fini>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	bf00      	nop
 8004354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004356:	bc08      	pop	{r3}
 8004358:	469e      	mov	lr, r3
 800435a:	4770      	bx	lr
