
Final_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08007e20  08007e20  00008e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008324  08008324  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008324  08008324  00009324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800832c  0800832c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800832c  0800832c  0000932c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008330  08008330  00009330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008334  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          00000328  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004fc  200004fc  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d59d  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b9  00000000  00000000  000177a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  00019960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091b  00000000  00000000  0001a518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fe4  00000000  00000000  0001ae33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef11  00000000  00000000  0003de17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b86  00000000  00000000  0004cd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001208ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042c8  00000000  00000000  001208f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00124bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e04 	.word	0x08007e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007e04 	.word	0x08007e04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <UART1_Read>:
#include "GPS.h"
#include <string.h>

extern UART_HandleTypeDef huart1;

char UART1_Read(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
    uint8_t c;
    HAL_UART_Receive(&huart1, &c, 1, HAL_MAX_DELAY);
 8000eda:	1df9      	adds	r1, r7, #7
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <UART1_Read+0x20>)
 8000ee4:	f003 fccb 	bl	800487e <HAL_UART_Receive>
    return (char)c;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200002f0 	.word	0x200002f0

08000ef8 <GPS_Read_Location>:

uint8_t GPS_Read_Location(char *latitude, char *longitude) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0a0      	sub	sp, #128	@ 0x80
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
    char line[100];
    int i = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	67fb      	str	r3, [r7, #124]	@ 0x7c
    char c;

        c = UART1_Read();
 8000f06:	f7ff ffe5 	bl	8000ed4 <UART1_Read>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

        if (c == '$') {
 8000f10:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000f14:	2b24      	cmp	r3, #36	@ 0x24
 8000f16:	d157      	bne.n	8000fc8 <GPS_Read_Location+0xd0>
            line[i++] = c;
 8000f18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000f1e:	3380      	adds	r3, #128	@ 0x80
 8000f20:	443b      	add	r3, r7
 8000f22:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8000f26:	f803 2c74 	strb.w	r2, [r3, #-116]

            while (i < 99) {
 8000f2a:	e011      	b.n	8000f50 <GPS_Read_Location+0x58>
                c = UART1_Read();
 8000f2c:	f7ff ffd2 	bl	8000ed4 <UART1_Read>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
                line[i++] = c;
 8000f36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000f3c:	3380      	adds	r3, #128	@ 0x80
 8000f3e:	443b      	add	r3, r7
 8000f40:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8000f44:	f803 2c74 	strb.w	r2, [r3, #-116]
                if (c == '\n') break;
 8000f48:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000f4c:	2b0a      	cmp	r3, #10
 8000f4e:	d003      	beq.n	8000f58 <GPS_Read_Location+0x60>
            while (i < 99) {
 8000f50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f52:	2b62      	cmp	r3, #98	@ 0x62
 8000f54:	ddea      	ble.n	8000f2c <GPS_Read_Location+0x34>
 8000f56:	e000      	b.n	8000f5a <GPS_Read_Location+0x62>
                if (c == '\n') break;
 8000f58:	bf00      	nop
            }
            line[i] = '\0';
 8000f5a:	f107 020c 	add.w	r2, r7, #12
 8000f5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f60:	4413      	add	r3, r2
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]

            if (strstr(line, "$GPRMC") != NULL) {
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	491a      	ldr	r1, [pc, #104]	@ (8000fd4 <GPS_Read_Location+0xdc>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f004 fe65 	bl	8005c3c <strstr>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d025      	beq.n	8000fc4 <GPS_Read_Location+0xcc>
                char *token;
                int field = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	677b      	str	r3, [r7, #116]	@ 0x74
                token = strtok(line, ",");
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4915      	ldr	r1, [pc, #84]	@ (8000fd8 <GPS_Read_Location+0xe0>)
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 fdfe 	bl	8005b84 <strtok>
 8000f88:	67b8      	str	r0, [r7, #120]	@ 0x78

                while (token != NULL) {
 8000f8a:	e018      	b.n	8000fbe <GPS_Read_Location+0xc6>
                    field++;
 8000f8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f8e:	3301      	adds	r3, #1
 8000f90:	677b      	str	r3, [r7, #116]	@ 0x74
                    if (field == 4) {
 8000f92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d104      	bne.n	8000fa2 <GPS_Read_Location+0xaa>
                        strcpy(latitude, token);
 8000f98:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f004 fedb 	bl	8005d56 <strcpy>
 8000fa0:	e008      	b.n	8000fb4 <GPS_Read_Location+0xbc>
                    } else if (field == 6) {
 8000fa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fa4:	2b06      	cmp	r3, #6
 8000fa6:	d105      	bne.n	8000fb4 <GPS_Read_Location+0xbc>
                        strcpy(longitude, token);
 8000fa8:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f004 fed3 	bl	8005d56 <strcpy>
                        return 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e00a      	b.n	8000fca <GPS_Read_Location+0xd2>
                    }
                    token = strtok(NULL, ",");
 8000fb4:	4908      	ldr	r1, [pc, #32]	@ (8000fd8 <GPS_Read_Location+0xe0>)
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f004 fde4 	bl	8005b84 <strtok>
 8000fbc:	67b8      	str	r0, [r7, #120]	@ 0x78
                while (token != NULL) {
 8000fbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1e3      	bne.n	8000f8c <GPS_Read_Location+0x94>
                }
            }
            i = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
        }


    return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3780      	adds	r7, #128	@ 0x80
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	08007e20 	.word	0x08007e20
 8000fd8:	08007e28 	.word	0x08007e28

08000fdc <LcdInit>:
#include "lcd.h"

extern I2C_HandleTypeDef hi2c1;
static I2C_HandleTypeDef *lcd_i2c;

void LcdInit(I2C_HandleTypeDef *hi2c){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	lcd_i2c = hi2c;
 8000fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8001058 <LcdInit+0x7c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
	HAL_Delay(20);
 8000fea:	2014      	movs	r0, #20
 8000fec:	f000 ffc4 	bl	8001f78 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 8000ff0:	2103      	movs	r1, #3
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f832 	bl	800105c <LcdWriteNibble>
	HAL_Delay(5);
 8000ff8:	2005      	movs	r0, #5
 8000ffa:	f000 ffbd 	bl	8001f78 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 8000ffe:	2103      	movs	r1, #3
 8001000:	2000      	movs	r0, #0
 8001002:	f000 f82b 	bl	800105c <LcdWriteNibble>
	HAL_Delay(1);
 8001006:	2001      	movs	r0, #1
 8001008:	f000 ffb6 	bl	8001f78 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 800100c:	2103      	movs	r1, #3
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f824 	bl	800105c <LcdWriteNibble>
	HAL_Delay(1);
 8001014:	2001      	movs	r0, #1
 8001016:	f000 ffaf 	bl	8001f78 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x02);
 800101a:	2102      	movs	r1, #2
 800101c:	2000      	movs	r0, #0
 800101e:	f000 f81d 	bl	800105c <LcdWriteNibble>
	HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f000 ffa8 	bl	8001f78 <HAL_Delay>

	LcdWriteByte(LCD_CMD, LCD_FNSET_2LINE);
 8001028:	2128      	movs	r1, #40	@ 0x28
 800102a:	2000      	movs	r0, #0
 800102c:	f000 f85e 	bl	80010ec <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_OFF);
 8001030:	2108      	movs	r1, #8
 8001032:	2000      	movs	r0, #0
 8001034:	f000 f85a 	bl	80010ec <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_CLEAR);
 8001038:	2101      	movs	r1, #1
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f856 	bl	80010ec <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_ENTRYMODE);
 8001040:	2106      	movs	r1, #6
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f852 	bl	80010ec <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_ON);
 8001048:	210c      	movs	r1, #12
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f84e 	bl	80010ec <LcdWriteByte>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200001f0 	.word	0x200001f0

0800105c <LcdWriteNibble>:

void LcdWriteNibble(uint8_t cmd, uint8_t data){
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af02      	add	r7, sp, #8
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	4613      	mov	r3, r2
 800106a:	71bb      	strb	r3, [r7, #6]
	uint8_t rsFlag = (cmd == LCD_DATA) ? BV(LCD_RS_Pos) : 0;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b01      	cmp	r3, #1
 8001070:	bf0c      	ite	eq
 8001072:	2301      	moveq	r3, #1
 8001074:	2300      	movne	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	val = (data << 4) | rsFlag | BV(LCD_BL_Pos) | BV(LCD_EN_Pos);
 800107a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	b25a      	sxtb	r2, r3
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4313      	orrs	r3, r2
 8001088:	b25b      	sxtb	r3, r3
 800108a:	f043 030c 	orr.w	r3, r3, #12
 800108e:	b25b      	sxtb	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(lcd_i2c, LCD_SLAVE_ADDR_W, &val, 1, HAL_MAX_DELAY);
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <LcdWriteNibble+0x8c>)
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	f107 020e 	add.w	r2, r7, #14
 800109c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	214e      	movs	r1, #78	@ 0x4e
 80010a6:	f002 fb1d 	bl	80036e4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f000 ff64 	bl	8001f78 <HAL_Delay>
	val = (data << 4) | rsFlag | BV(LCD_BL_Pos);
 80010b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	b25a      	sxtb	r2, r3
 80010b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010bc:	4313      	orrs	r3, r2
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(lcd_i2c, LCD_SLAVE_ADDR_W, &val, 1, HAL_MAX_DELAY);
 80010ca:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <LcdWriteNibble+0x8c>)
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	f107 020e 	add.w	r2, r7, #14
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	214e      	movs	r1, #78	@ 0x4e
 80010dc:	f002 fb02 	bl	80036e4 <HAL_I2C_Master_Transmit>

}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200001f0 	.word	0x200001f0

080010ec <LcdWriteByte>:

void LcdWriteByte(uint8_t cmd, uint8_t data){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
	uint8_t high = data >> 4;
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	73fb      	strb	r3, [r7, #15]
	uint8_t low = data & 0x0F;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(cmd, high);
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ffa3 	bl	800105c <LcdWriteNibble>
	LcdWriteNibble(cmd, low);
 8001116:	7bba      	ldrb	r2, [r7, #14]
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff9d 	bl	800105c <LcdWriteNibble>
	HAL_Delay(1);
 8001122:	2001      	movs	r0, #1
 8001124:	f000 ff28 	bl	8001f78 <HAL_Delay>
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <LcdPuts>:

void LcdPuts(uint8_t line, char *str){
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
	LcdWriteByte(LCD_CMD, line);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4619      	mov	r1, r3
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff ffd3 	bl	80010ec <LcdWriteByte>
	for(int i=0 ; str[i] != '\0'; i++){
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	e00a      	b.n	8001162 <LcdPuts+0x32>
		LcdWriteByte(LCD_DATA, str[i]);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	4413      	add	r3, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff ffc8 	bl	80010ec <LcdWriteByte>
	for(int i=0 ; str[i] != '\0'; i++){
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1ee      	bne.n	800114c <LcdPuts+0x1c>
	}
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0be      	sub	sp, #248	@ 0xf8
 800117c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f000 fe89 	bl	8001e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 f995 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 fb29 	bl	80017dc <MX_GPIO_Init>
  MX_DMA_Init();
 800118a:	f000 fb07 	bl	800179c <MX_DMA_Init>
  MX_I2C1_Init();
 800118e:	f000 fa83 	bl	8001698 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001192:	f000 f9f7 	bl	8001584 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001196:	f000 faad 	bl	80016f4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800119a:	f000 fad5 	bl	8001748 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LcdInit(&hi2c1);
 800119e:	48a8      	ldr	r0, [pc, #672]	@ (8001440 <main+0x2c8>)
 80011a0:	f7ff ff1c 	bl	8000fdc <LcdInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 5);
 80011a4:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80011a8:	2205      	movs	r2, #5
 80011aa:	4619      	mov	r1, r3
 80011ac:	48a5      	ldr	r0, [pc, #660]	@ (8001444 <main+0x2cc>)
 80011ae:	f000 ff4b 	bl	8002048 <HAL_ADC_Start_DMA>
	  GPS_Read_Location(latitude, longitude);
 80011b2:	49a5      	ldr	r1, [pc, #660]	@ (8001448 <main+0x2d0>)
 80011b4:	48a5      	ldr	r0, [pc, #660]	@ (800144c <main+0x2d4>)
 80011b6:	f7ff fe9f 	bl	8000ef8 <GPS_Read_Location>

	  LcdPuts(LCD_LINE1,"APS System");
 80011ba:	49a5      	ldr	r1, [pc, #660]	@ (8001450 <main+0x2d8>)
 80011bc:	2080      	movs	r0, #128	@ 0x80
 80011be:	f7ff ffb7 	bl	8001130 <LcdPuts>

	  char str[20];
	  	  uint16_t value = adc_values[0];
 80011c2:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80011c6:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
	  	  sprintf(str, "MQ3 = %d",value);
 80011ca:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 80011ce:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80011d2:	49a0      	ldr	r1, [pc, #640]	@ (8001454 <main+0x2dc>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 fc67 	bl	8005aa8 <siprintf>
	  	  //LcdPuts(LCD_LINE2,str);
	  	  if(value>=3600){
 80011da:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80011de:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80011e2:	d322      	bcc.n	800122a <main+0xb2>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011ea:	489b      	ldr	r0, [pc, #620]	@ (8001458 <main+0x2e0>)
 80011ec:	f002 f91c 	bl	8003428 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2140      	movs	r1, #64	@ 0x40
 80011f4:	4899      	ldr	r0, [pc, #612]	@ (800145c <main+0x2e4>)
 80011f6:	f002 f917 	bl	8003428 <HAL_GPIO_WritePin>
	  		char buffer[100];
	  		snprintf(buffer, sizeof(buffer), "%s,%s  Alchole Detected!!!!\r\n", latitude, longitude);
 80011fa:	4638      	mov	r0, r7
 80011fc:	4b92      	ldr	r3, [pc, #584]	@ (8001448 <main+0x2d0>)
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4b92      	ldr	r3, [pc, #584]	@ (800144c <main+0x2d4>)
 8001202:	4a97      	ldr	r2, [pc, #604]	@ (8001460 <main+0x2e8>)
 8001204:	2164      	movs	r1, #100	@ 0x64
 8001206:	f004 fc19 	bl	8005a3c <sniprintf>
	  		HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800120a:	463b      	mov	r3, r7
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f82f 	bl	8000270 <strlen>
 8001212:	4603      	mov	r3, r0
 8001214:	b29a      	uxth	r2, r3
 8001216:	4639      	mov	r1, r7
 8001218:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800121c:	4891      	ldr	r0, [pc, #580]	@ (8001464 <main+0x2ec>)
 800121e:	f003 faa3 	bl	8004768 <HAL_UART_Transmit>
	  		HAL_Delay(100);
 8001222:	2064      	movs	r0, #100	@ 0x64
 8001224:	f000 fea8 	bl	8001f78 <HAL_Delay>
 8001228:	e00a      	b.n	8001240 <main+0xc8>
	  	  }
	  	  else{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001230:	4889      	ldr	r0, [pc, #548]	@ (8001458 <main+0x2e0>)
 8001232:	f002 f8f9 	bl	8003428 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	2140      	movs	r1, #64	@ 0x40
 800123a:	4888      	ldr	r0, [pc, #544]	@ (800145c <main+0x2e4>)
 800123c:	f002 f8f4 	bl	8003428 <HAL_GPIO_WritePin>
	  	  }

	  char str1[20];
	  	  uint16_t data1 = adc_values[1];
 8001240:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8001244:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
	  	  sprintf(str1, "Rain VAL = %d", data1);
 8001248:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	@ 0xec
 800124c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001250:	4985      	ldr	r1, [pc, #532]	@ (8001468 <main+0x2f0>)
 8001252:	4618      	mov	r0, r3
 8001254:	f004 fc28 	bl	8005aa8 <siprintf>
	  	  //LcdPuts(LCD_LINE1,str1);
	  	  if(data1>=3800){
 8001258:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 800125c:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8001260:	4293      	cmp	r3, r2
 8001262:	d904      	bls.n	800126e <main+0xf6>
	  		LcdPuts(LCD_LINE2,"        ");
 8001264:	4981      	ldr	r1, [pc, #516]	@ (800146c <main+0x2f4>)
 8001266:	20c0      	movs	r0, #192	@ 0xc0
 8001268:	f7ff ff62 	bl	8001130 <LcdPuts>
 800126c:	e00c      	b.n	8001288 <main+0x110>
	  	  }
	  	  else{
	  		LcdPuts(LCD_LINE2,"ABS-ON");
 800126e:	4980      	ldr	r1, [pc, #512]	@ (8001470 <main+0x2f8>)
 8001270:	20c0      	movs	r0, #192	@ 0xc0
 8001272:	f7ff ff5d 	bl	8001130 <LcdPuts>
	  		HAL_Delay(500);
 8001276:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800127a:	f000 fe7d 	bl	8001f78 <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2140      	movs	r1, #64	@ 0x40
 8001282:	4876      	ldr	r0, [pc, #472]	@ (800145c <main+0x2e4>)
 8001284:	f002 f8d0 	bl	8003428 <HAL_GPIO_WritePin>
	  	  }

	  char str2[20];
	  	  uint16_t data2 = adc_values[2];
 8001288:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 800128c:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
	  	  sprintf(str2, "LDR VAL = %-6d", data2);
 8001290:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	@ 0xea
 8001294:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001298:	4976      	ldr	r1, [pc, #472]	@ (8001474 <main+0x2fc>)
 800129a:	4618      	mov	r0, r3
 800129c:	f004 fc04 	bl	8005aa8 <siprintf>
	  	  //LcdPuts(LCD_LINE2,str2);
	  	  if(data2 > 2500){
 80012a0:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 80012a4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d905      	bls.n	80012b8 <main+0x140>
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2102      	movs	r1, #2
 80012b0:	4871      	ldr	r0, [pc, #452]	@ (8001478 <main+0x300>)
 80012b2:	f002 f8b9 	bl	8003428 <HAL_GPIO_WritePin>
 80012b6:	e009      	b.n	80012cc <main+0x154>
	  	  }
	  	  else
	  	  {
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2102      	movs	r1, #2
 80012bc:	486e      	ldr	r0, [pc, #440]	@ (8001478 <main+0x300>)
 80012be:	f002 f8b3 	bl	8003428 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	2120      	movs	r1, #32
 80012c6:	486c      	ldr	r0, [pc, #432]	@ (8001478 <main+0x300>)
 80012c8:	f002 f8ae 	bl	8003428 <HAL_GPIO_WritePin>
	  	  }

	  char str3[20];
	  	  uint16_t data3 = adc_values[3];
 80012cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80012d0:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
	  	  float voltage = (data3 * 3.3f) / 4095.0f;
 80012d4:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e0:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800147c <main+0x304>
 80012e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012e8:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001480 <main+0x308>
 80012ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f0:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
	  	  float temp = voltage / 0.01f;
 80012f4:	ed97 7a39 	vldr	s14, [r7, #228]	@ 0xe4
 80012f8:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8001484 <main+0x30c>
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
	  	  int temp_int = (int)(temp * 100);
 8001304:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8001308:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001488 <main+0x310>
 800130c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001314:	ee17 3a90 	vmov	r3, s15
 8001318:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	  	  int whole = temp_int / 100;
 800131c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001320:	4a5a      	ldr	r2, [pc, #360]	@ (800148c <main+0x314>)
 8001322:	fb82 1203 	smull	r1, r2, r2, r3
 8001326:	1152      	asrs	r2, r2, #5
 8001328:	17db      	asrs	r3, r3, #31
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	  	  int frac = temp_int % 100;
 8001330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001334:	4a55      	ldr	r2, [pc, #340]	@ (800148c <main+0x314>)
 8001336:	fb82 1203 	smull	r1, r2, r2, r3
 800133a:	1151      	asrs	r1, r2, #5
 800133c:	17da      	asrs	r2, r3, #31
 800133e:	1a8a      	subs	r2, r1, r2
 8001340:	2164      	movs	r1, #100	@ 0x64
 8001342:	fb01 f202 	mul.w	r2, r1, r2
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	  	  sprintf(str3, "Temp: %d.%02d C", whole, abs(frac));
 800134c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001350:	2b00      	cmp	r3, #0
 8001352:	bfb8      	it	lt
 8001354:	425b      	neglt	r3, r3
 8001356:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800135a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800135e:	494c      	ldr	r1, [pc, #304]	@ (8001490 <main+0x318>)
 8001360:	f004 fba2 	bl	8005aa8 <siprintf>
	  	  //LcdPuts(LCD_LINE2,str3);
	  	  if(whole > 35){
 8001364:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001368:	2b23      	cmp	r3, #35	@ 0x23
 800136a:	dd21      	ble.n	80013b0 <main+0x238>
	  		LcdPuts(LCD_LINE2,"OVER HEAT");
 800136c:	4949      	ldr	r1, [pc, #292]	@ (8001494 <main+0x31c>)
 800136e:	20c0      	movs	r0, #192	@ 0xc0
 8001370:	f7ff fede 	bl	8001130 <LcdPuts>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2140      	movs	r1, #64	@ 0x40
 8001378:	4838      	ldr	r0, [pc, #224]	@ (800145c <main+0x2e4>)
 800137a:	f002 f855 	bl	8003428 <HAL_GPIO_WritePin>
	  		char buffer[100];
	  		snprintf(buffer, sizeof(buffer), "%s,%s  Vehicale Over Heated!!!!\r\n", latitude, longitude);
 800137e:	4638      	mov	r0, r7
 8001380:	4b31      	ldr	r3, [pc, #196]	@ (8001448 <main+0x2d0>)
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	4b31      	ldr	r3, [pc, #196]	@ (800144c <main+0x2d4>)
 8001386:	4a44      	ldr	r2, [pc, #272]	@ (8001498 <main+0x320>)
 8001388:	2164      	movs	r1, #100	@ 0x64
 800138a:	f004 fb57 	bl	8005a3c <sniprintf>
	  		HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800138e:	463b      	mov	r3, r7
 8001390:	4618      	mov	r0, r3
 8001392:	f7fe ff6d 	bl	8000270 <strlen>
 8001396:	4603      	mov	r3, r0
 8001398:	b29a      	uxth	r2, r3
 800139a:	4639      	mov	r1, r7
 800139c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013a0:	4830      	ldr	r0, [pc, #192]	@ (8001464 <main+0x2ec>)
 80013a2:	f003 f9e1 	bl	8004768 <HAL_UART_Transmit>
	  		HAL_Delay(500);
 80013a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013aa:	f000 fde5 	bl	8001f78 <HAL_Delay>
 80013ae:	e008      	b.n	80013c2 <main+0x24a>
	  	  }
	  	  else{
	  		LcdPuts(LCD_LINE2,"          ");
 80013b0:	493a      	ldr	r1, [pc, #232]	@ (800149c <main+0x324>)
 80013b2:	20c0      	movs	r0, #192	@ 0xc0
 80013b4:	f7ff febc 	bl	8001130 <LcdPuts>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2140      	movs	r1, #64	@ 0x40
 80013bc:	4827      	ldr	r0, [pc, #156]	@ (800145c <main+0x2e4>)
 80013be:	f002 f833 	bl	8003428 <HAL_GPIO_WritePin>
	  	  }

	  char str4[20];
	  	   uint16_t data4 = adc_values[4];
 80013c2:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 80013c6:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
	  	   sprintf(str4, "vib = %d",data4);
 80013ca:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	@ 0xd2
 80013ce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013d2:	4933      	ldr	r1, [pc, #204]	@ (80014a0 <main+0x328>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f004 fb67 	bl	8005aa8 <siprintf>
	  	   //LcdPuts(LCD_LINE2, (uint16_t*)str4);
	  	   if(data4 < 4085){
 80013da:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 80013de:	f640 72f4 	movw	r2, #4084	@ 0xff4
 80013e2:	4293      	cmp	r3, r2
 80013e4:	f63f aede 	bhi.w	80011a4 <main+0x2c>
	  		   LcdPuts(LCD_LINE2,"drive carefully");
 80013e8:	492e      	ldr	r1, [pc, #184]	@ (80014a4 <main+0x32c>)
 80013ea:	20c0      	movs	r0, #192	@ 0xc0
 80013ec:	f7ff fea0 	bl	8001130 <LcdPuts>
	  		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2140      	movs	r1, #64	@ 0x40
 80013f4:	4819      	ldr	r0, [pc, #100]	@ (800145c <main+0x2e4>)
 80013f6:	f002 f817 	bl	8003428 <HAL_GPIO_WritePin>
	  		   char buffer[100];
	  		   snprintf(buffer, sizeof(buffer), "%s,%s  Rash Driving Detected!!!!\r\n", latitude, longitude);
 80013fa:	4638      	mov	r0, r7
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <main+0x2d0>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <main+0x2d4>)
 8001402:	4a29      	ldr	r2, [pc, #164]	@ (80014a8 <main+0x330>)
 8001404:	2164      	movs	r1, #100	@ 0x64
 8001406:	f004 fb19 	bl	8005a3c <sniprintf>
	  		   HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800140a:	463b      	mov	r3, r7
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe ff2f 	bl	8000270 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	4639      	mov	r1, r7
 8001418:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800141c:	4811      	ldr	r0, [pc, #68]	@ (8001464 <main+0x2ec>)
 800141e:	f003 f9a3 	bl	8004768 <HAL_UART_Transmit>
	  		   HAL_Delay(500);
 8001422:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001426:	f000 fda7 	bl	8001f78 <HAL_Delay>
	  		   LcdPuts(LCD_LINE2,"                ");
 800142a:	4920      	ldr	r1, [pc, #128]	@ (80014ac <main+0x334>)
 800142c:	20c0      	movs	r0, #192	@ 0xc0
 800142e:	f7ff fe7f 	bl	8001130 <LcdPuts>
	  		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2140      	movs	r1, #64	@ 0x40
 8001436:	4809      	ldr	r0, [pc, #36]	@ (800145c <main+0x2e4>)
 8001438:	f001 fff6 	bl	8003428 <HAL_GPIO_WritePin>
  {
 800143c:	e6b2      	b.n	80011a4 <main+0x2c>
 800143e:	bf00      	nop
 8001440:	2000029c 	.word	0x2000029c
 8001444:	200001f4 	.word	0x200001f4
 8001448:	20000394 	.word	0x20000394
 800144c:	20000380 	.word	0x20000380
 8001450:	08007e2c 	.word	0x08007e2c
 8001454:	08007e38 	.word	0x08007e38
 8001458:	40020800 	.word	0x40020800
 800145c:	40020c00 	.word	0x40020c00
 8001460:	08007e44 	.word	0x08007e44
 8001464:	20000338 	.word	0x20000338
 8001468:	08007e64 	.word	0x08007e64
 800146c:	08007e74 	.word	0x08007e74
 8001470:	08007e80 	.word	0x08007e80
 8001474:	08007e88 	.word	0x08007e88
 8001478:	40021000 	.word	0x40021000
 800147c:	40533333 	.word	0x40533333
 8001480:	457ff000 	.word	0x457ff000
 8001484:	3c23d70a 	.word	0x3c23d70a
 8001488:	42c80000 	.word	0x42c80000
 800148c:	51eb851f 	.word	0x51eb851f
 8001490:	08007e98 	.word	0x08007e98
 8001494:	08007ea8 	.word	0x08007ea8
 8001498:	08007eb4 	.word	0x08007eb4
 800149c:	08007ed8 	.word	0x08007ed8
 80014a0:	08007ee4 	.word	0x08007ee4
 80014a4:	08007ef0 	.word	0x08007ef0
 80014a8:	08007f00 	.word	0x08007f00
 80014ac:	08007f24 	.word	0x08007f24

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	@ 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2230      	movs	r2, #48	@ 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f004 fb57 	bl	8005b72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	4b28      	ldr	r3, [pc, #160]	@ (800157c <SystemClock_Config+0xcc>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	4a27      	ldr	r2, [pc, #156]	@ (800157c <SystemClock_Config+0xcc>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e4:	4b25      	ldr	r3, [pc, #148]	@ (800157c <SystemClock_Config+0xcc>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <SystemClock_Config+0xd0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a21      	ldr	r2, [pc, #132]	@ (8001580 <SystemClock_Config+0xd0>)
 80014fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <SystemClock_Config+0xd0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150c:	2302      	movs	r3, #2
 800150e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001510:	2301      	movs	r3, #1
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001514:	2310      	movs	r3, #16
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001518:	2302      	movs	r3, #2
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800151c:	2300      	movs	r3, #0
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001520:	2308      	movs	r3, #8
 8001522:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001524:	2332      	movs	r3, #50	@ 0x32
 8001526:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001528:	2304      	movs	r3, #4
 800152a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800152c:	2307      	movs	r3, #7
 800152e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	4618      	mov	r0, r3
 8001536:	f002 fc2f 	bl	8003d98 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001540:	f000 f9e4 	bl	800190c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	230f      	movs	r3, #15
 8001546:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001548:	2302      	movs	r3, #2
 800154a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001550:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001554:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fe90 	bl	8004288 <HAL_RCC_ClockConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800156e:	f000 f9cd 	bl	800190c <Error_Handler>
  }
}
 8001572:	bf00      	nop
 8001574:	3750      	adds	r7, #80	@ 0x50
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000

08001584 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001596:	4b3d      	ldr	r3, [pc, #244]	@ (800168c <MX_ADC1_Init+0x108>)
 8001598:	4a3d      	ldr	r2, [pc, #244]	@ (8001690 <MX_ADC1_Init+0x10c>)
 800159a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800159c:	4b3b      	ldr	r3, [pc, #236]	@ (800168c <MX_ADC1_Init+0x108>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015a2:	4b3a      	ldr	r3, [pc, #232]	@ (800168c <MX_ADC1_Init+0x108>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015a8:	4b38      	ldr	r3, [pc, #224]	@ (800168c <MX_ADC1_Init+0x108>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015ae:	4b37      	ldr	r3, [pc, #220]	@ (800168c <MX_ADC1_Init+0x108>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015b4:	4b35      	ldr	r3, [pc, #212]	@ (800168c <MX_ADC1_Init+0x108>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015bc:	4b33      	ldr	r3, [pc, #204]	@ (800168c <MX_ADC1_Init+0x108>)
 80015be:	2200      	movs	r2, #0
 80015c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c2:	4b32      	ldr	r3, [pc, #200]	@ (800168c <MX_ADC1_Init+0x108>)
 80015c4:	4a33      	ldr	r2, [pc, #204]	@ (8001694 <MX_ADC1_Init+0x110>)
 80015c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c8:	4b30      	ldr	r3, [pc, #192]	@ (800168c <MX_ADC1_Init+0x108>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80015ce:	4b2f      	ldr	r3, [pc, #188]	@ (800168c <MX_ADC1_Init+0x108>)
 80015d0:	2205      	movs	r2, #5
 80015d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015d4:	4b2d      	ldr	r3, [pc, #180]	@ (800168c <MX_ADC1_Init+0x108>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015dc:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <MX_ADC1_Init+0x108>)
 80015de:	2201      	movs	r2, #1
 80015e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e2:	482a      	ldr	r0, [pc, #168]	@ (800168c <MX_ADC1_Init+0x108>)
 80015e4:	f000 fcec 	bl	8001fc0 <HAL_ADC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015ee:	f000 f98d 	bl	800190c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015fa:	2303      	movs	r3, #3
 80015fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	4619      	mov	r1, r3
 8001602:	4822      	ldr	r0, [pc, #136]	@ (800168c <MX_ADC1_Init+0x108>)
 8001604:	f000 fe52 	bl	80022ac <HAL_ADC_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800160e:	f000 f97d 	bl	800190c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001612:	2301      	movs	r3, #1
 8001614:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001616:	2302      	movs	r3, #2
 8001618:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161a:	463b      	mov	r3, r7
 800161c:	4619      	mov	r1, r3
 800161e:	481b      	ldr	r0, [pc, #108]	@ (800168c <MX_ADC1_Init+0x108>)
 8001620:	f000 fe44 	bl	80022ac <HAL_ADC_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800162a:	f000 f96f 	bl	800190c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800162e:	2303      	movs	r3, #3
 8001630:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001632:	2303      	movs	r3, #3
 8001634:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	4619      	mov	r1, r3
 800163a:	4814      	ldr	r0, [pc, #80]	@ (800168c <MX_ADC1_Init+0x108>)
 800163c:	f000 fe36 	bl	80022ac <HAL_ADC_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001646:	f000 f961 	bl	800190c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800164a:	2305      	movs	r3, #5
 800164c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800164e:	2304      	movs	r3, #4
 8001650:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	4619      	mov	r1, r3
 8001656:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_ADC1_Init+0x108>)
 8001658:	f000 fe28 	bl	80022ac <HAL_ADC_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001662:	f000 f953 	bl	800190c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001666:	2308      	movs	r3, #8
 8001668:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800166a:	2305      	movs	r3, #5
 800166c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	4619      	mov	r1, r3
 8001672:	4806      	ldr	r0, [pc, #24]	@ (800168c <MX_ADC1_Init+0x108>)
 8001674:	f000 fe1a 	bl	80022ac <HAL_ADC_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800167e:	f000 f945 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200001f4 	.word	0x200001f4
 8001690:	40012000 	.word	0x40012000
 8001694:	0f000001 	.word	0x0f000001

08001698 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800169c:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <MX_I2C1_Init+0x50>)
 800169e:	4a13      	ldr	r2, [pc, #76]	@ (80016ec <MX_I2C1_Init+0x54>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016a4:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <MX_I2C1_Init+0x58>)
 80016a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ce:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <MX_I2C1_Init+0x50>)
 80016d6:	f001 fec1 	bl	800345c <HAL_I2C_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016e0:	f000 f914 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000029c 	.word	0x2000029c
 80016ec:	40005400 	.word	0x40005400
 80016f0:	000186a0 	.word	0x000186a0

080016f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <MX_USART1_UART_Init+0x4c>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <MX_USART1_UART_Init+0x50>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <MX_USART1_UART_Init+0x4c>)
 8001700:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_USART1_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <MX_USART1_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <MX_USART1_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <MX_USART1_UART_Init+0x4c>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <MX_USART1_UART_Init+0x4c>)
 800172c:	f002 ffcc 	bl	80046c8 <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001736:	f000 f8e9 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002f0 	.word	0x200002f0
 8001744:	40011000 	.word	0x40011000

08001748 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_USART3_UART_Init+0x4c>)
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <MX_USART3_UART_Init+0x50>)
 8001750:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <MX_USART3_UART_Init+0x4c>)
 8001754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001758:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <MX_USART3_UART_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_USART3_UART_Init+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <MX_USART3_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <MX_USART3_UART_Init+0x4c>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <MX_USART3_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_USART3_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	@ (8001794 <MX_USART3_UART_Init+0x4c>)
 8001780:	f002 ffa2 	bl	80046c8 <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800178a:	f000 f8bf 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000338 	.word	0x20000338
 8001798:	40004800 	.word	0x40004800

0800179c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <MX_DMA_Init+0x3c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <MX_DMA_Init+0x3c>)
 80017ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b2:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <MX_DMA_Init+0x3c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2038      	movs	r0, #56	@ 0x38
 80017c4:	f001 f8ed 	bl	80029a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017c8:	2038      	movs	r0, #56	@ 0x38
 80017ca:	f001 f906 	bl	80029da <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	@ 0x28
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b41      	ldr	r3, [pc, #260]	@ (80018fc <MX_GPIO_Init+0x120>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a40      	ldr	r2, [pc, #256]	@ (80018fc <MX_GPIO_Init+0x120>)
 80017fc:	f043 0310 	orr.w	r3, r3, #16
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b3e      	ldr	r3, [pc, #248]	@ (80018fc <MX_GPIO_Init+0x120>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b3a      	ldr	r3, [pc, #232]	@ (80018fc <MX_GPIO_Init+0x120>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a39      	ldr	r2, [pc, #228]	@ (80018fc <MX_GPIO_Init+0x120>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b37      	ldr	r3, [pc, #220]	@ (80018fc <MX_GPIO_Init+0x120>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b33      	ldr	r3, [pc, #204]	@ (80018fc <MX_GPIO_Init+0x120>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a32      	ldr	r2, [pc, #200]	@ (80018fc <MX_GPIO_Init+0x120>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b30      	ldr	r3, [pc, #192]	@ (80018fc <MX_GPIO_Init+0x120>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b2c      	ldr	r3, [pc, #176]	@ (80018fc <MX_GPIO_Init+0x120>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a2b      	ldr	r2, [pc, #172]	@ (80018fc <MX_GPIO_Init+0x120>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <MX_GPIO_Init+0x120>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <MX_GPIO_Init+0x120>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a24      	ldr	r2, [pc, #144]	@ (80018fc <MX_GPIO_Init+0x120>)
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <MX_GPIO_Init+0x120>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	2122      	movs	r1, #34	@ 0x22
 8001882:	481f      	ldr	r0, [pc, #124]	@ (8001900 <MX_GPIO_Init+0x124>)
 8001884:	f001 fdd0 	bl	8003428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
 800188a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800188e:	481d      	ldr	r0, [pc, #116]	@ (8001904 <MX_GPIO_Init+0x128>)
 8001890:	f001 fdca 	bl	8003428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2140      	movs	r1, #64	@ 0x40
 8001898:	481b      	ldr	r0, [pc, #108]	@ (8001908 <MX_GPIO_Init+0x12c>)
 800189a:	f001 fdc5 	bl	8003428 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_1;
 800189e:	2322      	movs	r3, #34	@ 0x22
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4812      	ldr	r0, [pc, #72]	@ (8001900 <MX_GPIO_Init+0x124>)
 80018b6:	f001 fc1b 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	480c      	ldr	r0, [pc, #48]	@ (8001904 <MX_GPIO_Init+0x128>)
 80018d4:	f001 fc0c 	bl	80030f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018d8:	2340      	movs	r3, #64	@ 0x40
 80018da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	4806      	ldr	r0, [pc, #24]	@ (8001908 <MX_GPIO_Init+0x12c>)
 80018f0:	f001 fbfe 	bl	80030f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	@ 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40021000 	.word	0x40021000
 8001904:	40020800 	.word	0x40020800
 8001908:	40020c00 	.word	0x40020c00

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <Error_Handler+0x8>

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <HAL_MspInit+0x4c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001926:	4a0f      	ldr	r2, [pc, #60]	@ (8001964 <HAL_MspInit+0x4c>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800192c:	6453      	str	r3, [r2, #68]	@ 0x44
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_MspInit+0x4c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <HAL_MspInit+0x4c>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	@ 0x40
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001956:	2007      	movs	r0, #7
 8001958:	f001 f818 	bl	800298c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a3b      	ldr	r2, [pc, #236]	@ (8001a74 <HAL_ADC_MspInit+0x10c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d170      	bne.n	8001a6c <HAL_ADC_MspInit+0x104>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <HAL_ADC_MspInit+0x110>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	4a39      	ldr	r2, [pc, #228]	@ (8001a78 <HAL_ADC_MspInit+0x110>)
 8001994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001998:	6453      	str	r3, [r2, #68]	@ 0x44
 800199a:	4b37      	ldr	r3, [pc, #220]	@ (8001a78 <HAL_ADC_MspInit+0x110>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b33      	ldr	r3, [pc, #204]	@ (8001a78 <HAL_ADC_MspInit+0x110>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a32      	ldr	r2, [pc, #200]	@ (8001a78 <HAL_ADC_MspInit+0x110>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b30      	ldr	r3, [pc, #192]	@ (8001a78 <HAL_ADC_MspInit+0x110>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <HAL_ADC_MspInit+0x110>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001a78 <HAL_ADC_MspInit+0x110>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <HAL_ADC_MspInit+0x110>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 80019de:	232b      	movs	r3, #43	@ 0x2b
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e2:	2303      	movs	r3, #3
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	4822      	ldr	r0, [pc, #136]	@ (8001a7c <HAL_ADC_MspInit+0x114>)
 80019f2:	f001 fb7d 	bl	80030f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019f6:	2301      	movs	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fa:	2303      	movs	r3, #3
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	481d      	ldr	r0, [pc, #116]	@ (8001a80 <HAL_ADC_MspInit+0x118>)
 8001a0a:	f001 fb71 	bl	80030f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a10:	4a1d      	ldr	r2, [pc, #116]	@ (8001a88 <HAL_ADC_MspInit+0x120>)
 8001a12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a26:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a36:	4b13      	ldr	r3, [pc, #76]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a52:	f000 ffdd 	bl	8002a10 <HAL_DMA_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001a5c:	f7ff ff56 	bl	800190c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a08      	ldr	r2, [pc, #32]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a64:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a66:	4a07      	ldr	r2, [pc, #28]	@ (8001a84 <HAL_ADC_MspInit+0x11c>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	@ 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40012000 	.word	0x40012000
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020400 	.word	0x40020400
 8001a84:	2000023c 	.word	0x2000023c
 8001a88:	40026410 	.word	0x40026410

08001a8c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	@ 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	@ (8001b10 <HAL_I2C_MspInit+0x84>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d12b      	bne.n	8001b06 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b18      	ldr	r3, [pc, #96]	@ (8001b14 <HAL_I2C_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a17      	ldr	r2, [pc, #92]	@ (8001b14 <HAL_I2C_MspInit+0x88>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <HAL_I2C_MspInit+0x88>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aca:	23c0      	movs	r3, #192	@ 0xc0
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ace:	2312      	movs	r3, #18
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ada:	2304      	movs	r3, #4
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <HAL_I2C_MspInit+0x8c>)
 8001ae6:	f001 fb03 	bl	80030f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_I2C_MspInit+0x88>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	4a08      	ldr	r2, [pc, #32]	@ (8001b14 <HAL_I2C_MspInit+0x88>)
 8001af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_I2C_MspInit+0x88>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	@ 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40005400 	.word	0x40005400
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020400 	.word	0x40020400

08001b1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	@ 0x30
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a33      	ldr	r2, [pc, #204]	@ (8001c08 <HAL_UART_MspInit+0xec>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d12d      	bne.n	8001b9a <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	4b32      	ldr	r3, [pc, #200]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	4a31      	ldr	r2, [pc, #196]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001b48:	f043 0310 	orr.w	r3, r3, #16
 8001b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a2a      	ldr	r2, [pc, #168]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b28      	ldr	r3, [pc, #160]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b84:	2303      	movs	r3, #3
 8001b86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b88:	2307      	movs	r3, #7
 8001b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	481f      	ldr	r0, [pc, #124]	@ (8001c10 <HAL_UART_MspInit+0xf4>)
 8001b94:	f001 faac 	bl	80030f0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b98:	e031      	b.n	8001bfe <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001c14 <HAL_UART_MspInit+0xf8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d12c      	bne.n	8001bfe <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	4a17      	ldr	r2, [pc, #92]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001bae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb4:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc8:	4a10      	ldr	r2, [pc, #64]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <HAL_UART_MspInit+0xf0>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bdc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bee:	2307      	movs	r3, #7
 8001bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4807      	ldr	r0, [pc, #28]	@ (8001c18 <HAL_UART_MspInit+0xfc>)
 8001bfa:	f001 fa79 	bl	80030f0 <HAL_GPIO_Init>
}
 8001bfe:	bf00      	nop
 8001c00:	3730      	adds	r7, #48	@ 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40011000 	.word	0x40011000
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40004800 	.word	0x40004800
 8001c18:	40020400 	.word	0x40020400

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <NMI_Handler+0x4>

08001c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <MemManage_Handler+0x4>

08001c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c72:	f000 f961 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <DMA2_Stream0_IRQHandler+0x10>)
 8001c82:	f000 ffcb 	bl	8002c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000023c 	.word	0x2000023c

08001c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return 1;
 8001c94:	2301      	movs	r3, #1
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_kill>:

int _kill(int pid, int sig)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001caa:	f004 f827 	bl	8005cfc <__errno>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2216      	movs	r2, #22
 8001cb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001cb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_exit>:

void _exit (int status)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ffe7 	bl	8001ca0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cd2:	bf00      	nop
 8001cd4:	e7fd      	b.n	8001cd2 <_exit+0x12>

08001cd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e00a      	b.n	8001cfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ce8:	f3af 8000 	nop.w
 8001cec:	4601      	mov	r1, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	60ba      	str	r2, [r7, #8]
 8001cf4:	b2ca      	uxtb	r2, r1
 8001cf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	dbf0      	blt.n	8001ce8 <_read+0x12>
  }

  return len;
 8001d06:	687b      	ldr	r3, [r7, #4]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e009      	b.n	8001d36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	60ba      	str	r2, [r7, #8]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3301      	adds	r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	dbf1      	blt.n	8001d22 <_write+0x12>
  }
  return len;
 8001d3e:	687b      	ldr	r3, [r7, #4]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_close>:

int _close(int file)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d70:	605a      	str	r2, [r3, #4]
  return 0;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_isatty>:

int _isatty(int file)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d88:	2301      	movs	r3, #1
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db8:	4a14      	ldr	r2, [pc, #80]	@ (8001e0c <_sbrk+0x5c>)
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <_sbrk+0x60>)
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <_sbrk+0x64>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <_sbrk+0x68>)
 8001dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d207      	bcs.n	8001df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001de0:	f003 ff8c 	bl	8005cfc <__errno>
 8001de4:	4603      	mov	r3, r0
 8001de6:	220c      	movs	r2, #12
 8001de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dee:	e009      	b.n	8001e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df0:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df6:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <_sbrk+0x64>)
 8001e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20020000 	.word	0x20020000
 8001e10:	00000400 	.word	0x00000400
 8001e14:	200003a8 	.word	0x200003a8
 8001e18:	20000500 	.word	0x20000500

08001e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <SystemInit+0x20>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e26:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <SystemInit+0x20>)
 8001e28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e44:	f7ff ffea 	bl	8001e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e48:	480c      	ldr	r0, [pc, #48]	@ (8001e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e4a:	490d      	ldr	r1, [pc, #52]	@ (8001e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e60:	4c0a      	ldr	r4, [pc, #40]	@ (8001e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f003 ff4b 	bl	8005d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e72:	f7ff f981 	bl	8001178 <main>
  bx  lr    
 8001e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e84:	08008334 	.word	0x08008334
  ldr r2, =_sbss
 8001e88:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e8c:	200004fc 	.word	0x200004fc

08001e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC_IRQHandler>
	...

08001e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e98:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <HAL_Init+0x40>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed4 <HAL_Init+0x40>)
 8001e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <HAL_Init+0x40>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <HAL_Init+0x40>)
 8001eaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <HAL_Init+0x40>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a07      	ldr	r2, [pc, #28]	@ (8001ed4 <HAL_Init+0x40>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f000 fd65 	bl	800298c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f000 f808 	bl	8001ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec8:	f7ff fd26 	bl	8001918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023c00 	.word	0x40023c00

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ee0:	4b12      	ldr	r3, [pc, #72]	@ (8001f2c <HAL_InitTick+0x54>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <HAL_InitTick+0x58>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fd7d 	bl	80029f6 <HAL_SYSTICK_Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00e      	b.n	8001f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b0f      	cmp	r3, #15
 8001f0a:	d80a      	bhi.n	8001f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f14:	f000 fd45 	bl	80029a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f18:	4a06      	ldr	r2, [pc, #24]	@ (8001f34 <HAL_InitTick+0x5c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e000      	b.n	8001f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000008 	.word	0x20000008
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <HAL_IncTick+0x20>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_IncTick+0x24>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	4a04      	ldr	r2, [pc, #16]	@ (8001f5c <HAL_IncTick+0x24>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	200003ac 	.word	0x200003ac

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	200003ac 	.word	0x200003ac

08001f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff ffee 	bl	8001f60 <HAL_GetTick>
 8001f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f90:	d005      	beq.n	8001f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_Delay+0x44>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f9e:	bf00      	nop
 8001fa0:	f7ff ffde 	bl	8001f60 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d8f7      	bhi.n	8001fa0 <HAL_Delay+0x28>
  {
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008

08001fc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e033      	b.n	800203e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fcc2 	bl	8001968 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002006:	f023 0302 	bic.w	r3, r3, #2
 800200a:	f043 0202 	orr.w	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fa6c 	bl	80024f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	@ 0x40
 800202e:	e001      	b.n	8002034 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_ADC_Start_DMA+0x22>
 8002066:	2302      	movs	r3, #2
 8002068:	e0eb      	b.n	8002242 <HAL_ADC_Start_DMA+0x1fa>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d018      	beq.n	80020b2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002090:	4b6e      	ldr	r3, [pc, #440]	@ (800224c <HAL_ADC_Start_DMA+0x204>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6e      	ldr	r2, [pc, #440]	@ (8002250 <HAL_ADC_Start_DMA+0x208>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0c9a      	lsrs	r2, r3, #18
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020a4:	e002      	b.n	80020ac <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f9      	bne.n	80020a6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020c0:	d107      	bne.n	80020d2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020d0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	f040 80a3 	bne.w	8002228 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800210c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800211c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002120:	d106      	bne.n	8002130 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f023 0206 	bic.w	r2, r3, #6
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44
 800212e:	e002      	b.n	8002136 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800213e:	4b45      	ldr	r3, [pc, #276]	@ (8002254 <HAL_ADC_Start_DMA+0x20c>)
 8002140:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002146:	4a44      	ldr	r2, [pc, #272]	@ (8002258 <HAL_ADC_Start_DMA+0x210>)
 8002148:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214e:	4a43      	ldr	r2, [pc, #268]	@ (800225c <HAL_ADC_Start_DMA+0x214>)
 8002150:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002156:	4a42      	ldr	r2, [pc, #264]	@ (8002260 <HAL_ADC_Start_DMA+0x218>)
 8002158:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002162:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002172:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002182:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	334c      	adds	r3, #76	@ 0x4c
 800218e:	4619      	mov	r1, r3
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f000 fcea 	bl	8002b6c <HAL_DMA_Start_IT>
 8002198:	4603      	mov	r3, r0
 800219a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d12a      	bne.n	80021fe <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002264 <HAL_ADC_Start_DMA+0x21c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d015      	beq.n	80021de <HAL_ADC_Start_DMA+0x196>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002268 <HAL_ADC_Start_DMA+0x220>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_Start_DMA+0x180>
 80021bc:	4b25      	ldr	r3, [pc, #148]	@ (8002254 <HAL_ADC_Start_DMA+0x20c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a27      	ldr	r2, [pc, #156]	@ (800226c <HAL_ADC_Start_DMA+0x224>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d136      	bne.n	8002240 <HAL_ADC_Start_DMA+0x1f8>
 80021d2:	4b20      	ldr	r3, [pc, #128]	@ (8002254 <HAL_ADC_Start_DMA+0x20c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d130      	bne.n	8002240 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d129      	bne.n	8002240 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	e020      	b.n	8002240 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a18      	ldr	r2, [pc, #96]	@ (8002264 <HAL_ADC_Start_DMA+0x21c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d11b      	bne.n	8002240 <HAL_ADC_Start_DMA+0x1f8>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d114      	bne.n	8002240 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	e00b      	b.n	8002240 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	f043 0210 	orr.w	r2, r3, #16
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002240:	7ffb      	ldrb	r3, [r7, #31]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3720      	adds	r7, #32
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000000 	.word	0x20000000
 8002250:	431bde83 	.word	0x431bde83
 8002254:	40012300 	.word	0x40012300
 8002258:	080026e9 	.word	0x080026e9
 800225c:	080027a3 	.word	0x080027a3
 8002260:	080027bf 	.word	0x080027bf
 8002264:	40012000 	.word	0x40012000
 8002268:	40012100 	.word	0x40012100
 800226c:	40012200 	.word	0x40012200

08002270 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1c>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e105      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x228>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	d925      	bls.n	8002324 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68d9      	ldr	r1, [r3, #12]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	2207      	movs	r2, #7
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43da      	mvns	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	400a      	ands	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68d9      	ldr	r1, [r3, #12]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	4603      	mov	r3, r0
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4403      	add	r3, r0
 8002316:	3b1e      	subs	r3, #30
 8002318:	409a      	lsls	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	e022      	b.n	800236a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	2207      	movs	r2, #7
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	400a      	ands	r2, r1
 8002346:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6919      	ldr	r1, [r3, #16]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	4603      	mov	r3, r0
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4403      	add	r3, r0
 8002360:	409a      	lsls	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b06      	cmp	r3, #6
 8002370:	d824      	bhi.n	80023bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	3b05      	subs	r3, #5
 8002384:	221f      	movs	r2, #31
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	400a      	ands	r2, r1
 8002392:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	3b05      	subs	r3, #5
 80023ae:	fa00 f203 	lsl.w	r2, r0, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80023ba:	e04c      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	d824      	bhi.n	800240e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	3b23      	subs	r3, #35	@ 0x23
 80023d6:	221f      	movs	r2, #31
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43da      	mvns	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	400a      	ands	r2, r1
 80023e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	3b23      	subs	r3, #35	@ 0x23
 8002400:	fa00 f203 	lsl.w	r2, r0, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	631a      	str	r2, [r3, #48]	@ 0x30
 800240c:	e023      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	3b41      	subs	r3, #65	@ 0x41
 8002420:	221f      	movs	r2, #31
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	400a      	ands	r2, r1
 800242e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	4618      	mov	r0, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3b41      	subs	r3, #65	@ 0x41
 800244a:	fa00 f203 	lsl.w	r2, r0, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002456:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <HAL_ADC_ConfigChannel+0x234>)
 8002458:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a21      	ldr	r2, [pc, #132]	@ (80024e4 <HAL_ADC_ConfigChannel+0x238>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d109      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1cc>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b12      	cmp	r3, #18
 800246a:	d105      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a19      	ldr	r2, [pc, #100]	@ (80024e4 <HAL_ADC_ConfigChannel+0x238>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d123      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x21e>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b10      	cmp	r3, #16
 8002488:	d003      	beq.n	8002492 <HAL_ADC_ConfigChannel+0x1e6>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b11      	cmp	r3, #17
 8002490:	d11b      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d111      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_ADC_ConfigChannel+0x23c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a10      	ldr	r2, [pc, #64]	@ (80024ec <HAL_ADC_ConfigChannel+0x240>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9a      	lsrs	r2, r3, #18
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024bc:	e002      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f9      	bne.n	80024be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40012300 	.word	0x40012300
 80024e4:	40012000 	.word	0x40012000
 80024e8:	20000000 	.word	0x20000000
 80024ec:	431bde83 	.word	0x431bde83

080024f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024f8:	4b79      	ldr	r3, [pc, #484]	@ (80026e0 <ADC_Init+0x1f0>)
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	431a      	orrs	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	021a      	lsls	r2, r3, #8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800256a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6899      	ldr	r1, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002582:	4a58      	ldr	r2, [pc, #352]	@ (80026e4 <ADC_Init+0x1f4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d022      	beq.n	80025ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002596:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6899      	ldr	r1, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	e00f      	b.n	80025ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0202 	bic.w	r2, r2, #2
 80025fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7e1b      	ldrb	r3, [r3, #24]
 8002608:	005a      	lsls	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01b      	beq.n	8002654 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800262a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800263a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002646:	3b01      	subs	r3, #1
 8002648:	035a      	lsls	r2, r3, #13
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	e007      	b.n	8002664 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002662:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002672:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	3b01      	subs	r3, #1
 8002680:	051a      	lsls	r2, r3, #20
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6899      	ldr	r1, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026a6:	025a      	lsls	r2, r3, #9
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6899      	ldr	r1, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	029a      	lsls	r2, r3, #10
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40012300 	.word	0x40012300
 80026e4:	0f000001 	.word	0x0f000001

080026e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d13c      	bne.n	800277c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d12b      	bne.n	8002774 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002720:	2b00      	cmp	r3, #0
 8002722:	d127      	bne.n	8002774 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800272e:	2b00      	cmp	r3, #0
 8002730:	d006      	beq.n	8002740 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800273c:	2b00      	cmp	r3, #0
 800273e:	d119      	bne.n	8002774 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0220 	bic.w	r2, r2, #32
 800274e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f043 0201 	orr.w	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff fd7b 	bl	8002270 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800277a:	e00e      	b.n	800279a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff fd85 	bl	8002298 <HAL_ADC_ErrorCallback>
}
 800278e:	e004      	b.n	800279a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff fd67 	bl	8002284 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2240      	movs	r2, #64	@ 0x40
 80027d0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	f043 0204 	orr.w	r2, r3, #4
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff fd5a 	bl	8002298 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800281c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281e:	4a04      	ldr	r2, [pc, #16]	@ (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	60d3      	str	r3, [r2, #12]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	@ (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4907      	ldr	r1, [pc, #28]	@ (8002888 <__NVIC_EnableIRQ+0x38>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	@ (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	@ (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	@ 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	@ 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002958:	d301      	bcc.n	800295e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295a:	2301      	movs	r3, #1
 800295c:	e00f      	b.n	800297e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295e:	4a0a      	ldr	r2, [pc, #40]	@ (8002988 <SysTick_Config+0x40>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3b01      	subs	r3, #1
 8002964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002966:	210f      	movs	r1, #15
 8002968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800296c:	f7ff ff8e 	bl	800288c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002970:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <SysTick_Config+0x40>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002976:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <SysTick_Config+0x40>)
 8002978:	2207      	movs	r2, #7
 800297a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	e000e010 	.word	0xe000e010

0800298c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ff29 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b4:	f7ff ff3e 	bl	8002834 <__NVIC_GetPriorityGrouping>
 80029b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f7ff ff8e 	bl	80028e0 <NVIC_EncodePriority>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff5d 	bl	800288c <__NVIC_SetPriority>
}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff31 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ffa2 	bl	8002948 <SysTick_Config>
 8002a04:	4603      	mov	r3, r0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff faa0 	bl	8001f60 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e099      	b.n	8002b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4c:	e00f      	b.n	8002a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4e:	f7ff fa87 	bl	8001f60 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d908      	bls.n	8002a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2203      	movs	r2, #3
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e078      	b.n	8002b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e8      	bne.n	8002a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4b38      	ldr	r3, [pc, #224]	@ (8002b68 <HAL_DMA_Init+0x158>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d107      	bne.n	8002ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f023 0307 	bic.w	r3, r3, #7
 8002aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d117      	bne.n	8002b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00e      	beq.n	8002b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fa6f 	bl	8002ff8 <DMA_CheckFifoParam>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2240      	movs	r2, #64	@ 0x40
 8002b24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e016      	b.n	8002b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa26 	bl	8002f8c <DMA_CalcBaseAndBitshift>
 8002b40:	4603      	mov	r3, r0
 8002b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b48:	223f      	movs	r2, #63	@ 0x3f
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	f010803f 	.word	0xf010803f

08002b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_DMA_Start_IT+0x26>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e040      	b.n	8002c14 <HAL_DMA_Start_IT+0xa8>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d12f      	bne.n	8002c06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f9b8 	bl	8002f30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc4:	223f      	movs	r2, #63	@ 0x3f
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0216 	orr.w	r2, r2, #22
 8002bda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0208 	orr.w	r2, r2, #8
 8002bf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e005      	b.n	8002c12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c28:	4b8e      	ldr	r3, [pc, #568]	@ (8002e64 <HAL_DMA_IRQHandler+0x248>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a8e      	ldr	r2, [pc, #568]	@ (8002e68 <HAL_DMA_IRQHandler+0x24c>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	0a9b      	lsrs	r3, r3, #10
 8002c34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	2208      	movs	r2, #8
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01a      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0204 	bic.w	r2, r2, #4
 8002c6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c74:	2208      	movs	r2, #8
 8002c76:	409a      	lsls	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d012      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002caa:	2201      	movs	r2, #1
 8002cac:	409a      	lsls	r2, r3
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	f043 0202 	orr.w	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	409a      	lsls	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d012      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cec:	f043 0204 	orr.w	r2, r3, #4
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d043      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d03c      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d16:	2210      	movs	r2, #16
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d018      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d108      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d024      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
 8002d4a:	e01f      	b.n	8002d8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01b      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
 8002d5c:	e016      	b.n	8002d8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d107      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0208 	bic.w	r2, r2, #8
 8002d7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d90:	2220      	movs	r2, #32
 8002d92:	409a      	lsls	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 808f 	beq.w	8002ebc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8087 	beq.w	8002ebc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	2220      	movs	r2, #32
 8002db4:	409a      	lsls	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b05      	cmp	r3, #5
 8002dc4:	d136      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0216 	bic.w	r2, r2, #22
 8002dd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002de4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d103      	bne.n	8002df6 <HAL_DMA_IRQHandler+0x1da>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d007      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0208 	bic.w	r2, r2, #8
 8002e04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	223f      	movs	r2, #63	@ 0x3f
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d07e      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
        }
        return;
 8002e32:	e079      	b.n	8002f28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d01d      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10d      	bne.n	8002e6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d031      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	4798      	blx	r3
 8002e60:	e02c      	b.n	8002ebc <HAL_DMA_IRQHandler+0x2a0>
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000
 8002e68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d023      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	4798      	blx	r3
 8002e7c:	e01e      	b.n	8002ebc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10f      	bne.n	8002eac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0210 	bic.w	r2, r2, #16
 8002e9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d032      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d022      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2205      	movs	r2, #5
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	3301      	adds	r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d307      	bcc.n	8002f04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f2      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x2cc>
 8002f02:	e000      	b.n	8002f06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
 8002f26:	e000      	b.n	8002f2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f28:	bf00      	nop
    }
  }
}
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b40      	cmp	r3, #64	@ 0x40
 8002f5c:	d108      	bne.n	8002f70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f6e:	e007      	b.n	8002f80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	60da      	str	r2, [r3, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	3b10      	subs	r3, #16
 8002f9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ff0 <DMA_CalcBaseAndBitshift+0x64>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fa6:	4a13      	ldr	r2, [pc, #76]	@ (8002ff4 <DMA_CalcBaseAndBitshift+0x68>)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4413      	add	r3, r2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d909      	bls.n	8002fce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fc2:	f023 0303 	bic.w	r3, r3, #3
 8002fc6:	1d1a      	adds	r2, r3, #4
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fcc:	e007      	b.n	8002fde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	aaaaaaab 	.word	0xaaaaaaab
 8002ff4:	08007f50 	.word	0x08007f50

08002ff8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11f      	bne.n	8003052 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b03      	cmp	r3, #3
 8003016:	d856      	bhi.n	80030c6 <DMA_CheckFifoParam+0xce>
 8003018:	a201      	add	r2, pc, #4	@ (adr r2, 8003020 <DMA_CheckFifoParam+0x28>)
 800301a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301e:	bf00      	nop
 8003020:	08003031 	.word	0x08003031
 8003024:	08003043 	.word	0x08003043
 8003028:	08003031 	.word	0x08003031
 800302c:	080030c7 	.word	0x080030c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003034:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d046      	beq.n	80030ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003040:	e043      	b.n	80030ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003046:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800304a:	d140      	bne.n	80030ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003050:	e03d      	b.n	80030ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800305a:	d121      	bne.n	80030a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d837      	bhi.n	80030d2 <DMA_CheckFifoParam+0xda>
 8003062:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <DMA_CheckFifoParam+0x70>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	08003079 	.word	0x08003079
 800306c:	0800307f 	.word	0x0800307f
 8003070:	08003079 	.word	0x08003079
 8003074:	08003091 	.word	0x08003091
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      break;
 800307c:	e030      	b.n	80030e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d025      	beq.n	80030d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308e:	e022      	b.n	80030d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003098:	d11f      	bne.n	80030da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800309e:	e01c      	b.n	80030da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d903      	bls.n	80030ae <DMA_CheckFifoParam+0xb6>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d003      	beq.n	80030b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030ac:	e018      	b.n	80030e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
      break;
 80030b2:	e015      	b.n	80030e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      break;
 80030c4:	e00b      	b.n	80030de <DMA_CheckFifoParam+0xe6>
      break;
 80030c6:	bf00      	nop
 80030c8:	e00a      	b.n	80030e0 <DMA_CheckFifoParam+0xe8>
      break;
 80030ca:	bf00      	nop
 80030cc:	e008      	b.n	80030e0 <DMA_CheckFifoParam+0xe8>
      break;
 80030ce:	bf00      	nop
 80030d0:	e006      	b.n	80030e0 <DMA_CheckFifoParam+0xe8>
      break;
 80030d2:	bf00      	nop
 80030d4:	e004      	b.n	80030e0 <DMA_CheckFifoParam+0xe8>
      break;
 80030d6:	bf00      	nop
 80030d8:	e002      	b.n	80030e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <DMA_CheckFifoParam+0xe8>
      break;
 80030de:	bf00      	nop
    }
  } 
  
  return status; 
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop

080030f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	@ 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	e16b      	b.n	80033e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800310c:	2201      	movs	r2, #1
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	429a      	cmp	r2, r3
 8003126:	f040 815a 	bne.w	80033de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d005      	beq.n	8003142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313e:	2b02      	cmp	r3, #2
 8003140:	d130      	bne.n	80031a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	2203      	movs	r2, #3
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003178:	2201      	movs	r2, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 0201 	and.w	r2, r3, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d017      	beq.n	80031e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d123      	bne.n	8003234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	08da      	lsrs	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3208      	adds	r2, #8
 80031f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	08da      	lsrs	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3208      	adds	r2, #8
 800322e:	69b9      	ldr	r1, [r7, #24]
 8003230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0203 	and.w	r2, r3, #3
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80b4 	beq.w	80033de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4b60      	ldr	r3, [pc, #384]	@ (80033fc <HAL_GPIO_Init+0x30c>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	4a5f      	ldr	r2, [pc, #380]	@ (80033fc <HAL_GPIO_Init+0x30c>)
 8003280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003284:	6453      	str	r3, [r2, #68]	@ 0x44
 8003286:	4b5d      	ldr	r3, [pc, #372]	@ (80033fc <HAL_GPIO_Init+0x30c>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003292:	4a5b      	ldr	r2, [pc, #364]	@ (8003400 <HAL_GPIO_Init+0x310>)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	3302      	adds	r3, #2
 800329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	220f      	movs	r2, #15
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a52      	ldr	r2, [pc, #328]	@ (8003404 <HAL_GPIO_Init+0x314>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d02b      	beq.n	8003316 <HAL_GPIO_Init+0x226>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a51      	ldr	r2, [pc, #324]	@ (8003408 <HAL_GPIO_Init+0x318>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d025      	beq.n	8003312 <HAL_GPIO_Init+0x222>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a50      	ldr	r2, [pc, #320]	@ (800340c <HAL_GPIO_Init+0x31c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01f      	beq.n	800330e <HAL_GPIO_Init+0x21e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003410 <HAL_GPIO_Init+0x320>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d019      	beq.n	800330a <HAL_GPIO_Init+0x21a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003414 <HAL_GPIO_Init+0x324>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_GPIO_Init+0x216>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003418 <HAL_GPIO_Init+0x328>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00d      	beq.n	8003302 <HAL_GPIO_Init+0x212>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4c      	ldr	r2, [pc, #304]	@ (800341c <HAL_GPIO_Init+0x32c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d007      	beq.n	80032fe <HAL_GPIO_Init+0x20e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003420 <HAL_GPIO_Init+0x330>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_GPIO_Init+0x20a>
 80032f6:	2307      	movs	r3, #7
 80032f8:	e00e      	b.n	8003318 <HAL_GPIO_Init+0x228>
 80032fa:	2308      	movs	r3, #8
 80032fc:	e00c      	b.n	8003318 <HAL_GPIO_Init+0x228>
 80032fe:	2306      	movs	r3, #6
 8003300:	e00a      	b.n	8003318 <HAL_GPIO_Init+0x228>
 8003302:	2305      	movs	r3, #5
 8003304:	e008      	b.n	8003318 <HAL_GPIO_Init+0x228>
 8003306:	2304      	movs	r3, #4
 8003308:	e006      	b.n	8003318 <HAL_GPIO_Init+0x228>
 800330a:	2303      	movs	r3, #3
 800330c:	e004      	b.n	8003318 <HAL_GPIO_Init+0x228>
 800330e:	2302      	movs	r3, #2
 8003310:	e002      	b.n	8003318 <HAL_GPIO_Init+0x228>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_GPIO_Init+0x228>
 8003316:	2300      	movs	r3, #0
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	f002 0203 	and.w	r2, r2, #3
 800331e:	0092      	lsls	r2, r2, #2
 8003320:	4093      	lsls	r3, r2
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003328:	4935      	ldr	r1, [pc, #212]	@ (8003400 <HAL_GPIO_Init+0x310>)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	3302      	adds	r3, #2
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003336:	4b3b      	ldr	r3, [pc, #236]	@ (8003424 <HAL_GPIO_Init+0x334>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	43db      	mvns	r3, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4013      	ands	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800335a:	4a32      	ldr	r2, [pc, #200]	@ (8003424 <HAL_GPIO_Init+0x334>)
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003360:	4b30      	ldr	r3, [pc, #192]	@ (8003424 <HAL_GPIO_Init+0x334>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003384:	4a27      	ldr	r2, [pc, #156]	@ (8003424 <HAL_GPIO_Init+0x334>)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800338a:	4b26      	ldr	r3, [pc, #152]	@ (8003424 <HAL_GPIO_Init+0x334>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003424 <HAL_GPIO_Init+0x334>)
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003424 <HAL_GPIO_Init+0x334>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033d8:	4a12      	ldr	r2, [pc, #72]	@ (8003424 <HAL_GPIO_Init+0x334>)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3301      	adds	r3, #1
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	2b0f      	cmp	r3, #15
 80033e8:	f67f ae90 	bls.w	800310c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3724      	adds	r7, #36	@ 0x24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	40013800 	.word	0x40013800
 8003404:	40020000 	.word	0x40020000
 8003408:	40020400 	.word	0x40020400
 800340c:	40020800 	.word	0x40020800
 8003410:	40020c00 	.word	0x40020c00
 8003414:	40021000 	.word	0x40021000
 8003418:	40021400 	.word	0x40021400
 800341c:	40021800 	.word	0x40021800
 8003420:	40021c00 	.word	0x40021c00
 8003424:	40013c00 	.word	0x40013c00

08003428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	807b      	strh	r3, [r7, #2]
 8003434:	4613      	mov	r3, r2
 8003436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003438:	787b      	ldrb	r3, [r7, #1]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800343e:	887a      	ldrh	r2, [r7, #2]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003444:	e003      	b.n	800344e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003446:	887b      	ldrh	r3, [r7, #2]
 8003448:	041a      	lsls	r2, r3, #16
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	619a      	str	r2, [r3, #24]
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e12b      	b.n	80036c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fe fb02 	bl	8001a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2224      	movs	r2, #36	@ 0x24
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034c0:	f001 f8da 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 80034c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4a81      	ldr	r2, [pc, #516]	@ (80036d0 <HAL_I2C_Init+0x274>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d807      	bhi.n	80034e0 <HAL_I2C_Init+0x84>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a80      	ldr	r2, [pc, #512]	@ (80036d4 <HAL_I2C_Init+0x278>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	bf94      	ite	ls
 80034d8:	2301      	movls	r3, #1
 80034da:	2300      	movhi	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e006      	b.n	80034ee <HAL_I2C_Init+0x92>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a7d      	ldr	r2, [pc, #500]	@ (80036d8 <HAL_I2C_Init+0x27c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bf94      	ite	ls
 80034e8:	2301      	movls	r3, #1
 80034ea:	2300      	movhi	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e0e7      	b.n	80036c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a78      	ldr	r2, [pc, #480]	@ (80036dc <HAL_I2C_Init+0x280>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	0c9b      	lsrs	r3, r3, #18
 8003500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a6a      	ldr	r2, [pc, #424]	@ (80036d0 <HAL_I2C_Init+0x274>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d802      	bhi.n	8003530 <HAL_I2C_Init+0xd4>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3301      	adds	r3, #1
 800352e:	e009      	b.n	8003544 <HAL_I2C_Init+0xe8>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	4a69      	ldr	r2, [pc, #420]	@ (80036e0 <HAL_I2C_Init+0x284>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	099b      	lsrs	r3, r3, #6
 8003542:	3301      	adds	r3, #1
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	430b      	orrs	r3, r1
 800354a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003556:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	495c      	ldr	r1, [pc, #368]	@ (80036d0 <HAL_I2C_Init+0x274>)
 8003560:	428b      	cmp	r3, r1
 8003562:	d819      	bhi.n	8003598 <HAL_I2C_Init+0x13c>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e59      	subs	r1, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003572:	1c59      	adds	r1, r3, #1
 8003574:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003578:	400b      	ands	r3, r1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_I2C_Init+0x138>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1e59      	subs	r1, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fbb1 f3f3 	udiv	r3, r1, r3
 800358c:	3301      	adds	r3, #1
 800358e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003592:	e051      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 8003594:	2304      	movs	r3, #4
 8003596:	e04f      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d111      	bne.n	80035c4 <HAL_I2C_Init+0x168>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1e58      	subs	r0, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	440b      	add	r3, r1
 80035ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e012      	b.n	80035ea <HAL_I2C_Init+0x18e>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1e58      	subs	r0, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	0099      	lsls	r1, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Init+0x196>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e022      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10e      	bne.n	8003618 <HAL_I2C_Init+0x1bc>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1e58      	subs	r0, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	440b      	add	r3, r1
 8003608:	fbb0 f3f3 	udiv	r3, r0, r3
 800360c:	3301      	adds	r3, #1
 800360e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003616:	e00f      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1e58      	subs	r0, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	0099      	lsls	r1, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	fbb0 f3f3 	udiv	r3, r0, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	6809      	ldr	r1, [r1, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69da      	ldr	r2, [r3, #28]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003666:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6911      	ldr	r1, [r2, #16]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68d2      	ldr	r2, [r2, #12]
 8003672:	4311      	orrs	r1, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	430b      	orrs	r3, r1
 800367a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	000186a0 	.word	0x000186a0
 80036d4:	001e847f 	.word	0x001e847f
 80036d8:	003d08ff 	.word	0x003d08ff
 80036dc:	431bde83 	.word	0x431bde83
 80036e0:	10624dd3 	.word	0x10624dd3

080036e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	461a      	mov	r2, r3
 80036f0:	460b      	mov	r3, r1
 80036f2:	817b      	strh	r3, [r7, #10]
 80036f4:	4613      	mov	r3, r2
 80036f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036f8:	f7fe fc32 	bl	8001f60 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	f040 80e0 	bne.w	80038cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2319      	movs	r3, #25
 8003712:	2201      	movs	r2, #1
 8003714:	4970      	ldr	r1, [pc, #448]	@ (80038d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f964 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
 8003724:	e0d3      	b.n	80038ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_I2C_Master_Transmit+0x50>
 8003730:	2302      	movs	r3, #2
 8003732:	e0cc      	b.n	80038ce <HAL_I2C_Master_Transmit+0x1ea>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d007      	beq.n	800375a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003768:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2221      	movs	r2, #33	@ 0x21
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2210      	movs	r2, #16
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	893a      	ldrh	r2, [r7, #8]
 800378a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4a50      	ldr	r2, [pc, #320]	@ (80038dc <HAL_I2C_Master_Transmit+0x1f8>)
 800379a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800379c:	8979      	ldrh	r1, [r7, #10]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	6a3a      	ldr	r2, [r7, #32]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f89c 	bl	80038e0 <I2C_MasterRequestWrite>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e08d      	b.n	80038ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b2:	2300      	movs	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80037c8:	e066      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	6a39      	ldr	r1, [r7, #32]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fa22 	bl	8003c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00d      	beq.n	80037f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d107      	bne.n	80037f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e06b      	b.n	80038ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	781a      	ldrb	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d11b      	bne.n	800386c <HAL_I2C_Master_Transmit+0x188>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	d017      	beq.n	800386c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	781a      	ldrb	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003864:	3b01      	subs	r3, #1
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	6a39      	ldr	r1, [r7, #32]
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fa19 	bl	8003ca8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00d      	beq.n	8003898 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	2b04      	cmp	r3, #4
 8003882:	d107      	bne.n	8003894 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003892:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e01a      	b.n	80038ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389c:	2b00      	cmp	r3, #0
 800389e:	d194      	bne.n	80037ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	00100002 	.word	0x00100002
 80038dc:	ffff0000 	.word	0xffff0000

080038e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	460b      	mov	r3, r1
 80038ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d006      	beq.n	800390a <I2C_MasterRequestWrite+0x2a>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d003      	beq.n	800390a <I2C_MasterRequestWrite+0x2a>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003908:	d108      	bne.n	800391c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e00b      	b.n	8003934 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	2b12      	cmp	r3, #18
 8003922:	d107      	bne.n	8003934 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003932:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f84f 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800395a:	d103      	bne.n	8003964 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003962:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e035      	b.n	80039d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003970:	d108      	bne.n	8003984 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003972:	897b      	ldrh	r3, [r7, #10]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003980:	611a      	str	r2, [r3, #16]
 8003982:	e01b      	b.n	80039bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003984:	897b      	ldrh	r3, [r7, #10]
 8003986:	11db      	asrs	r3, r3, #7
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 0306 	and.w	r3, r3, #6
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f063 030f 	orn	r3, r3, #15
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	490e      	ldr	r1, [pc, #56]	@ (80039dc <I2C_MasterRequestWrite+0xfc>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f898 	bl	8003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e010      	b.n	80039d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039b2:	897b      	ldrh	r3, [r7, #10]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4907      	ldr	r1, [pc, #28]	@ (80039e0 <I2C_MasterRequestWrite+0x100>)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f888 	bl	8003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	00010008 	.word	0x00010008
 80039e0:	00010002 	.word	0x00010002

080039e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f4:	e048      	b.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039fc:	d044      	beq.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fe:	f7fe faaf 	bl	8001f60 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d139      	bne.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d10d      	bne.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	43da      	mvns	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	e00c      	b.n	8003a54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	43da      	mvns	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4013      	ands	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d116      	bne.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	f043 0220 	orr.w	r2, r3, #32
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e023      	b.n	8003ad0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	0c1b      	lsrs	r3, r3, #16
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d10d      	bne.n	8003aae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	e00c      	b.n	8003ac8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d093      	beq.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ae6:	e071      	b.n	8003bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af6:	d123      	bne.n	8003b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	f043 0204 	orr.w	r2, r3, #4
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e067      	b.n	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b46:	d041      	beq.n	8003bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b48:	f7fe fa0a 	bl	8001f60 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d302      	bcc.n	8003b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d136      	bne.n	8003bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d10c      	bne.n	8003b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf14      	ite	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	2300      	moveq	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	e00b      	b.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	43da      	mvns	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e021      	b.n	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	0c1b      	lsrs	r3, r3, #16
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10c      	bne.n	8003bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4013      	ands	r3, r2
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e00b      	b.n	8003c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f47f af6d 	bne.w	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c24:	e034      	b.n	8003c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f886 	bl	8003d38 <I2C_IsAcknowledgeFailed>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e034      	b.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c3c:	d028      	beq.n	8003c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	f7fe f98f 	bl	8001f60 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d11d      	bne.n	8003c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5e:	2b80      	cmp	r3, #128	@ 0x80
 8003c60:	d016      	beq.n	8003c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	f043 0220 	orr.w	r2, r3, #32
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e007      	b.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9a:	2b80      	cmp	r3, #128	@ 0x80
 8003c9c:	d1c3      	bne.n	8003c26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cb4:	e034      	b.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f83e 	bl	8003d38 <I2C_IsAcknowledgeFailed>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e034      	b.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ccc:	d028      	beq.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fe f947 	bl	8001f60 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11d      	bne.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d016      	beq.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	f043 0220 	orr.w	r2, r3, #32
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e007      	b.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d1c3      	bne.n	8003cb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d4e:	d11b      	bne.n	8003d88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	f043 0204 	orr.w	r2, r3, #4
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e267      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d075      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003db6:	4b88      	ldr	r3, [pc, #544]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d00c      	beq.n	8003ddc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc2:	4b85      	ldr	r3, [pc, #532]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d112      	bne.n	8003df4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dce:	4b82      	ldr	r3, [pc, #520]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dda:	d10b      	bne.n	8003df4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ddc:	4b7e      	ldr	r3, [pc, #504]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d05b      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x108>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d157      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e242      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCC_OscConfig+0x74>
 8003dfe:	4b76      	ldr	r3, [pc, #472]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a75      	ldr	r2, [pc, #468]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	e01d      	b.n	8003e48 <HAL_RCC_OscConfig+0xb0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x98>
 8003e16:	4b70      	ldr	r3, [pc, #448]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a6f      	ldr	r2, [pc, #444]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	4b6d      	ldr	r3, [pc, #436]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a6c      	ldr	r2, [pc, #432]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCC_OscConfig+0xb0>
 8003e30:	4b69      	ldr	r3, [pc, #420]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a68      	ldr	r2, [pc, #416]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	4b66      	ldr	r3, [pc, #408]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a65      	ldr	r2, [pc, #404]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d013      	beq.n	8003e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fe f886 	bl	8001f60 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e58:	f7fe f882 	bl	8001f60 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	@ 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e207      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0xc0>
 8003e76:	e014      	b.n	8003ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fe f872 	bl	8001f60 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fe f86e 	bl	8001f60 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	@ 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e1f3      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e92:	4b51      	ldr	r3, [pc, #324]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0xe8>
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d063      	beq.n	8003f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003eae:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00b      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eba:	4b47      	ldr	r3, [pc, #284]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d11c      	bne.n	8003f00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec6:	4b44      	ldr	r3, [pc, #272]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d116      	bne.n	8003f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed2:	4b41      	ldr	r3, [pc, #260]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d005      	beq.n	8003eea <HAL_RCC_OscConfig+0x152>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d001      	beq.n	8003eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e1c7      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eea:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4937      	ldr	r1, [pc, #220]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efe:	e03a      	b.n	8003f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d020      	beq.n	8003f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f08:	4b34      	ldr	r3, [pc, #208]	@ (8003fdc <HAL_RCC_OscConfig+0x244>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fe f827 	bl	8001f60 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f16:	f7fe f823 	bl	8001f60 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e1a8      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f28:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f34:	4b28      	ldr	r3, [pc, #160]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4925      	ldr	r1, [pc, #148]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	600b      	str	r3, [r1, #0]
 8003f48:	e015      	b.n	8003f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4a:	4b24      	ldr	r3, [pc, #144]	@ (8003fdc <HAL_RCC_OscConfig+0x244>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe f806 	bl	8001f60 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f58:	f7fe f802 	bl	8001f60 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e187      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d036      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8a:	4b15      	ldr	r3, [pc, #84]	@ (8003fe0 <HAL_RCC_OscConfig+0x248>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f90:	f7fd ffe6 	bl	8001f60 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f98:	f7fd ffe2 	bl	8001f60 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e167      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003faa:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <HAL_RCC_OscConfig+0x240>)
 8003fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x200>
 8003fb6:	e01b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb8:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <HAL_RCC_OscConfig+0x248>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fbe:	f7fd ffcf 	bl	8001f60 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc4:	e00e      	b.n	8003fe4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc6:	f7fd ffcb 	bl	8001f60 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d907      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e150      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	42470000 	.word	0x42470000
 8003fe0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe4:	4b88      	ldr	r3, [pc, #544]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1ea      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8097 	beq.w	800412c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004002:	4b81      	ldr	r3, [pc, #516]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10f      	bne.n	800402e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	4b7d      	ldr	r3, [pc, #500]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	4a7c      	ldr	r2, [pc, #496]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800401c:	6413      	str	r3, [r2, #64]	@ 0x40
 800401e:	4b7a      	ldr	r3, [pc, #488]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402a:	2301      	movs	r3, #1
 800402c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402e:	4b77      	ldr	r3, [pc, #476]	@ (800420c <HAL_RCC_OscConfig+0x474>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d118      	bne.n	800406c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800403a:	4b74      	ldr	r3, [pc, #464]	@ (800420c <HAL_RCC_OscConfig+0x474>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a73      	ldr	r2, [pc, #460]	@ (800420c <HAL_RCC_OscConfig+0x474>)
 8004040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004046:	f7fd ff8b 	bl	8001f60 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800404e:	f7fd ff87 	bl	8001f60 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e10c      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	4b6a      	ldr	r3, [pc, #424]	@ (800420c <HAL_RCC_OscConfig+0x474>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0f0      	beq.n	800404e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d106      	bne.n	8004082 <HAL_RCC_OscConfig+0x2ea>
 8004074:	4b64      	ldr	r3, [pc, #400]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004078:	4a63      	ldr	r2, [pc, #396]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004080:	e01c      	b.n	80040bc <HAL_RCC_OscConfig+0x324>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b05      	cmp	r3, #5
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x30c>
 800408a:	4b5f      	ldr	r3, [pc, #380]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408e:	4a5e      	ldr	r2, [pc, #376]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	6713      	str	r3, [r2, #112]	@ 0x70
 8004096:	4b5c      	ldr	r3, [pc, #368]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409a:	4a5b      	ldr	r2, [pc, #364]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a2:	e00b      	b.n	80040bc <HAL_RCC_OscConfig+0x324>
 80040a4:	4b58      	ldr	r3, [pc, #352]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a8:	4a57      	ldr	r2, [pc, #348]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b0:	4b55      	ldr	r3, [pc, #340]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b4:	4a54      	ldr	r2, [pc, #336]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 80040b6:	f023 0304 	bic.w	r3, r3, #4
 80040ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d015      	beq.n	80040f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c4:	f7fd ff4c 	bl	8001f60 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040cc:	f7fd ff48 	bl	8001f60 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e0cb      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e2:	4b49      	ldr	r3, [pc, #292]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0ee      	beq.n	80040cc <HAL_RCC_OscConfig+0x334>
 80040ee:	e014      	b.n	800411a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f0:	f7fd ff36 	bl	8001f60 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f6:	e00a      	b.n	800410e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f8:	f7fd ff32 	bl	8001f60 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e0b5      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410e:	4b3e      	ldr	r3, [pc, #248]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1ee      	bne.n	80040f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d105      	bne.n	800412c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004120:	4b39      	ldr	r3, [pc, #228]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8004122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004124:	4a38      	ldr	r2, [pc, #224]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8004126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800412a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80a1 	beq.w	8004278 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004136:	4b34      	ldr	r3, [pc, #208]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b08      	cmp	r3, #8
 8004140:	d05c      	beq.n	80041fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d141      	bne.n	80041ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414a:	4b31      	ldr	r3, [pc, #196]	@ (8004210 <HAL_RCC_OscConfig+0x478>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fd ff06 	bl	8001f60 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fd ff02 	bl	8001f60 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e087      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	4b27      	ldr	r3, [pc, #156]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69da      	ldr	r2, [r3, #28]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	019b      	lsls	r3, r3, #6
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	085b      	lsrs	r3, r3, #1
 800418e:	3b01      	subs	r3, #1
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	061b      	lsls	r3, r3, #24
 800419a:	491b      	ldr	r1, [pc, #108]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 800419c:	4313      	orrs	r3, r2
 800419e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <HAL_RCC_OscConfig+0x478>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a6:	f7fd fedb 	bl	8001f60 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ae:	f7fd fed7 	bl	8001f60 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e05c      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c0:	4b11      	ldr	r3, [pc, #68]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0f0      	beq.n	80041ae <HAL_RCC_OscConfig+0x416>
 80041cc:	e054      	b.n	8004278 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ce:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <HAL_RCC_OscConfig+0x478>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fd fec4 	bl	8001f60 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fd fec0 	bl	8001f60 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e045      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_RCC_OscConfig+0x470>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x444>
 80041fa:	e03d      	b.n	8004278 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d107      	bne.n	8004214 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e038      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
 8004208:	40023800 	.word	0x40023800
 800420c:	40007000 	.word	0x40007000
 8004210:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004214:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <HAL_RCC_OscConfig+0x4ec>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d028      	beq.n	8004274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d121      	bne.n	8004274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d11a      	bne.n	8004274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800424a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800424c:	4293      	cmp	r3, r2
 800424e:	d111      	bne.n	8004274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	3b01      	subs	r3, #1
 800425e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d107      	bne.n	8004274 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800

08004288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0cc      	b.n	8004436 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b68      	ldr	r3, [pc, #416]	@ (8004440 <HAL_RCC_ClockConfig+0x1b8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d90c      	bls.n	80042c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b65      	ldr	r3, [pc, #404]	@ (8004440 <HAL_RCC_ClockConfig+0x1b8>)
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b2:	4b63      	ldr	r3, [pc, #396]	@ (8004440 <HAL_RCC_ClockConfig+0x1b8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d001      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0b8      	b.n	8004436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d020      	beq.n	8004312 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042dc:	4b59      	ldr	r3, [pc, #356]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	4a58      	ldr	r2, [pc, #352]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f4:	4b53      	ldr	r3, [pc, #332]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	4a52      	ldr	r2, [pc, #328]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004300:	4b50      	ldr	r3, [pc, #320]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	494d      	ldr	r1, [pc, #308]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d044      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d107      	bne.n	8004336 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004326:	4b47      	ldr	r3, [pc, #284]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d119      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e07f      	b.n	8004436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d003      	beq.n	8004346 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004342:	2b03      	cmp	r3, #3
 8004344:	d107      	bne.n	8004356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004346:	4b3f      	ldr	r3, [pc, #252]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e06f      	b.n	8004436 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004356:	4b3b      	ldr	r3, [pc, #236]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e067      	b.n	8004436 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004366:	4b37      	ldr	r3, [pc, #220]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f023 0203 	bic.w	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4934      	ldr	r1, [pc, #208]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	4313      	orrs	r3, r2
 8004376:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004378:	f7fd fdf2 	bl	8001f60 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	e00a      	b.n	8004396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004380:	f7fd fdee 	bl	8001f60 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e04f      	b.n	8004436 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	4b2b      	ldr	r3, [pc, #172]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 020c 	and.w	r2, r3, #12
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d1eb      	bne.n	8004380 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a8:	4b25      	ldr	r3, [pc, #148]	@ (8004440 <HAL_RCC_ClockConfig+0x1b8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d20c      	bcs.n	80043d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b22      	ldr	r3, [pc, #136]	@ (8004440 <HAL_RCC_ClockConfig+0x1b8>)
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b20      	ldr	r3, [pc, #128]	@ (8004440 <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e032      	b.n	8004436 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043dc:	4b19      	ldr	r3, [pc, #100]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4916      	ldr	r1, [pc, #88]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fa:	4b12      	ldr	r3, [pc, #72]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	490e      	ldr	r1, [pc, #56]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	4313      	orrs	r3, r2
 800440c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800440e:	f000 f821 	bl	8004454 <HAL_RCC_GetSysClockFreq>
 8004412:	4602      	mov	r2, r0
 8004414:	4b0b      	ldr	r3, [pc, #44]	@ (8004444 <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	490a      	ldr	r1, [pc, #40]	@ (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 8004420:	5ccb      	ldrb	r3, [r1, r3]
 8004422:	fa22 f303 	lsr.w	r3, r2, r3
 8004426:	4a09      	ldr	r2, [pc, #36]	@ (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800442a:	4b09      	ldr	r3, [pc, #36]	@ (8004450 <HAL_RCC_ClockConfig+0x1c8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7fd fd52 	bl	8001ed8 <HAL_InitTick>

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40023c00 	.word	0x40023c00
 8004444:	40023800 	.word	0x40023800
 8004448:	08007f38 	.word	0x08007f38
 800444c:	20000000 	.word	0x20000000
 8004450:	20000004 	.word	0x20000004

08004454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004458:	b094      	sub	sp, #80	@ 0x50
 800445a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800446c:	4b79      	ldr	r3, [pc, #484]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x200>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	2b08      	cmp	r3, #8
 8004476:	d00d      	beq.n	8004494 <HAL_RCC_GetSysClockFreq+0x40>
 8004478:	2b08      	cmp	r3, #8
 800447a:	f200 80e1 	bhi.w	8004640 <HAL_RCC_GetSysClockFreq+0x1ec>
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0x34>
 8004482:	2b04      	cmp	r3, #4
 8004484:	d003      	beq.n	800448e <HAL_RCC_GetSysClockFreq+0x3a>
 8004486:	e0db      	b.n	8004640 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004488:	4b73      	ldr	r3, [pc, #460]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x204>)
 800448a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800448c:	e0db      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800448e:	4b73      	ldr	r3, [pc, #460]	@ (800465c <HAL_RCC_GetSysClockFreq+0x208>)
 8004490:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004492:	e0d8      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004494:	4b6f      	ldr	r3, [pc, #444]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x200>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800449c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800449e:	4b6d      	ldr	r3, [pc, #436]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x200>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d063      	beq.n	8004572 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	099b      	lsrs	r3, r3, #6
 80044b0:	2200      	movs	r2, #0
 80044b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80044be:	2300      	movs	r3, #0
 80044c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044c6:	4622      	mov	r2, r4
 80044c8:	462b      	mov	r3, r5
 80044ca:	f04f 0000 	mov.w	r0, #0
 80044ce:	f04f 0100 	mov.w	r1, #0
 80044d2:	0159      	lsls	r1, r3, #5
 80044d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044d8:	0150      	lsls	r0, r2, #5
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4621      	mov	r1, r4
 80044e0:	1a51      	subs	r1, r2, r1
 80044e2:	6139      	str	r1, [r7, #16]
 80044e4:	4629      	mov	r1, r5
 80044e6:	eb63 0301 	sbc.w	r3, r3, r1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044f8:	4659      	mov	r1, fp
 80044fa:	018b      	lsls	r3, r1, #6
 80044fc:	4651      	mov	r1, sl
 80044fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004502:	4651      	mov	r1, sl
 8004504:	018a      	lsls	r2, r1, #6
 8004506:	4651      	mov	r1, sl
 8004508:	ebb2 0801 	subs.w	r8, r2, r1
 800450c:	4659      	mov	r1, fp
 800450e:	eb63 0901 	sbc.w	r9, r3, r1
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800451e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004526:	4690      	mov	r8, r2
 8004528:	4699      	mov	r9, r3
 800452a:	4623      	mov	r3, r4
 800452c:	eb18 0303 	adds.w	r3, r8, r3
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	462b      	mov	r3, r5
 8004534:	eb49 0303 	adc.w	r3, r9, r3
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004546:	4629      	mov	r1, r5
 8004548:	024b      	lsls	r3, r1, #9
 800454a:	4621      	mov	r1, r4
 800454c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004550:	4621      	mov	r1, r4
 8004552:	024a      	lsls	r2, r1, #9
 8004554:	4610      	mov	r0, r2
 8004556:	4619      	mov	r1, r3
 8004558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800455a:	2200      	movs	r2, #0
 800455c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800455e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004564:	f7fc fb20 	bl	8000ba8 <__aeabi_uldivmod>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4613      	mov	r3, r2
 800456e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004570:	e058      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004572:	4b38      	ldr	r3, [pc, #224]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x200>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	2200      	movs	r2, #0
 800457a:	4618      	mov	r0, r3
 800457c:	4611      	mov	r1, r2
 800457e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004582:	623b      	str	r3, [r7, #32]
 8004584:	2300      	movs	r3, #0
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
 8004588:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800458c:	4642      	mov	r2, r8
 800458e:	464b      	mov	r3, r9
 8004590:	f04f 0000 	mov.w	r0, #0
 8004594:	f04f 0100 	mov.w	r1, #0
 8004598:	0159      	lsls	r1, r3, #5
 800459a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800459e:	0150      	lsls	r0, r2, #5
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4641      	mov	r1, r8
 80045a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80045aa:	4649      	mov	r1, r9
 80045ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045c4:	ebb2 040a 	subs.w	r4, r2, sl
 80045c8:	eb63 050b 	sbc.w	r5, r3, fp
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	00eb      	lsls	r3, r5, #3
 80045d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045da:	00e2      	lsls	r2, r4, #3
 80045dc:	4614      	mov	r4, r2
 80045de:	461d      	mov	r5, r3
 80045e0:	4643      	mov	r3, r8
 80045e2:	18e3      	adds	r3, r4, r3
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	464b      	mov	r3, r9
 80045e8:	eb45 0303 	adc.w	r3, r5, r3
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045fa:	4629      	mov	r1, r5
 80045fc:	028b      	lsls	r3, r1, #10
 80045fe:	4621      	mov	r1, r4
 8004600:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004604:	4621      	mov	r1, r4
 8004606:	028a      	lsls	r2, r1, #10
 8004608:	4610      	mov	r0, r2
 800460a:	4619      	mov	r1, r3
 800460c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800460e:	2200      	movs	r2, #0
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	61fa      	str	r2, [r7, #28]
 8004614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004618:	f7fc fac6 	bl	8000ba8 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4613      	mov	r3, r2
 8004622:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004624:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <HAL_RCC_GetSysClockFreq+0x200>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	3301      	adds	r3, #1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004634:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800463e:	e002      	b.n	8004646 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004640:	4b05      	ldr	r3, [pc, #20]	@ (8004658 <HAL_RCC_GetSysClockFreq+0x204>)
 8004642:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004644:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004648:	4618      	mov	r0, r3
 800464a:	3750      	adds	r7, #80	@ 0x50
 800464c:	46bd      	mov	sp, r7
 800464e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	00f42400 	.word	0x00f42400
 800465c:	007a1200 	.word	0x007a1200

08004660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004664:	4b03      	ldr	r3, [pc, #12]	@ (8004674 <HAL_RCC_GetHCLKFreq+0x14>)
 8004666:	681b      	ldr	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000000 	.word	0x20000000

08004678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800467c:	f7ff fff0 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	0a9b      	lsrs	r3, r3, #10
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4903      	ldr	r1, [pc, #12]	@ (800469c <HAL_RCC_GetPCLK1Freq+0x24>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40023800 	.word	0x40023800
 800469c:	08007f48 	.word	0x08007f48

080046a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046a4:	f7ff ffdc 	bl	8004660 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0b5b      	lsrs	r3, r3, #13
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	@ (80046c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	08007f48 	.word	0x08007f48

080046c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e042      	b.n	8004760 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd fa14 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	@ 0x24
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800470a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fa09 	bl	8004b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695a      	ldr	r2, [r3, #20]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	@ 0x28
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b20      	cmp	r3, #32
 8004786:	d175      	bne.n	8004874 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_UART_Transmit+0x2c>
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e06e      	b.n	8004876 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2221      	movs	r2, #33	@ 0x21
 80047a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047a6:	f7fd fbdb 	bl	8001f60 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	88fa      	ldrh	r2, [r7, #6]
 80047b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c0:	d108      	bne.n	80047d4 <HAL_UART_Transmit+0x6c>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d104      	bne.n	80047d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	e003      	b.n	80047dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047dc:	e02e      	b.n	800483c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2180      	movs	r1, #128	@ 0x80
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f8df 	bl	80049ac <UART_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e03a      	b.n	8004876 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10b      	bne.n	800481e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004814:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	3302      	adds	r3, #2
 800481a:	61bb      	str	r3, [r7, #24]
 800481c:	e007      	b.n	800482e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1cb      	bne.n	80047de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2200      	movs	r2, #0
 800484e:	2140      	movs	r1, #64	@ 0x40
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f8ab 	bl	80049ac <UART_WaitOnFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e006      	b.n	8004876 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b08a      	sub	sp, #40	@ 0x28
 8004882:	af02      	add	r7, sp, #8
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b20      	cmp	r3, #32
 800489c:	f040 8081 	bne.w	80049a2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_UART_Receive+0x2e>
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e079      	b.n	80049a4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2222      	movs	r2, #34	@ 0x22
 80048ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048c4:	f7fd fb4c 	bl	8001f60 <HAL_GetTick>
 80048c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048de:	d108      	bne.n	80048f2 <HAL_UART_Receive+0x74>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	e003      	b.n	80048fa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80048fa:	e047      	b.n	800498c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2200      	movs	r2, #0
 8004904:	2120      	movs	r1, #32
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f850 	bl	80049ac <UART_WaitOnFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e042      	b.n	80049a4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10c      	bne.n	800493e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004930:	b29a      	uxth	r2, r3
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	3302      	adds	r3, #2
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	e01f      	b.n	800497e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004946:	d007      	beq.n	8004958 <HAL_UART_Receive+0xda>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <HAL_UART_Receive+0xe8>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	e008      	b.n	8004978 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004972:	b2da      	uxtb	r2, r3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	3301      	adds	r3, #1
 800497c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1b2      	bne.n	80048fc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e000      	b.n	80049a4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
  }
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049bc:	e03b      	b.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049c4:	d037      	beq.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c6:	f7fd facb 	bl	8001f60 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	6a3a      	ldr	r2, [r7, #32]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d302      	bcc.n	80049dc <UART_WaitOnFlagUntilTimeout+0x30>
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e03a      	b.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d023      	beq.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b80      	cmp	r3, #128	@ 0x80
 80049f2:	d020      	beq.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x8a>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b40      	cmp	r3, #64	@ 0x40
 80049f8:	d01d      	beq.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d116      	bne.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f81d 	bl	8004a5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2208      	movs	r2, #8
 8004a28:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e00f      	b.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d0b4      	beq.n	80049be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b095      	sub	sp, #84	@ 0x54
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a86:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e5      	bne.n	8004a66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3314      	adds	r3, #20
 8004aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3314      	adds	r3, #20
 8004ab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e5      	bne.n	8004a9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d119      	bne.n	8004b0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	e853 3f00 	ldrex	r3, [r3]
 8004ae4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f023 0310 	bic.w	r3, r3, #16
 8004aec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	330c      	adds	r3, #12
 8004af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004af6:	61ba      	str	r2, [r7, #24]
 8004af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6979      	ldr	r1, [r7, #20]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	613b      	str	r3, [r7, #16]
   return(result);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e5      	bne.n	8004ad6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b18:	bf00      	nop
 8004b1a:	3754      	adds	r7, #84	@ 0x54
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b28:	b0c0      	sub	sp, #256	@ 0x100
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	68d9      	ldr	r1, [r3, #12]
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	ea40 0301 	orr.w	r3, r0, r1
 8004b4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b7c:	f021 010c 	bic.w	r1, r1, #12
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9e:	6999      	ldr	r1, [r3, #24]
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	ea40 0301 	orr.w	r3, r0, r1
 8004baa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b8f      	ldr	r3, [pc, #572]	@ (8004df0 <UART_SetConfig+0x2cc>)
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d005      	beq.n	8004bc4 <UART_SetConfig+0xa0>
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b8d      	ldr	r3, [pc, #564]	@ (8004df4 <UART_SetConfig+0x2d0>)
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d104      	bne.n	8004bce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc4:	f7ff fd6c 	bl	80046a0 <HAL_RCC_GetPCLK2Freq>
 8004bc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bcc:	e003      	b.n	8004bd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bce:	f7ff fd53 	bl	8004678 <HAL_RCC_GetPCLK1Freq>
 8004bd2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be0:	f040 810c 	bne.w	8004dfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	1891      	adds	r1, r2, r2
 8004bfc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bfe:	415b      	adcs	r3, r3
 8004c00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c06:	4621      	mov	r1, r4
 8004c08:	eb12 0801 	adds.w	r8, r2, r1
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	eb43 0901 	adc.w	r9, r3, r1
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c26:	4690      	mov	r8, r2
 8004c28:	4699      	mov	r9, r3
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	eb18 0303 	adds.w	r3, r8, r3
 8004c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c34:	462b      	mov	r3, r5
 8004c36:	eb49 0303 	adc.w	r3, r9, r3
 8004c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c52:	460b      	mov	r3, r1
 8004c54:	18db      	adds	r3, r3, r3
 8004c56:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c58:	4613      	mov	r3, r2
 8004c5a:	eb42 0303 	adc.w	r3, r2, r3
 8004c5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c68:	f7fb ff9e 	bl	8000ba8 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4b61      	ldr	r3, [pc, #388]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004c72:	fba3 2302 	umull	r2, r3, r3, r2
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	011c      	lsls	r4, r3, #4
 8004c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c8c:	4642      	mov	r2, r8
 8004c8e:	464b      	mov	r3, r9
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c94:	415b      	adcs	r3, r3
 8004c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cbc:	4692      	mov	sl, r2
 8004cbe:	469b      	mov	fp, r3
 8004cc0:	4643      	mov	r3, r8
 8004cc2:	eb1a 0303 	adds.w	r3, sl, r3
 8004cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	eb4b 0303 	adc.w	r3, fp, r3
 8004cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ce0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ce4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	18db      	adds	r3, r3, r3
 8004cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cee:	4613      	mov	r3, r2
 8004cf0:	eb42 0303 	adc.w	r3, r2, r3
 8004cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004cfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cfe:	f7fb ff53 	bl	8000ba8 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4611      	mov	r1, r2
 8004d08:	4b3b      	ldr	r3, [pc, #236]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2264      	movs	r2, #100	@ 0x64
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	1acb      	subs	r3, r1, r3
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d1e:	4b36      	ldr	r3, [pc, #216]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004d20:	fba3 2302 	umull	r2, r3, r3, r2
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d2c:	441c      	add	r4, r3
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	1891      	adds	r1, r2, r2
 8004d46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d48:	415b      	adcs	r3, r3
 8004d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d50:	4641      	mov	r1, r8
 8004d52:	1851      	adds	r1, r2, r1
 8004d54:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d56:	4649      	mov	r1, r9
 8004d58:	414b      	adcs	r3, r1
 8004d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d68:	4659      	mov	r1, fp
 8004d6a:	00cb      	lsls	r3, r1, #3
 8004d6c:	4651      	mov	r1, sl
 8004d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d72:	4651      	mov	r1, sl
 8004d74:	00ca      	lsls	r2, r1, #3
 8004d76:	4610      	mov	r0, r2
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	189b      	adds	r3, r3, r2
 8004d80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d84:	464b      	mov	r3, r9
 8004d86:	460a      	mov	r2, r1
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004da0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004da4:	460b      	mov	r3, r1
 8004da6:	18db      	adds	r3, r3, r3
 8004da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004daa:	4613      	mov	r3, r2
 8004dac:	eb42 0303 	adc.w	r3, r2, r3
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004db2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004db6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dba:	f7fb fef5 	bl	8000ba8 <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	2164      	movs	r1, #100	@ 0x64
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	3332      	adds	r3, #50	@ 0x32
 8004dd6:	4a08      	ldr	r2, [pc, #32]	@ (8004df8 <UART_SetConfig+0x2d4>)
 8004dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	f003 0207 	and.w	r2, r3, #7
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4422      	add	r2, r4
 8004dea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dec:	e106      	b.n	8004ffc <UART_SetConfig+0x4d8>
 8004dee:	bf00      	nop
 8004df0:	40011000 	.word	0x40011000
 8004df4:	40011400 	.word	0x40011400
 8004df8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e0e:	4642      	mov	r2, r8
 8004e10:	464b      	mov	r3, r9
 8004e12:	1891      	adds	r1, r2, r2
 8004e14:	6239      	str	r1, [r7, #32]
 8004e16:	415b      	adcs	r3, r3
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e1e:	4641      	mov	r1, r8
 8004e20:	1854      	adds	r4, r2, r1
 8004e22:	4649      	mov	r1, r9
 8004e24:	eb43 0501 	adc.w	r5, r3, r1
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	00eb      	lsls	r3, r5, #3
 8004e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e36:	00e2      	lsls	r2, r4, #3
 8004e38:	4614      	mov	r4, r2
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	4643      	mov	r3, r8
 8004e3e:	18e3      	adds	r3, r4, r3
 8004e40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e44:	464b      	mov	r3, r9
 8004e46:	eb45 0303 	adc.w	r3, r5, r3
 8004e4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	008b      	lsls	r3, r1, #2
 8004e6e:	4621      	mov	r1, r4
 8004e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e74:	4621      	mov	r1, r4
 8004e76:	008a      	lsls	r2, r1, #2
 8004e78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e7c:	f7fb fe94 	bl	8000ba8 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4b60      	ldr	r3, [pc, #384]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004e86:	fba3 2302 	umull	r2, r3, r3, r2
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	011c      	lsls	r4, r3, #4
 8004e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	1891      	adds	r1, r2, r2
 8004ea6:	61b9      	str	r1, [r7, #24]
 8004ea8:	415b      	adcs	r3, r3
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	1851      	adds	r1, r2, r1
 8004eb4:	6139      	str	r1, [r7, #16]
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	414b      	adcs	r3, r1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec8:	4659      	mov	r1, fp
 8004eca:	00cb      	lsls	r3, r1, #3
 8004ecc:	4651      	mov	r1, sl
 8004ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	00ca      	lsls	r2, r1, #3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4603      	mov	r3, r0
 8004edc:	4642      	mov	r2, r8
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	460a      	mov	r2, r1
 8004ee8:	eb42 0303 	adc.w	r3, r2, r3
 8004eec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004efa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f08:	4649      	mov	r1, r9
 8004f0a:	008b      	lsls	r3, r1, #2
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f12:	4641      	mov	r1, r8
 8004f14:	008a      	lsls	r2, r1, #2
 8004f16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f1a:	f7fb fe45 	bl	8000ba8 <__aeabi_uldivmod>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	4b38      	ldr	r3, [pc, #224]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004f26:	fba3 2301 	umull	r2, r3, r3, r1
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2264      	movs	r2, #100	@ 0x64
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	1acb      	subs	r3, r1, r3
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	3332      	adds	r3, #50	@ 0x32
 8004f38:	4a33      	ldr	r2, [pc, #204]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f44:	441c      	add	r4, r3
 8004f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	1891      	adds	r1, r2, r2
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	415b      	adcs	r3, r3
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f64:	4641      	mov	r1, r8
 8004f66:	1851      	adds	r1, r2, r1
 8004f68:	6039      	str	r1, [r7, #0]
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	414b      	adcs	r3, r1
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	00cb      	lsls	r3, r1, #3
 8004f80:	4651      	mov	r1, sl
 8004f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f86:	4651      	mov	r1, sl
 8004f88:	00ca      	lsls	r2, r1, #3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4642      	mov	r2, r8
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f96:	464b      	mov	r3, r9
 8004f98:	460a      	mov	r2, r1
 8004f9a:	eb42 0303 	adc.w	r3, r2, r3
 8004f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004faa:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fb8:	4649      	mov	r1, r9
 8004fba:	008b      	lsls	r3, r1, #2
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fc2:	4641      	mov	r1, r8
 8004fc4:	008a      	lsls	r2, r1, #2
 8004fc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fca:	f7fb fded 	bl	8000ba8 <__aeabi_uldivmod>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd8:	095b      	lsrs	r3, r3, #5
 8004fda:	2164      	movs	r1, #100	@ 0x64
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	3332      	adds	r3, #50	@ 0x32
 8004fe6:	4a08      	ldr	r2, [pc, #32]	@ (8005008 <UART_SetConfig+0x4e4>)
 8004fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	f003 020f 	and.w	r2, r3, #15
 8004ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4422      	add	r2, r4
 8004ffa:	609a      	str	r2, [r3, #8]
}
 8004ffc:	bf00      	nop
 8004ffe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005002:	46bd      	mov	sp, r7
 8005004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005008:	51eb851f 	.word	0x51eb851f

0800500c <__cvt>:
 800500c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	ec57 6b10 	vmov	r6, r7, d0
 8005014:	2f00      	cmp	r7, #0
 8005016:	460c      	mov	r4, r1
 8005018:	4619      	mov	r1, r3
 800501a:	463b      	mov	r3, r7
 800501c:	bfbb      	ittet	lt
 800501e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005022:	461f      	movlt	r7, r3
 8005024:	2300      	movge	r3, #0
 8005026:	232d      	movlt	r3, #45	@ 0x2d
 8005028:	700b      	strb	r3, [r1, #0]
 800502a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800502c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005030:	4691      	mov	r9, r2
 8005032:	f023 0820 	bic.w	r8, r3, #32
 8005036:	bfbc      	itt	lt
 8005038:	4632      	movlt	r2, r6
 800503a:	4616      	movlt	r6, r2
 800503c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005040:	d005      	beq.n	800504e <__cvt+0x42>
 8005042:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005046:	d100      	bne.n	800504a <__cvt+0x3e>
 8005048:	3401      	adds	r4, #1
 800504a:	2102      	movs	r1, #2
 800504c:	e000      	b.n	8005050 <__cvt+0x44>
 800504e:	2103      	movs	r1, #3
 8005050:	ab03      	add	r3, sp, #12
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	ab02      	add	r3, sp, #8
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	ec47 6b10 	vmov	d0, r6, r7
 800505c:	4653      	mov	r3, sl
 800505e:	4622      	mov	r2, r4
 8005060:	f000 ff2a 	bl	8005eb8 <_dtoa_r>
 8005064:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005068:	4605      	mov	r5, r0
 800506a:	d119      	bne.n	80050a0 <__cvt+0x94>
 800506c:	f019 0f01 	tst.w	r9, #1
 8005070:	d00e      	beq.n	8005090 <__cvt+0x84>
 8005072:	eb00 0904 	add.w	r9, r0, r4
 8005076:	2200      	movs	r2, #0
 8005078:	2300      	movs	r3, #0
 800507a:	4630      	mov	r0, r6
 800507c:	4639      	mov	r1, r7
 800507e:	f7fb fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 8005082:	b108      	cbz	r0, 8005088 <__cvt+0x7c>
 8005084:	f8cd 900c 	str.w	r9, [sp, #12]
 8005088:	2230      	movs	r2, #48	@ 0x30
 800508a:	9b03      	ldr	r3, [sp, #12]
 800508c:	454b      	cmp	r3, r9
 800508e:	d31e      	bcc.n	80050ce <__cvt+0xc2>
 8005090:	9b03      	ldr	r3, [sp, #12]
 8005092:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005094:	1b5b      	subs	r3, r3, r5
 8005096:	4628      	mov	r0, r5
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	b004      	add	sp, #16
 800509c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050a4:	eb00 0904 	add.w	r9, r0, r4
 80050a8:	d1e5      	bne.n	8005076 <__cvt+0x6a>
 80050aa:	7803      	ldrb	r3, [r0, #0]
 80050ac:	2b30      	cmp	r3, #48	@ 0x30
 80050ae:	d10a      	bne.n	80050c6 <__cvt+0xba>
 80050b0:	2200      	movs	r2, #0
 80050b2:	2300      	movs	r3, #0
 80050b4:	4630      	mov	r0, r6
 80050b6:	4639      	mov	r1, r7
 80050b8:	f7fb fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 80050bc:	b918      	cbnz	r0, 80050c6 <__cvt+0xba>
 80050be:	f1c4 0401 	rsb	r4, r4, #1
 80050c2:	f8ca 4000 	str.w	r4, [sl]
 80050c6:	f8da 3000 	ldr.w	r3, [sl]
 80050ca:	4499      	add	r9, r3
 80050cc:	e7d3      	b.n	8005076 <__cvt+0x6a>
 80050ce:	1c59      	adds	r1, r3, #1
 80050d0:	9103      	str	r1, [sp, #12]
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	e7d9      	b.n	800508a <__cvt+0x7e>

080050d6 <__exponent>:
 80050d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050d8:	2900      	cmp	r1, #0
 80050da:	bfba      	itte	lt
 80050dc:	4249      	neglt	r1, r1
 80050de:	232d      	movlt	r3, #45	@ 0x2d
 80050e0:	232b      	movge	r3, #43	@ 0x2b
 80050e2:	2909      	cmp	r1, #9
 80050e4:	7002      	strb	r2, [r0, #0]
 80050e6:	7043      	strb	r3, [r0, #1]
 80050e8:	dd29      	ble.n	800513e <__exponent+0x68>
 80050ea:	f10d 0307 	add.w	r3, sp, #7
 80050ee:	461d      	mov	r5, r3
 80050f0:	270a      	movs	r7, #10
 80050f2:	461a      	mov	r2, r3
 80050f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80050f8:	fb07 1416 	mls	r4, r7, r6, r1
 80050fc:	3430      	adds	r4, #48	@ 0x30
 80050fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005102:	460c      	mov	r4, r1
 8005104:	2c63      	cmp	r4, #99	@ 0x63
 8005106:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800510a:	4631      	mov	r1, r6
 800510c:	dcf1      	bgt.n	80050f2 <__exponent+0x1c>
 800510e:	3130      	adds	r1, #48	@ 0x30
 8005110:	1e94      	subs	r4, r2, #2
 8005112:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005116:	1c41      	adds	r1, r0, #1
 8005118:	4623      	mov	r3, r4
 800511a:	42ab      	cmp	r3, r5
 800511c:	d30a      	bcc.n	8005134 <__exponent+0x5e>
 800511e:	f10d 0309 	add.w	r3, sp, #9
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	42ac      	cmp	r4, r5
 8005126:	bf88      	it	hi
 8005128:	2300      	movhi	r3, #0
 800512a:	3302      	adds	r3, #2
 800512c:	4403      	add	r3, r0
 800512e:	1a18      	subs	r0, r3, r0
 8005130:	b003      	add	sp, #12
 8005132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005134:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005138:	f801 6f01 	strb.w	r6, [r1, #1]!
 800513c:	e7ed      	b.n	800511a <__exponent+0x44>
 800513e:	2330      	movs	r3, #48	@ 0x30
 8005140:	3130      	adds	r1, #48	@ 0x30
 8005142:	7083      	strb	r3, [r0, #2]
 8005144:	70c1      	strb	r1, [r0, #3]
 8005146:	1d03      	adds	r3, r0, #4
 8005148:	e7f1      	b.n	800512e <__exponent+0x58>
	...

0800514c <_printf_float>:
 800514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005150:	b08d      	sub	sp, #52	@ 0x34
 8005152:	460c      	mov	r4, r1
 8005154:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005158:	4616      	mov	r6, r2
 800515a:	461f      	mov	r7, r3
 800515c:	4605      	mov	r5, r0
 800515e:	f000 fd83 	bl	8005c68 <_localeconv_r>
 8005162:	6803      	ldr	r3, [r0, #0]
 8005164:	9304      	str	r3, [sp, #16]
 8005166:	4618      	mov	r0, r3
 8005168:	f7fb f882 	bl	8000270 <strlen>
 800516c:	2300      	movs	r3, #0
 800516e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005170:	f8d8 3000 	ldr.w	r3, [r8]
 8005174:	9005      	str	r0, [sp, #20]
 8005176:	3307      	adds	r3, #7
 8005178:	f023 0307 	bic.w	r3, r3, #7
 800517c:	f103 0208 	add.w	r2, r3, #8
 8005180:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005184:	f8d4 b000 	ldr.w	fp, [r4]
 8005188:	f8c8 2000 	str.w	r2, [r8]
 800518c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005190:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005194:	9307      	str	r3, [sp, #28]
 8005196:	f8cd 8018 	str.w	r8, [sp, #24]
 800519a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800519e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051a2:	4b9c      	ldr	r3, [pc, #624]	@ (8005414 <_printf_float+0x2c8>)
 80051a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051a8:	f7fb fcc0 	bl	8000b2c <__aeabi_dcmpun>
 80051ac:	bb70      	cbnz	r0, 800520c <_printf_float+0xc0>
 80051ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051b2:	4b98      	ldr	r3, [pc, #608]	@ (8005414 <_printf_float+0x2c8>)
 80051b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051b8:	f7fb fc9a 	bl	8000af0 <__aeabi_dcmple>
 80051bc:	bb30      	cbnz	r0, 800520c <_printf_float+0xc0>
 80051be:	2200      	movs	r2, #0
 80051c0:	2300      	movs	r3, #0
 80051c2:	4640      	mov	r0, r8
 80051c4:	4649      	mov	r1, r9
 80051c6:	f7fb fc89 	bl	8000adc <__aeabi_dcmplt>
 80051ca:	b110      	cbz	r0, 80051d2 <_printf_float+0x86>
 80051cc:	232d      	movs	r3, #45	@ 0x2d
 80051ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051d2:	4a91      	ldr	r2, [pc, #580]	@ (8005418 <_printf_float+0x2cc>)
 80051d4:	4b91      	ldr	r3, [pc, #580]	@ (800541c <_printf_float+0x2d0>)
 80051d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051da:	bf8c      	ite	hi
 80051dc:	4690      	movhi	r8, r2
 80051de:	4698      	movls	r8, r3
 80051e0:	2303      	movs	r3, #3
 80051e2:	6123      	str	r3, [r4, #16]
 80051e4:	f02b 0304 	bic.w	r3, fp, #4
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	f04f 0900 	mov.w	r9, #0
 80051ee:	9700      	str	r7, [sp, #0]
 80051f0:	4633      	mov	r3, r6
 80051f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80051f4:	4621      	mov	r1, r4
 80051f6:	4628      	mov	r0, r5
 80051f8:	f000 f9d2 	bl	80055a0 <_printf_common>
 80051fc:	3001      	adds	r0, #1
 80051fe:	f040 808d 	bne.w	800531c <_printf_float+0x1d0>
 8005202:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005206:	b00d      	add	sp, #52	@ 0x34
 8005208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520c:	4642      	mov	r2, r8
 800520e:	464b      	mov	r3, r9
 8005210:	4640      	mov	r0, r8
 8005212:	4649      	mov	r1, r9
 8005214:	f7fb fc8a 	bl	8000b2c <__aeabi_dcmpun>
 8005218:	b140      	cbz	r0, 800522c <_printf_float+0xe0>
 800521a:	464b      	mov	r3, r9
 800521c:	2b00      	cmp	r3, #0
 800521e:	bfbc      	itt	lt
 8005220:	232d      	movlt	r3, #45	@ 0x2d
 8005222:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005226:	4a7e      	ldr	r2, [pc, #504]	@ (8005420 <_printf_float+0x2d4>)
 8005228:	4b7e      	ldr	r3, [pc, #504]	@ (8005424 <_printf_float+0x2d8>)
 800522a:	e7d4      	b.n	80051d6 <_printf_float+0x8a>
 800522c:	6863      	ldr	r3, [r4, #4]
 800522e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005232:	9206      	str	r2, [sp, #24]
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	d13b      	bne.n	80052b0 <_printf_float+0x164>
 8005238:	2306      	movs	r3, #6
 800523a:	6063      	str	r3, [r4, #4]
 800523c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005240:	2300      	movs	r3, #0
 8005242:	6022      	str	r2, [r4, #0]
 8005244:	9303      	str	r3, [sp, #12]
 8005246:	ab0a      	add	r3, sp, #40	@ 0x28
 8005248:	e9cd a301 	strd	sl, r3, [sp, #4]
 800524c:	ab09      	add	r3, sp, #36	@ 0x24
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	6861      	ldr	r1, [r4, #4]
 8005252:	ec49 8b10 	vmov	d0, r8, r9
 8005256:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800525a:	4628      	mov	r0, r5
 800525c:	f7ff fed6 	bl	800500c <__cvt>
 8005260:	9b06      	ldr	r3, [sp, #24]
 8005262:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005264:	2b47      	cmp	r3, #71	@ 0x47
 8005266:	4680      	mov	r8, r0
 8005268:	d129      	bne.n	80052be <_printf_float+0x172>
 800526a:	1cc8      	adds	r0, r1, #3
 800526c:	db02      	blt.n	8005274 <_printf_float+0x128>
 800526e:	6863      	ldr	r3, [r4, #4]
 8005270:	4299      	cmp	r1, r3
 8005272:	dd41      	ble.n	80052f8 <_printf_float+0x1ac>
 8005274:	f1aa 0a02 	sub.w	sl, sl, #2
 8005278:	fa5f fa8a 	uxtb.w	sl, sl
 800527c:	3901      	subs	r1, #1
 800527e:	4652      	mov	r2, sl
 8005280:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005284:	9109      	str	r1, [sp, #36]	@ 0x24
 8005286:	f7ff ff26 	bl	80050d6 <__exponent>
 800528a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800528c:	1813      	adds	r3, r2, r0
 800528e:	2a01      	cmp	r2, #1
 8005290:	4681      	mov	r9, r0
 8005292:	6123      	str	r3, [r4, #16]
 8005294:	dc02      	bgt.n	800529c <_printf_float+0x150>
 8005296:	6822      	ldr	r2, [r4, #0]
 8005298:	07d2      	lsls	r2, r2, #31
 800529a:	d501      	bpl.n	80052a0 <_printf_float+0x154>
 800529c:	3301      	adds	r3, #1
 800529e:	6123      	str	r3, [r4, #16]
 80052a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0a2      	beq.n	80051ee <_printf_float+0xa2>
 80052a8:	232d      	movs	r3, #45	@ 0x2d
 80052aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052ae:	e79e      	b.n	80051ee <_printf_float+0xa2>
 80052b0:	9a06      	ldr	r2, [sp, #24]
 80052b2:	2a47      	cmp	r2, #71	@ 0x47
 80052b4:	d1c2      	bne.n	800523c <_printf_float+0xf0>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1c0      	bne.n	800523c <_printf_float+0xf0>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e7bd      	b.n	800523a <_printf_float+0xee>
 80052be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052c2:	d9db      	bls.n	800527c <_printf_float+0x130>
 80052c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80052c8:	d118      	bne.n	80052fc <_printf_float+0x1b0>
 80052ca:	2900      	cmp	r1, #0
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	dd0b      	ble.n	80052e8 <_printf_float+0x19c>
 80052d0:	6121      	str	r1, [r4, #16]
 80052d2:	b913      	cbnz	r3, 80052da <_printf_float+0x18e>
 80052d4:	6822      	ldr	r2, [r4, #0]
 80052d6:	07d0      	lsls	r0, r2, #31
 80052d8:	d502      	bpl.n	80052e0 <_printf_float+0x194>
 80052da:	3301      	adds	r3, #1
 80052dc:	440b      	add	r3, r1
 80052de:	6123      	str	r3, [r4, #16]
 80052e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80052e2:	f04f 0900 	mov.w	r9, #0
 80052e6:	e7db      	b.n	80052a0 <_printf_float+0x154>
 80052e8:	b913      	cbnz	r3, 80052f0 <_printf_float+0x1a4>
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	07d2      	lsls	r2, r2, #31
 80052ee:	d501      	bpl.n	80052f4 <_printf_float+0x1a8>
 80052f0:	3302      	adds	r3, #2
 80052f2:	e7f4      	b.n	80052de <_printf_float+0x192>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e7f2      	b.n	80052de <_printf_float+0x192>
 80052f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80052fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052fe:	4299      	cmp	r1, r3
 8005300:	db05      	blt.n	800530e <_printf_float+0x1c2>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	6121      	str	r1, [r4, #16]
 8005306:	07d8      	lsls	r0, r3, #31
 8005308:	d5ea      	bpl.n	80052e0 <_printf_float+0x194>
 800530a:	1c4b      	adds	r3, r1, #1
 800530c:	e7e7      	b.n	80052de <_printf_float+0x192>
 800530e:	2900      	cmp	r1, #0
 8005310:	bfd4      	ite	le
 8005312:	f1c1 0202 	rsble	r2, r1, #2
 8005316:	2201      	movgt	r2, #1
 8005318:	4413      	add	r3, r2
 800531a:	e7e0      	b.n	80052de <_printf_float+0x192>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	055a      	lsls	r2, r3, #21
 8005320:	d407      	bmi.n	8005332 <_printf_float+0x1e6>
 8005322:	6923      	ldr	r3, [r4, #16]
 8005324:	4642      	mov	r2, r8
 8005326:	4631      	mov	r1, r6
 8005328:	4628      	mov	r0, r5
 800532a:	47b8      	blx	r7
 800532c:	3001      	adds	r0, #1
 800532e:	d12b      	bne.n	8005388 <_printf_float+0x23c>
 8005330:	e767      	b.n	8005202 <_printf_float+0xb6>
 8005332:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005336:	f240 80dd 	bls.w	80054f4 <_printf_float+0x3a8>
 800533a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800533e:	2200      	movs	r2, #0
 8005340:	2300      	movs	r3, #0
 8005342:	f7fb fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005346:	2800      	cmp	r0, #0
 8005348:	d033      	beq.n	80053b2 <_printf_float+0x266>
 800534a:	4a37      	ldr	r2, [pc, #220]	@ (8005428 <_printf_float+0x2dc>)
 800534c:	2301      	movs	r3, #1
 800534e:	4631      	mov	r1, r6
 8005350:	4628      	mov	r0, r5
 8005352:	47b8      	blx	r7
 8005354:	3001      	adds	r0, #1
 8005356:	f43f af54 	beq.w	8005202 <_printf_float+0xb6>
 800535a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800535e:	4543      	cmp	r3, r8
 8005360:	db02      	blt.n	8005368 <_printf_float+0x21c>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	07d8      	lsls	r0, r3, #31
 8005366:	d50f      	bpl.n	8005388 <_printf_float+0x23c>
 8005368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f af45 	beq.w	8005202 <_printf_float+0xb6>
 8005378:	f04f 0900 	mov.w	r9, #0
 800537c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005380:	f104 0a1a 	add.w	sl, r4, #26
 8005384:	45c8      	cmp	r8, r9
 8005386:	dc09      	bgt.n	800539c <_printf_float+0x250>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	079b      	lsls	r3, r3, #30
 800538c:	f100 8103 	bmi.w	8005596 <_printf_float+0x44a>
 8005390:	68e0      	ldr	r0, [r4, #12]
 8005392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005394:	4298      	cmp	r0, r3
 8005396:	bfb8      	it	lt
 8005398:	4618      	movlt	r0, r3
 800539a:	e734      	b.n	8005206 <_printf_float+0xba>
 800539c:	2301      	movs	r3, #1
 800539e:	4652      	mov	r2, sl
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f af2b 	beq.w	8005202 <_printf_float+0xb6>
 80053ac:	f109 0901 	add.w	r9, r9, #1
 80053b0:	e7e8      	b.n	8005384 <_printf_float+0x238>
 80053b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dc39      	bgt.n	800542c <_printf_float+0x2e0>
 80053b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <_printf_float+0x2dc>)
 80053ba:	2301      	movs	r3, #1
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	47b8      	blx	r7
 80053c2:	3001      	adds	r0, #1
 80053c4:	f43f af1d 	beq.w	8005202 <_printf_float+0xb6>
 80053c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80053cc:	ea59 0303 	orrs.w	r3, r9, r3
 80053d0:	d102      	bne.n	80053d8 <_printf_float+0x28c>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	07d9      	lsls	r1, r3, #31
 80053d6:	d5d7      	bpl.n	8005388 <_printf_float+0x23c>
 80053d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053dc:	4631      	mov	r1, r6
 80053de:	4628      	mov	r0, r5
 80053e0:	47b8      	blx	r7
 80053e2:	3001      	adds	r0, #1
 80053e4:	f43f af0d 	beq.w	8005202 <_printf_float+0xb6>
 80053e8:	f04f 0a00 	mov.w	sl, #0
 80053ec:	f104 0b1a 	add.w	fp, r4, #26
 80053f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053f2:	425b      	negs	r3, r3
 80053f4:	4553      	cmp	r3, sl
 80053f6:	dc01      	bgt.n	80053fc <_printf_float+0x2b0>
 80053f8:	464b      	mov	r3, r9
 80053fa:	e793      	b.n	8005324 <_printf_float+0x1d8>
 80053fc:	2301      	movs	r3, #1
 80053fe:	465a      	mov	r2, fp
 8005400:	4631      	mov	r1, r6
 8005402:	4628      	mov	r0, r5
 8005404:	47b8      	blx	r7
 8005406:	3001      	adds	r0, #1
 8005408:	f43f aefb 	beq.w	8005202 <_printf_float+0xb6>
 800540c:	f10a 0a01 	add.w	sl, sl, #1
 8005410:	e7ee      	b.n	80053f0 <_printf_float+0x2a4>
 8005412:	bf00      	nop
 8005414:	7fefffff 	.word	0x7fefffff
 8005418:	08007f5c 	.word	0x08007f5c
 800541c:	08007f58 	.word	0x08007f58
 8005420:	08007f64 	.word	0x08007f64
 8005424:	08007f60 	.word	0x08007f60
 8005428:	08007f68 	.word	0x08007f68
 800542c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800542e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005432:	4553      	cmp	r3, sl
 8005434:	bfa8      	it	ge
 8005436:	4653      	movge	r3, sl
 8005438:	2b00      	cmp	r3, #0
 800543a:	4699      	mov	r9, r3
 800543c:	dc36      	bgt.n	80054ac <_printf_float+0x360>
 800543e:	f04f 0b00 	mov.w	fp, #0
 8005442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005446:	f104 021a 	add.w	r2, r4, #26
 800544a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800544c:	9306      	str	r3, [sp, #24]
 800544e:	eba3 0309 	sub.w	r3, r3, r9
 8005452:	455b      	cmp	r3, fp
 8005454:	dc31      	bgt.n	80054ba <_printf_float+0x36e>
 8005456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005458:	459a      	cmp	sl, r3
 800545a:	dc3a      	bgt.n	80054d2 <_printf_float+0x386>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	07da      	lsls	r2, r3, #31
 8005460:	d437      	bmi.n	80054d2 <_printf_float+0x386>
 8005462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005464:	ebaa 0903 	sub.w	r9, sl, r3
 8005468:	9b06      	ldr	r3, [sp, #24]
 800546a:	ebaa 0303 	sub.w	r3, sl, r3
 800546e:	4599      	cmp	r9, r3
 8005470:	bfa8      	it	ge
 8005472:	4699      	movge	r9, r3
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	dc33      	bgt.n	80054e2 <_printf_float+0x396>
 800547a:	f04f 0800 	mov.w	r8, #0
 800547e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005482:	f104 0b1a 	add.w	fp, r4, #26
 8005486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005488:	ebaa 0303 	sub.w	r3, sl, r3
 800548c:	eba3 0309 	sub.w	r3, r3, r9
 8005490:	4543      	cmp	r3, r8
 8005492:	f77f af79 	ble.w	8005388 <_printf_float+0x23c>
 8005496:	2301      	movs	r3, #1
 8005498:	465a      	mov	r2, fp
 800549a:	4631      	mov	r1, r6
 800549c:	4628      	mov	r0, r5
 800549e:	47b8      	blx	r7
 80054a0:	3001      	adds	r0, #1
 80054a2:	f43f aeae 	beq.w	8005202 <_printf_float+0xb6>
 80054a6:	f108 0801 	add.w	r8, r8, #1
 80054aa:	e7ec      	b.n	8005486 <_printf_float+0x33a>
 80054ac:	4642      	mov	r2, r8
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	d1c2      	bne.n	800543e <_printf_float+0x2f2>
 80054b8:	e6a3      	b.n	8005202 <_printf_float+0xb6>
 80054ba:	2301      	movs	r3, #1
 80054bc:	4631      	mov	r1, r6
 80054be:	4628      	mov	r0, r5
 80054c0:	9206      	str	r2, [sp, #24]
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f ae9c 	beq.w	8005202 <_printf_float+0xb6>
 80054ca:	9a06      	ldr	r2, [sp, #24]
 80054cc:	f10b 0b01 	add.w	fp, fp, #1
 80054d0:	e7bb      	b.n	800544a <_printf_float+0x2fe>
 80054d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054d6:	4631      	mov	r1, r6
 80054d8:	4628      	mov	r0, r5
 80054da:	47b8      	blx	r7
 80054dc:	3001      	adds	r0, #1
 80054de:	d1c0      	bne.n	8005462 <_printf_float+0x316>
 80054e0:	e68f      	b.n	8005202 <_printf_float+0xb6>
 80054e2:	9a06      	ldr	r2, [sp, #24]
 80054e4:	464b      	mov	r3, r9
 80054e6:	4442      	add	r2, r8
 80054e8:	4631      	mov	r1, r6
 80054ea:	4628      	mov	r0, r5
 80054ec:	47b8      	blx	r7
 80054ee:	3001      	adds	r0, #1
 80054f0:	d1c3      	bne.n	800547a <_printf_float+0x32e>
 80054f2:	e686      	b.n	8005202 <_printf_float+0xb6>
 80054f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054f8:	f1ba 0f01 	cmp.w	sl, #1
 80054fc:	dc01      	bgt.n	8005502 <_printf_float+0x3b6>
 80054fe:	07db      	lsls	r3, r3, #31
 8005500:	d536      	bpl.n	8005570 <_printf_float+0x424>
 8005502:	2301      	movs	r3, #1
 8005504:	4642      	mov	r2, r8
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	f43f ae78 	beq.w	8005202 <_printf_float+0xb6>
 8005512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	f43f ae70 	beq.w	8005202 <_printf_float+0xb6>
 8005522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005526:	2200      	movs	r2, #0
 8005528:	2300      	movs	r3, #0
 800552a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800552e:	f7fb facb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005532:	b9c0      	cbnz	r0, 8005566 <_printf_float+0x41a>
 8005534:	4653      	mov	r3, sl
 8005536:	f108 0201 	add.w	r2, r8, #1
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	d10c      	bne.n	800555e <_printf_float+0x412>
 8005544:	e65d      	b.n	8005202 <_printf_float+0xb6>
 8005546:	2301      	movs	r3, #1
 8005548:	465a      	mov	r2, fp
 800554a:	4631      	mov	r1, r6
 800554c:	4628      	mov	r0, r5
 800554e:	47b8      	blx	r7
 8005550:	3001      	adds	r0, #1
 8005552:	f43f ae56 	beq.w	8005202 <_printf_float+0xb6>
 8005556:	f108 0801 	add.w	r8, r8, #1
 800555a:	45d0      	cmp	r8, sl
 800555c:	dbf3      	blt.n	8005546 <_printf_float+0x3fa>
 800555e:	464b      	mov	r3, r9
 8005560:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005564:	e6df      	b.n	8005326 <_printf_float+0x1da>
 8005566:	f04f 0800 	mov.w	r8, #0
 800556a:	f104 0b1a 	add.w	fp, r4, #26
 800556e:	e7f4      	b.n	800555a <_printf_float+0x40e>
 8005570:	2301      	movs	r3, #1
 8005572:	4642      	mov	r2, r8
 8005574:	e7e1      	b.n	800553a <_printf_float+0x3ee>
 8005576:	2301      	movs	r3, #1
 8005578:	464a      	mov	r2, r9
 800557a:	4631      	mov	r1, r6
 800557c:	4628      	mov	r0, r5
 800557e:	47b8      	blx	r7
 8005580:	3001      	adds	r0, #1
 8005582:	f43f ae3e 	beq.w	8005202 <_printf_float+0xb6>
 8005586:	f108 0801 	add.w	r8, r8, #1
 800558a:	68e3      	ldr	r3, [r4, #12]
 800558c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800558e:	1a5b      	subs	r3, r3, r1
 8005590:	4543      	cmp	r3, r8
 8005592:	dcf0      	bgt.n	8005576 <_printf_float+0x42a>
 8005594:	e6fc      	b.n	8005390 <_printf_float+0x244>
 8005596:	f04f 0800 	mov.w	r8, #0
 800559a:	f104 0919 	add.w	r9, r4, #25
 800559e:	e7f4      	b.n	800558a <_printf_float+0x43e>

080055a0 <_printf_common>:
 80055a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a4:	4616      	mov	r6, r2
 80055a6:	4698      	mov	r8, r3
 80055a8:	688a      	ldr	r2, [r1, #8]
 80055aa:	690b      	ldr	r3, [r1, #16]
 80055ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bfb8      	it	lt
 80055b4:	4613      	movlt	r3, r2
 80055b6:	6033      	str	r3, [r6, #0]
 80055b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055bc:	4607      	mov	r7, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	b10a      	cbz	r2, 80055c6 <_printf_common+0x26>
 80055c2:	3301      	adds	r3, #1
 80055c4:	6033      	str	r3, [r6, #0]
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	0699      	lsls	r1, r3, #26
 80055ca:	bf42      	ittt	mi
 80055cc:	6833      	ldrmi	r3, [r6, #0]
 80055ce:	3302      	addmi	r3, #2
 80055d0:	6033      	strmi	r3, [r6, #0]
 80055d2:	6825      	ldr	r5, [r4, #0]
 80055d4:	f015 0506 	ands.w	r5, r5, #6
 80055d8:	d106      	bne.n	80055e8 <_printf_common+0x48>
 80055da:	f104 0a19 	add.w	sl, r4, #25
 80055de:	68e3      	ldr	r3, [r4, #12]
 80055e0:	6832      	ldr	r2, [r6, #0]
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	42ab      	cmp	r3, r5
 80055e6:	dc26      	bgt.n	8005636 <_printf_common+0x96>
 80055e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055ec:	6822      	ldr	r2, [r4, #0]
 80055ee:	3b00      	subs	r3, #0
 80055f0:	bf18      	it	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	0692      	lsls	r2, r2, #26
 80055f6:	d42b      	bmi.n	8005650 <_printf_common+0xb0>
 80055f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055fc:	4641      	mov	r1, r8
 80055fe:	4638      	mov	r0, r7
 8005600:	47c8      	blx	r9
 8005602:	3001      	adds	r0, #1
 8005604:	d01e      	beq.n	8005644 <_printf_common+0xa4>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	6922      	ldr	r2, [r4, #16]
 800560a:	f003 0306 	and.w	r3, r3, #6
 800560e:	2b04      	cmp	r3, #4
 8005610:	bf02      	ittt	eq
 8005612:	68e5      	ldreq	r5, [r4, #12]
 8005614:	6833      	ldreq	r3, [r6, #0]
 8005616:	1aed      	subeq	r5, r5, r3
 8005618:	68a3      	ldr	r3, [r4, #8]
 800561a:	bf0c      	ite	eq
 800561c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005620:	2500      	movne	r5, #0
 8005622:	4293      	cmp	r3, r2
 8005624:	bfc4      	itt	gt
 8005626:	1a9b      	subgt	r3, r3, r2
 8005628:	18ed      	addgt	r5, r5, r3
 800562a:	2600      	movs	r6, #0
 800562c:	341a      	adds	r4, #26
 800562e:	42b5      	cmp	r5, r6
 8005630:	d11a      	bne.n	8005668 <_printf_common+0xc8>
 8005632:	2000      	movs	r0, #0
 8005634:	e008      	b.n	8005648 <_printf_common+0xa8>
 8005636:	2301      	movs	r3, #1
 8005638:	4652      	mov	r2, sl
 800563a:	4641      	mov	r1, r8
 800563c:	4638      	mov	r0, r7
 800563e:	47c8      	blx	r9
 8005640:	3001      	adds	r0, #1
 8005642:	d103      	bne.n	800564c <_printf_common+0xac>
 8005644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564c:	3501      	adds	r5, #1
 800564e:	e7c6      	b.n	80055de <_printf_common+0x3e>
 8005650:	18e1      	adds	r1, r4, r3
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	2030      	movs	r0, #48	@ 0x30
 8005656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800565a:	4422      	add	r2, r4
 800565c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005664:	3302      	adds	r3, #2
 8005666:	e7c7      	b.n	80055f8 <_printf_common+0x58>
 8005668:	2301      	movs	r3, #1
 800566a:	4622      	mov	r2, r4
 800566c:	4641      	mov	r1, r8
 800566e:	4638      	mov	r0, r7
 8005670:	47c8      	blx	r9
 8005672:	3001      	adds	r0, #1
 8005674:	d0e6      	beq.n	8005644 <_printf_common+0xa4>
 8005676:	3601      	adds	r6, #1
 8005678:	e7d9      	b.n	800562e <_printf_common+0x8e>
	...

0800567c <_printf_i>:
 800567c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005680:	7e0f      	ldrb	r7, [r1, #24]
 8005682:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005684:	2f78      	cmp	r7, #120	@ 0x78
 8005686:	4691      	mov	r9, r2
 8005688:	4680      	mov	r8, r0
 800568a:	460c      	mov	r4, r1
 800568c:	469a      	mov	sl, r3
 800568e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005692:	d807      	bhi.n	80056a4 <_printf_i+0x28>
 8005694:	2f62      	cmp	r7, #98	@ 0x62
 8005696:	d80a      	bhi.n	80056ae <_printf_i+0x32>
 8005698:	2f00      	cmp	r7, #0
 800569a:	f000 80d1 	beq.w	8005840 <_printf_i+0x1c4>
 800569e:	2f58      	cmp	r7, #88	@ 0x58
 80056a0:	f000 80b8 	beq.w	8005814 <_printf_i+0x198>
 80056a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056ac:	e03a      	b.n	8005724 <_printf_i+0xa8>
 80056ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056b2:	2b15      	cmp	r3, #21
 80056b4:	d8f6      	bhi.n	80056a4 <_printf_i+0x28>
 80056b6:	a101      	add	r1, pc, #4	@ (adr r1, 80056bc <_printf_i+0x40>)
 80056b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056bc:	08005715 	.word	0x08005715
 80056c0:	08005729 	.word	0x08005729
 80056c4:	080056a5 	.word	0x080056a5
 80056c8:	080056a5 	.word	0x080056a5
 80056cc:	080056a5 	.word	0x080056a5
 80056d0:	080056a5 	.word	0x080056a5
 80056d4:	08005729 	.word	0x08005729
 80056d8:	080056a5 	.word	0x080056a5
 80056dc:	080056a5 	.word	0x080056a5
 80056e0:	080056a5 	.word	0x080056a5
 80056e4:	080056a5 	.word	0x080056a5
 80056e8:	08005827 	.word	0x08005827
 80056ec:	08005753 	.word	0x08005753
 80056f0:	080057e1 	.word	0x080057e1
 80056f4:	080056a5 	.word	0x080056a5
 80056f8:	080056a5 	.word	0x080056a5
 80056fc:	08005849 	.word	0x08005849
 8005700:	080056a5 	.word	0x080056a5
 8005704:	08005753 	.word	0x08005753
 8005708:	080056a5 	.word	0x080056a5
 800570c:	080056a5 	.word	0x080056a5
 8005710:	080057e9 	.word	0x080057e9
 8005714:	6833      	ldr	r3, [r6, #0]
 8005716:	1d1a      	adds	r2, r3, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6032      	str	r2, [r6, #0]
 800571c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005724:	2301      	movs	r3, #1
 8005726:	e09c      	b.n	8005862 <_printf_i+0x1e6>
 8005728:	6833      	ldr	r3, [r6, #0]
 800572a:	6820      	ldr	r0, [r4, #0]
 800572c:	1d19      	adds	r1, r3, #4
 800572e:	6031      	str	r1, [r6, #0]
 8005730:	0606      	lsls	r6, r0, #24
 8005732:	d501      	bpl.n	8005738 <_printf_i+0xbc>
 8005734:	681d      	ldr	r5, [r3, #0]
 8005736:	e003      	b.n	8005740 <_printf_i+0xc4>
 8005738:	0645      	lsls	r5, r0, #25
 800573a:	d5fb      	bpl.n	8005734 <_printf_i+0xb8>
 800573c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005740:	2d00      	cmp	r5, #0
 8005742:	da03      	bge.n	800574c <_printf_i+0xd0>
 8005744:	232d      	movs	r3, #45	@ 0x2d
 8005746:	426d      	negs	r5, r5
 8005748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800574c:	4858      	ldr	r0, [pc, #352]	@ (80058b0 <_printf_i+0x234>)
 800574e:	230a      	movs	r3, #10
 8005750:	e011      	b.n	8005776 <_printf_i+0xfa>
 8005752:	6821      	ldr	r1, [r4, #0]
 8005754:	6833      	ldr	r3, [r6, #0]
 8005756:	0608      	lsls	r0, r1, #24
 8005758:	f853 5b04 	ldr.w	r5, [r3], #4
 800575c:	d402      	bmi.n	8005764 <_printf_i+0xe8>
 800575e:	0649      	lsls	r1, r1, #25
 8005760:	bf48      	it	mi
 8005762:	b2ad      	uxthmi	r5, r5
 8005764:	2f6f      	cmp	r7, #111	@ 0x6f
 8005766:	4852      	ldr	r0, [pc, #328]	@ (80058b0 <_printf_i+0x234>)
 8005768:	6033      	str	r3, [r6, #0]
 800576a:	bf14      	ite	ne
 800576c:	230a      	movne	r3, #10
 800576e:	2308      	moveq	r3, #8
 8005770:	2100      	movs	r1, #0
 8005772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005776:	6866      	ldr	r6, [r4, #4]
 8005778:	60a6      	str	r6, [r4, #8]
 800577a:	2e00      	cmp	r6, #0
 800577c:	db05      	blt.n	800578a <_printf_i+0x10e>
 800577e:	6821      	ldr	r1, [r4, #0]
 8005780:	432e      	orrs	r6, r5
 8005782:	f021 0104 	bic.w	r1, r1, #4
 8005786:	6021      	str	r1, [r4, #0]
 8005788:	d04b      	beq.n	8005822 <_printf_i+0x1a6>
 800578a:	4616      	mov	r6, r2
 800578c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005790:	fb03 5711 	mls	r7, r3, r1, r5
 8005794:	5dc7      	ldrb	r7, [r0, r7]
 8005796:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800579a:	462f      	mov	r7, r5
 800579c:	42bb      	cmp	r3, r7
 800579e:	460d      	mov	r5, r1
 80057a0:	d9f4      	bls.n	800578c <_printf_i+0x110>
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d10b      	bne.n	80057be <_printf_i+0x142>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	07df      	lsls	r7, r3, #31
 80057aa:	d508      	bpl.n	80057be <_printf_i+0x142>
 80057ac:	6923      	ldr	r3, [r4, #16]
 80057ae:	6861      	ldr	r1, [r4, #4]
 80057b0:	4299      	cmp	r1, r3
 80057b2:	bfde      	ittt	le
 80057b4:	2330      	movle	r3, #48	@ 0x30
 80057b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057ba:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80057be:	1b92      	subs	r2, r2, r6
 80057c0:	6122      	str	r2, [r4, #16]
 80057c2:	f8cd a000 	str.w	sl, [sp]
 80057c6:	464b      	mov	r3, r9
 80057c8:	aa03      	add	r2, sp, #12
 80057ca:	4621      	mov	r1, r4
 80057cc:	4640      	mov	r0, r8
 80057ce:	f7ff fee7 	bl	80055a0 <_printf_common>
 80057d2:	3001      	adds	r0, #1
 80057d4:	d14a      	bne.n	800586c <_printf_i+0x1f0>
 80057d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057da:	b004      	add	sp, #16
 80057dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	f043 0320 	orr.w	r3, r3, #32
 80057e6:	6023      	str	r3, [r4, #0]
 80057e8:	4832      	ldr	r0, [pc, #200]	@ (80058b4 <_printf_i+0x238>)
 80057ea:	2778      	movs	r7, #120	@ 0x78
 80057ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	6831      	ldr	r1, [r6, #0]
 80057f4:	061f      	lsls	r7, r3, #24
 80057f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80057fa:	d402      	bmi.n	8005802 <_printf_i+0x186>
 80057fc:	065f      	lsls	r7, r3, #25
 80057fe:	bf48      	it	mi
 8005800:	b2ad      	uxthmi	r5, r5
 8005802:	6031      	str	r1, [r6, #0]
 8005804:	07d9      	lsls	r1, r3, #31
 8005806:	bf44      	itt	mi
 8005808:	f043 0320 	orrmi.w	r3, r3, #32
 800580c:	6023      	strmi	r3, [r4, #0]
 800580e:	b11d      	cbz	r5, 8005818 <_printf_i+0x19c>
 8005810:	2310      	movs	r3, #16
 8005812:	e7ad      	b.n	8005770 <_printf_i+0xf4>
 8005814:	4826      	ldr	r0, [pc, #152]	@ (80058b0 <_printf_i+0x234>)
 8005816:	e7e9      	b.n	80057ec <_printf_i+0x170>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	f023 0320 	bic.w	r3, r3, #32
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	e7f6      	b.n	8005810 <_printf_i+0x194>
 8005822:	4616      	mov	r6, r2
 8005824:	e7bd      	b.n	80057a2 <_printf_i+0x126>
 8005826:	6833      	ldr	r3, [r6, #0]
 8005828:	6825      	ldr	r5, [r4, #0]
 800582a:	6961      	ldr	r1, [r4, #20]
 800582c:	1d18      	adds	r0, r3, #4
 800582e:	6030      	str	r0, [r6, #0]
 8005830:	062e      	lsls	r6, r5, #24
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	d501      	bpl.n	800583a <_printf_i+0x1be>
 8005836:	6019      	str	r1, [r3, #0]
 8005838:	e002      	b.n	8005840 <_printf_i+0x1c4>
 800583a:	0668      	lsls	r0, r5, #25
 800583c:	d5fb      	bpl.n	8005836 <_printf_i+0x1ba>
 800583e:	8019      	strh	r1, [r3, #0]
 8005840:	2300      	movs	r3, #0
 8005842:	6123      	str	r3, [r4, #16]
 8005844:	4616      	mov	r6, r2
 8005846:	e7bc      	b.n	80057c2 <_printf_i+0x146>
 8005848:	6833      	ldr	r3, [r6, #0]
 800584a:	1d1a      	adds	r2, r3, #4
 800584c:	6032      	str	r2, [r6, #0]
 800584e:	681e      	ldr	r6, [r3, #0]
 8005850:	6862      	ldr	r2, [r4, #4]
 8005852:	2100      	movs	r1, #0
 8005854:	4630      	mov	r0, r6
 8005856:	f7fa fcbb 	bl	80001d0 <memchr>
 800585a:	b108      	cbz	r0, 8005860 <_printf_i+0x1e4>
 800585c:	1b80      	subs	r0, r0, r6
 800585e:	6060      	str	r0, [r4, #4]
 8005860:	6863      	ldr	r3, [r4, #4]
 8005862:	6123      	str	r3, [r4, #16]
 8005864:	2300      	movs	r3, #0
 8005866:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800586a:	e7aa      	b.n	80057c2 <_printf_i+0x146>
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	4632      	mov	r2, r6
 8005870:	4649      	mov	r1, r9
 8005872:	4640      	mov	r0, r8
 8005874:	47d0      	blx	sl
 8005876:	3001      	adds	r0, #1
 8005878:	d0ad      	beq.n	80057d6 <_printf_i+0x15a>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	079b      	lsls	r3, r3, #30
 800587e:	d413      	bmi.n	80058a8 <_printf_i+0x22c>
 8005880:	68e0      	ldr	r0, [r4, #12]
 8005882:	9b03      	ldr	r3, [sp, #12]
 8005884:	4298      	cmp	r0, r3
 8005886:	bfb8      	it	lt
 8005888:	4618      	movlt	r0, r3
 800588a:	e7a6      	b.n	80057da <_printf_i+0x15e>
 800588c:	2301      	movs	r3, #1
 800588e:	4632      	mov	r2, r6
 8005890:	4649      	mov	r1, r9
 8005892:	4640      	mov	r0, r8
 8005894:	47d0      	blx	sl
 8005896:	3001      	adds	r0, #1
 8005898:	d09d      	beq.n	80057d6 <_printf_i+0x15a>
 800589a:	3501      	adds	r5, #1
 800589c:	68e3      	ldr	r3, [r4, #12]
 800589e:	9903      	ldr	r1, [sp, #12]
 80058a0:	1a5b      	subs	r3, r3, r1
 80058a2:	42ab      	cmp	r3, r5
 80058a4:	dcf2      	bgt.n	800588c <_printf_i+0x210>
 80058a6:	e7eb      	b.n	8005880 <_printf_i+0x204>
 80058a8:	2500      	movs	r5, #0
 80058aa:	f104 0619 	add.w	r6, r4, #25
 80058ae:	e7f5      	b.n	800589c <_printf_i+0x220>
 80058b0:	08007f6a 	.word	0x08007f6a
 80058b4:	08007f7b 	.word	0x08007f7b

080058b8 <std>:
 80058b8:	2300      	movs	r3, #0
 80058ba:	b510      	push	{r4, lr}
 80058bc:	4604      	mov	r4, r0
 80058be:	e9c0 3300 	strd	r3, r3, [r0]
 80058c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058c6:	6083      	str	r3, [r0, #8]
 80058c8:	8181      	strh	r1, [r0, #12]
 80058ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80058cc:	81c2      	strh	r2, [r0, #14]
 80058ce:	6183      	str	r3, [r0, #24]
 80058d0:	4619      	mov	r1, r3
 80058d2:	2208      	movs	r2, #8
 80058d4:	305c      	adds	r0, #92	@ 0x5c
 80058d6:	f000 f94c 	bl	8005b72 <memset>
 80058da:	4b0d      	ldr	r3, [pc, #52]	@ (8005910 <std+0x58>)
 80058dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80058de:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <std+0x5c>)
 80058e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005918 <std+0x60>)
 80058e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058e6:	4b0d      	ldr	r3, [pc, #52]	@ (800591c <std+0x64>)
 80058e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80058ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005920 <std+0x68>)
 80058ec:	6224      	str	r4, [r4, #32]
 80058ee:	429c      	cmp	r4, r3
 80058f0:	d006      	beq.n	8005900 <std+0x48>
 80058f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058f6:	4294      	cmp	r4, r2
 80058f8:	d002      	beq.n	8005900 <std+0x48>
 80058fa:	33d0      	adds	r3, #208	@ 0xd0
 80058fc:	429c      	cmp	r4, r3
 80058fe:	d105      	bne.n	800590c <std+0x54>
 8005900:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005908:	f000 ba22 	b.w	8005d50 <__retarget_lock_init_recursive>
 800590c:	bd10      	pop	{r4, pc}
 800590e:	bf00      	nop
 8005910:	08005aed 	.word	0x08005aed
 8005914:	08005b0f 	.word	0x08005b0f
 8005918:	08005b47 	.word	0x08005b47
 800591c:	08005b6b 	.word	0x08005b6b
 8005920:	200003b0 	.word	0x200003b0

08005924 <stdio_exit_handler>:
 8005924:	4a02      	ldr	r2, [pc, #8]	@ (8005930 <stdio_exit_handler+0xc>)
 8005926:	4903      	ldr	r1, [pc, #12]	@ (8005934 <stdio_exit_handler+0x10>)
 8005928:	4803      	ldr	r0, [pc, #12]	@ (8005938 <stdio_exit_handler+0x14>)
 800592a:	f000 b869 	b.w	8005a00 <_fwalk_sglue>
 800592e:	bf00      	nop
 8005930:	2000000c 	.word	0x2000000c
 8005934:	08007705 	.word	0x08007705
 8005938:	2000001c 	.word	0x2000001c

0800593c <cleanup_stdio>:
 800593c:	6841      	ldr	r1, [r0, #4]
 800593e:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <cleanup_stdio+0x34>)
 8005940:	4299      	cmp	r1, r3
 8005942:	b510      	push	{r4, lr}
 8005944:	4604      	mov	r4, r0
 8005946:	d001      	beq.n	800594c <cleanup_stdio+0x10>
 8005948:	f001 fedc 	bl	8007704 <_fflush_r>
 800594c:	68a1      	ldr	r1, [r4, #8]
 800594e:	4b09      	ldr	r3, [pc, #36]	@ (8005974 <cleanup_stdio+0x38>)
 8005950:	4299      	cmp	r1, r3
 8005952:	d002      	beq.n	800595a <cleanup_stdio+0x1e>
 8005954:	4620      	mov	r0, r4
 8005956:	f001 fed5 	bl	8007704 <_fflush_r>
 800595a:	68e1      	ldr	r1, [r4, #12]
 800595c:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <cleanup_stdio+0x3c>)
 800595e:	4299      	cmp	r1, r3
 8005960:	d004      	beq.n	800596c <cleanup_stdio+0x30>
 8005962:	4620      	mov	r0, r4
 8005964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005968:	f001 becc 	b.w	8007704 <_fflush_r>
 800596c:	bd10      	pop	{r4, pc}
 800596e:	bf00      	nop
 8005970:	200003b0 	.word	0x200003b0
 8005974:	20000418 	.word	0x20000418
 8005978:	20000480 	.word	0x20000480

0800597c <global_stdio_init.part.0>:
 800597c:	b510      	push	{r4, lr}
 800597e:	4b0b      	ldr	r3, [pc, #44]	@ (80059ac <global_stdio_init.part.0+0x30>)
 8005980:	4c0b      	ldr	r4, [pc, #44]	@ (80059b0 <global_stdio_init.part.0+0x34>)
 8005982:	4a0c      	ldr	r2, [pc, #48]	@ (80059b4 <global_stdio_init.part.0+0x38>)
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	4620      	mov	r0, r4
 8005988:	2200      	movs	r2, #0
 800598a:	2104      	movs	r1, #4
 800598c:	f7ff ff94 	bl	80058b8 <std>
 8005990:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005994:	2201      	movs	r2, #1
 8005996:	2109      	movs	r1, #9
 8005998:	f7ff ff8e 	bl	80058b8 <std>
 800599c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059a0:	2202      	movs	r2, #2
 80059a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a6:	2112      	movs	r1, #18
 80059a8:	f7ff bf86 	b.w	80058b8 <std>
 80059ac:	200004e8 	.word	0x200004e8
 80059b0:	200003b0 	.word	0x200003b0
 80059b4:	08005925 	.word	0x08005925

080059b8 <__sfp_lock_acquire>:
 80059b8:	4801      	ldr	r0, [pc, #4]	@ (80059c0 <__sfp_lock_acquire+0x8>)
 80059ba:	f000 b9ca 	b.w	8005d52 <__retarget_lock_acquire_recursive>
 80059be:	bf00      	nop
 80059c0:	200004f1 	.word	0x200004f1

080059c4 <__sfp_lock_release>:
 80059c4:	4801      	ldr	r0, [pc, #4]	@ (80059cc <__sfp_lock_release+0x8>)
 80059c6:	f000 b9c5 	b.w	8005d54 <__retarget_lock_release_recursive>
 80059ca:	bf00      	nop
 80059cc:	200004f1 	.word	0x200004f1

080059d0 <__sinit>:
 80059d0:	b510      	push	{r4, lr}
 80059d2:	4604      	mov	r4, r0
 80059d4:	f7ff fff0 	bl	80059b8 <__sfp_lock_acquire>
 80059d8:	6a23      	ldr	r3, [r4, #32]
 80059da:	b11b      	cbz	r3, 80059e4 <__sinit+0x14>
 80059dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e0:	f7ff bff0 	b.w	80059c4 <__sfp_lock_release>
 80059e4:	4b04      	ldr	r3, [pc, #16]	@ (80059f8 <__sinit+0x28>)
 80059e6:	6223      	str	r3, [r4, #32]
 80059e8:	4b04      	ldr	r3, [pc, #16]	@ (80059fc <__sinit+0x2c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1f5      	bne.n	80059dc <__sinit+0xc>
 80059f0:	f7ff ffc4 	bl	800597c <global_stdio_init.part.0>
 80059f4:	e7f2      	b.n	80059dc <__sinit+0xc>
 80059f6:	bf00      	nop
 80059f8:	0800593d 	.word	0x0800593d
 80059fc:	200004e8 	.word	0x200004e8

08005a00 <_fwalk_sglue>:
 8005a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a04:	4607      	mov	r7, r0
 8005a06:	4688      	mov	r8, r1
 8005a08:	4614      	mov	r4, r2
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a10:	f1b9 0901 	subs.w	r9, r9, #1
 8005a14:	d505      	bpl.n	8005a22 <_fwalk_sglue+0x22>
 8005a16:	6824      	ldr	r4, [r4, #0]
 8005a18:	2c00      	cmp	r4, #0
 8005a1a:	d1f7      	bne.n	8005a0c <_fwalk_sglue+0xc>
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a22:	89ab      	ldrh	r3, [r5, #12]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d907      	bls.n	8005a38 <_fwalk_sglue+0x38>
 8005a28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	d003      	beq.n	8005a38 <_fwalk_sglue+0x38>
 8005a30:	4629      	mov	r1, r5
 8005a32:	4638      	mov	r0, r7
 8005a34:	47c0      	blx	r8
 8005a36:	4306      	orrs	r6, r0
 8005a38:	3568      	adds	r5, #104	@ 0x68
 8005a3a:	e7e9      	b.n	8005a10 <_fwalk_sglue+0x10>

08005a3c <sniprintf>:
 8005a3c:	b40c      	push	{r2, r3}
 8005a3e:	b530      	push	{r4, r5, lr}
 8005a40:	4b18      	ldr	r3, [pc, #96]	@ (8005aa4 <sniprintf+0x68>)
 8005a42:	1e0c      	subs	r4, r1, #0
 8005a44:	681d      	ldr	r5, [r3, #0]
 8005a46:	b09d      	sub	sp, #116	@ 0x74
 8005a48:	da08      	bge.n	8005a5c <sniprintf+0x20>
 8005a4a:	238b      	movs	r3, #139	@ 0x8b
 8005a4c:	602b      	str	r3, [r5, #0]
 8005a4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a52:	b01d      	add	sp, #116	@ 0x74
 8005a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a58:	b002      	add	sp, #8
 8005a5a:	4770      	bx	lr
 8005a5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005a60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005a6a:	bf14      	ite	ne
 8005a6c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005a70:	4623      	moveq	r3, r4
 8005a72:	9304      	str	r3, [sp, #16]
 8005a74:	9307      	str	r3, [sp, #28]
 8005a76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a7a:	9002      	str	r0, [sp, #8]
 8005a7c:	9006      	str	r0, [sp, #24]
 8005a7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a84:	ab21      	add	r3, sp, #132	@ 0x84
 8005a86:	a902      	add	r1, sp, #8
 8005a88:	4628      	mov	r0, r5
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	f001 fcba 	bl	8007404 <_svfiprintf_r>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	bfbc      	itt	lt
 8005a94:	238b      	movlt	r3, #139	@ 0x8b
 8005a96:	602b      	strlt	r3, [r5, #0]
 8005a98:	2c00      	cmp	r4, #0
 8005a9a:	d0da      	beq.n	8005a52 <sniprintf+0x16>
 8005a9c:	9b02      	ldr	r3, [sp, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	e7d6      	b.n	8005a52 <sniprintf+0x16>
 8005aa4:	20000018 	.word	0x20000018

08005aa8 <siprintf>:
 8005aa8:	b40e      	push	{r1, r2, r3}
 8005aaa:	b510      	push	{r4, lr}
 8005aac:	b09d      	sub	sp, #116	@ 0x74
 8005aae:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005ab0:	9002      	str	r0, [sp, #8]
 8005ab2:	9006      	str	r0, [sp, #24]
 8005ab4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ab8:	480a      	ldr	r0, [pc, #40]	@ (8005ae4 <siprintf+0x3c>)
 8005aba:	9107      	str	r1, [sp, #28]
 8005abc:	9104      	str	r1, [sp, #16]
 8005abe:	490a      	ldr	r1, [pc, #40]	@ (8005ae8 <siprintf+0x40>)
 8005ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ac4:	9105      	str	r1, [sp, #20]
 8005ac6:	2400      	movs	r4, #0
 8005ac8:	a902      	add	r1, sp, #8
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	9301      	str	r3, [sp, #4]
 8005ace:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005ad0:	f001 fc98 	bl	8007404 <_svfiprintf_r>
 8005ad4:	9b02      	ldr	r3, [sp, #8]
 8005ad6:	701c      	strb	r4, [r3, #0]
 8005ad8:	b01d      	add	sp, #116	@ 0x74
 8005ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ade:	b003      	add	sp, #12
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	20000018 	.word	0x20000018
 8005ae8:	ffff0208 	.word	0xffff0208

08005aec <__sread>:
 8005aec:	b510      	push	{r4, lr}
 8005aee:	460c      	mov	r4, r1
 8005af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af4:	f000 f8de 	bl	8005cb4 <_read_r>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	bfab      	itete	ge
 8005afc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005afe:	89a3      	ldrhlt	r3, [r4, #12]
 8005b00:	181b      	addge	r3, r3, r0
 8005b02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b06:	bfac      	ite	ge
 8005b08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b0a:	81a3      	strhlt	r3, [r4, #12]
 8005b0c:	bd10      	pop	{r4, pc}

08005b0e <__swrite>:
 8005b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b12:	461f      	mov	r7, r3
 8005b14:	898b      	ldrh	r3, [r1, #12]
 8005b16:	05db      	lsls	r3, r3, #23
 8005b18:	4605      	mov	r5, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4616      	mov	r6, r2
 8005b1e:	d505      	bpl.n	8005b2c <__swrite+0x1e>
 8005b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b24:	2302      	movs	r3, #2
 8005b26:	2200      	movs	r2, #0
 8005b28:	f000 f8b2 	bl	8005c90 <_lseek_r>
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	4632      	mov	r2, r6
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b42:	f000 b8c9 	b.w	8005cd8 <_write_r>

08005b46 <__sseek>:
 8005b46:	b510      	push	{r4, lr}
 8005b48:	460c      	mov	r4, r1
 8005b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4e:	f000 f89f 	bl	8005c90 <_lseek_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	bf15      	itete	ne
 8005b58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b62:	81a3      	strheq	r3, [r4, #12]
 8005b64:	bf18      	it	ne
 8005b66:	81a3      	strhne	r3, [r4, #12]
 8005b68:	bd10      	pop	{r4, pc}

08005b6a <__sclose>:
 8005b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6e:	f000 b87f 	b.w	8005c70 <_close_r>

08005b72 <memset>:
 8005b72:	4402      	add	r2, r0
 8005b74:	4603      	mov	r3, r0
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d100      	bne.n	8005b7c <memset+0xa>
 8005b7a:	4770      	bx	lr
 8005b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8005b80:	e7f9      	b.n	8005b76 <memset+0x4>
	...

08005b84 <strtok>:
 8005b84:	4b16      	ldr	r3, [pc, #88]	@ (8005be0 <strtok+0x5c>)
 8005b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8a:	681f      	ldr	r7, [r3, #0]
 8005b8c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005b8e:	4605      	mov	r5, r0
 8005b90:	460e      	mov	r6, r1
 8005b92:	b9ec      	cbnz	r4, 8005bd0 <strtok+0x4c>
 8005b94:	2050      	movs	r0, #80	@ 0x50
 8005b96:	f000 ffa9 	bl	8006aec <malloc>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	6478      	str	r0, [r7, #68]	@ 0x44
 8005b9e:	b920      	cbnz	r0, 8005baa <strtok+0x26>
 8005ba0:	4b10      	ldr	r3, [pc, #64]	@ (8005be4 <strtok+0x60>)
 8005ba2:	4811      	ldr	r0, [pc, #68]	@ (8005be8 <strtok+0x64>)
 8005ba4:	215b      	movs	r1, #91	@ 0x5b
 8005ba6:	f000 f8df 	bl	8005d68 <__assert_func>
 8005baa:	e9c0 4400 	strd	r4, r4, [r0]
 8005bae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005bb2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005bb6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005bba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005bbe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005bc2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005bc6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005bca:	6184      	str	r4, [r0, #24]
 8005bcc:	7704      	strb	r4, [r0, #28]
 8005bce:	6244      	str	r4, [r0, #36]	@ 0x24
 8005bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bdc:	f000 b806 	b.w	8005bec <__strtok_r>
 8005be0:	20000018 	.word	0x20000018
 8005be4:	08007f8c 	.word	0x08007f8c
 8005be8:	08007fa3 	.word	0x08007fa3

08005bec <__strtok_r>:
 8005bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bee:	4604      	mov	r4, r0
 8005bf0:	b908      	cbnz	r0, 8005bf6 <__strtok_r+0xa>
 8005bf2:	6814      	ldr	r4, [r2, #0]
 8005bf4:	b144      	cbz	r4, 8005c08 <__strtok_r+0x1c>
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005bfc:	460f      	mov	r7, r1
 8005bfe:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005c02:	b91e      	cbnz	r6, 8005c0c <__strtok_r+0x20>
 8005c04:	b965      	cbnz	r5, 8005c20 <__strtok_r+0x34>
 8005c06:	6015      	str	r5, [r2, #0]
 8005c08:	2000      	movs	r0, #0
 8005c0a:	e005      	b.n	8005c18 <__strtok_r+0x2c>
 8005c0c:	42b5      	cmp	r5, r6
 8005c0e:	d1f6      	bne.n	8005bfe <__strtok_r+0x12>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f0      	bne.n	8005bf6 <__strtok_r+0xa>
 8005c14:	6014      	str	r4, [r2, #0]
 8005c16:	7003      	strb	r3, [r0, #0]
 8005c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1a:	461c      	mov	r4, r3
 8005c1c:	e00c      	b.n	8005c38 <__strtok_r+0x4c>
 8005c1e:	b91d      	cbnz	r5, 8005c28 <__strtok_r+0x3c>
 8005c20:	4627      	mov	r7, r4
 8005c22:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c26:	460e      	mov	r6, r1
 8005c28:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005c2c:	42ab      	cmp	r3, r5
 8005c2e:	d1f6      	bne.n	8005c1e <__strtok_r+0x32>
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f2      	beq.n	8005c1a <__strtok_r+0x2e>
 8005c34:	2300      	movs	r3, #0
 8005c36:	703b      	strb	r3, [r7, #0]
 8005c38:	6014      	str	r4, [r2, #0]
 8005c3a:	e7ed      	b.n	8005c18 <__strtok_r+0x2c>

08005c3c <strstr>:
 8005c3c:	780a      	ldrb	r2, [r1, #0]
 8005c3e:	b570      	push	{r4, r5, r6, lr}
 8005c40:	b96a      	cbnz	r2, 8005c5e <strstr+0x22>
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d109      	bne.n	8005c5c <strstr+0x20>
 8005c48:	460c      	mov	r4, r1
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0f6      	beq.n	8005c42 <strstr+0x6>
 8005c54:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005c58:	429e      	cmp	r6, r3
 8005c5a:	d0f7      	beq.n	8005c4c <strstr+0x10>
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	7803      	ldrb	r3, [r0, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1ef      	bne.n	8005c44 <strstr+0x8>
 8005c64:	4618      	mov	r0, r3
 8005c66:	e7ec      	b.n	8005c42 <strstr+0x6>

08005c68 <_localeconv_r>:
 8005c68:	4800      	ldr	r0, [pc, #0]	@ (8005c6c <_localeconv_r+0x4>)
 8005c6a:	4770      	bx	lr
 8005c6c:	20000158 	.word	0x20000158

08005c70 <_close_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4d06      	ldr	r5, [pc, #24]	@ (8005c8c <_close_r+0x1c>)
 8005c74:	2300      	movs	r3, #0
 8005c76:	4604      	mov	r4, r0
 8005c78:	4608      	mov	r0, r1
 8005c7a:	602b      	str	r3, [r5, #0]
 8005c7c:	f7fc f864 	bl	8001d48 <_close>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_close_r+0x1a>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_close_r+0x1a>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	200004ec 	.word	0x200004ec

08005c90 <_lseek_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	4d07      	ldr	r5, [pc, #28]	@ (8005cb0 <_lseek_r+0x20>)
 8005c94:	4604      	mov	r4, r0
 8005c96:	4608      	mov	r0, r1
 8005c98:	4611      	mov	r1, r2
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	602a      	str	r2, [r5, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f7fc f879 	bl	8001d96 <_lseek>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_lseek_r+0x1e>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_lseek_r+0x1e>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	200004ec 	.word	0x200004ec

08005cb4 <_read_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d07      	ldr	r5, [pc, #28]	@ (8005cd4 <_read_r+0x20>)
 8005cb8:	4604      	mov	r4, r0
 8005cba:	4608      	mov	r0, r1
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	602a      	str	r2, [r5, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f7fc f807 	bl	8001cd6 <_read>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_read_r+0x1e>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_read_r+0x1e>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	200004ec 	.word	0x200004ec

08005cd8 <_write_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d07      	ldr	r5, [pc, #28]	@ (8005cf8 <_write_r+0x20>)
 8005cdc:	4604      	mov	r4, r0
 8005cde:	4608      	mov	r0, r1
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	602a      	str	r2, [r5, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f7fc f812 	bl	8001d10 <_write>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_write_r+0x1e>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_write_r+0x1e>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	200004ec 	.word	0x200004ec

08005cfc <__errno>:
 8005cfc:	4b01      	ldr	r3, [pc, #4]	@ (8005d04 <__errno+0x8>)
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	20000018 	.word	0x20000018

08005d08 <__libc_init_array>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005d40 <__libc_init_array+0x38>)
 8005d0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005d44 <__libc_init_array+0x3c>)
 8005d0e:	1b64      	subs	r4, r4, r5
 8005d10:	10a4      	asrs	r4, r4, #2
 8005d12:	2600      	movs	r6, #0
 8005d14:	42a6      	cmp	r6, r4
 8005d16:	d109      	bne.n	8005d2c <__libc_init_array+0x24>
 8005d18:	4d0b      	ldr	r5, [pc, #44]	@ (8005d48 <__libc_init_array+0x40>)
 8005d1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005d4c <__libc_init_array+0x44>)
 8005d1c:	f002 f872 	bl	8007e04 <_init>
 8005d20:	1b64      	subs	r4, r4, r5
 8005d22:	10a4      	asrs	r4, r4, #2
 8005d24:	2600      	movs	r6, #0
 8005d26:	42a6      	cmp	r6, r4
 8005d28:	d105      	bne.n	8005d36 <__libc_init_array+0x2e>
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d30:	4798      	blx	r3
 8005d32:	3601      	adds	r6, #1
 8005d34:	e7ee      	b.n	8005d14 <__libc_init_array+0xc>
 8005d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d3a:	4798      	blx	r3
 8005d3c:	3601      	adds	r6, #1
 8005d3e:	e7f2      	b.n	8005d26 <__libc_init_array+0x1e>
 8005d40:	0800832c 	.word	0x0800832c
 8005d44:	0800832c 	.word	0x0800832c
 8005d48:	0800832c 	.word	0x0800832c
 8005d4c:	08008330 	.word	0x08008330

08005d50 <__retarget_lock_init_recursive>:
 8005d50:	4770      	bx	lr

08005d52 <__retarget_lock_acquire_recursive>:
 8005d52:	4770      	bx	lr

08005d54 <__retarget_lock_release_recursive>:
 8005d54:	4770      	bx	lr

08005d56 <strcpy>:
 8005d56:	4603      	mov	r3, r0
 8005d58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d5c:	f803 2b01 	strb.w	r2, [r3], #1
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	d1f9      	bne.n	8005d58 <strcpy+0x2>
 8005d64:	4770      	bx	lr
	...

08005d68 <__assert_func>:
 8005d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d6a:	4614      	mov	r4, r2
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4b09      	ldr	r3, [pc, #36]	@ (8005d94 <__assert_func+0x2c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4605      	mov	r5, r0
 8005d74:	68d8      	ldr	r0, [r3, #12]
 8005d76:	b14c      	cbz	r4, 8005d8c <__assert_func+0x24>
 8005d78:	4b07      	ldr	r3, [pc, #28]	@ (8005d98 <__assert_func+0x30>)
 8005d7a:	9100      	str	r1, [sp, #0]
 8005d7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d80:	4906      	ldr	r1, [pc, #24]	@ (8005d9c <__assert_func+0x34>)
 8005d82:	462b      	mov	r3, r5
 8005d84:	f001 fce6 	bl	8007754 <fiprintf>
 8005d88:	f001 fd2e 	bl	80077e8 <abort>
 8005d8c:	4b04      	ldr	r3, [pc, #16]	@ (8005da0 <__assert_func+0x38>)
 8005d8e:	461c      	mov	r4, r3
 8005d90:	e7f3      	b.n	8005d7a <__assert_func+0x12>
 8005d92:	bf00      	nop
 8005d94:	20000018 	.word	0x20000018
 8005d98:	08007ffd 	.word	0x08007ffd
 8005d9c:	0800800a 	.word	0x0800800a
 8005da0:	08008038 	.word	0x08008038

08005da4 <quorem>:
 8005da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	6903      	ldr	r3, [r0, #16]
 8005daa:	690c      	ldr	r4, [r1, #16]
 8005dac:	42a3      	cmp	r3, r4
 8005dae:	4607      	mov	r7, r0
 8005db0:	db7e      	blt.n	8005eb0 <quorem+0x10c>
 8005db2:	3c01      	subs	r4, #1
 8005db4:	f101 0814 	add.w	r8, r1, #20
 8005db8:	00a3      	lsls	r3, r4, #2
 8005dba:	f100 0514 	add.w	r5, r0, #20
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dd6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dda:	d32e      	bcc.n	8005e3a <quorem+0x96>
 8005ddc:	f04f 0a00 	mov.w	sl, #0
 8005de0:	46c4      	mov	ip, r8
 8005de2:	46ae      	mov	lr, r5
 8005de4:	46d3      	mov	fp, sl
 8005de6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005dea:	b298      	uxth	r0, r3
 8005dec:	fb06 a000 	mla	r0, r6, r0, sl
 8005df0:	0c02      	lsrs	r2, r0, #16
 8005df2:	0c1b      	lsrs	r3, r3, #16
 8005df4:	fb06 2303 	mla	r3, r6, r3, r2
 8005df8:	f8de 2000 	ldr.w	r2, [lr]
 8005dfc:	b280      	uxth	r0, r0
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	1a12      	subs	r2, r2, r0
 8005e02:	445a      	add	r2, fp
 8005e04:	f8de 0000 	ldr.w	r0, [lr]
 8005e08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005e12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005e16:	b292      	uxth	r2, r2
 8005e18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e1c:	45e1      	cmp	r9, ip
 8005e1e:	f84e 2b04 	str.w	r2, [lr], #4
 8005e22:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e26:	d2de      	bcs.n	8005de6 <quorem+0x42>
 8005e28:	9b00      	ldr	r3, [sp, #0]
 8005e2a:	58eb      	ldr	r3, [r5, r3]
 8005e2c:	b92b      	cbnz	r3, 8005e3a <quorem+0x96>
 8005e2e:	9b01      	ldr	r3, [sp, #4]
 8005e30:	3b04      	subs	r3, #4
 8005e32:	429d      	cmp	r5, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	d32f      	bcc.n	8005e98 <quorem+0xf4>
 8005e38:	613c      	str	r4, [r7, #16]
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f001 f97e 	bl	800713c <__mcmp>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	db25      	blt.n	8005e90 <quorem+0xec>
 8005e44:	4629      	mov	r1, r5
 8005e46:	2000      	movs	r0, #0
 8005e48:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e4c:	f8d1 c000 	ldr.w	ip, [r1]
 8005e50:	fa1f fe82 	uxth.w	lr, r2
 8005e54:	fa1f f38c 	uxth.w	r3, ip
 8005e58:	eba3 030e 	sub.w	r3, r3, lr
 8005e5c:	4403      	add	r3, r0
 8005e5e:	0c12      	lsrs	r2, r2, #16
 8005e60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e64:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e6e:	45c1      	cmp	r9, r8
 8005e70:	f841 3b04 	str.w	r3, [r1], #4
 8005e74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e78:	d2e6      	bcs.n	8005e48 <quorem+0xa4>
 8005e7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e82:	b922      	cbnz	r2, 8005e8e <quorem+0xea>
 8005e84:	3b04      	subs	r3, #4
 8005e86:	429d      	cmp	r5, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	d30b      	bcc.n	8005ea4 <quorem+0x100>
 8005e8c:	613c      	str	r4, [r7, #16]
 8005e8e:	3601      	adds	r6, #1
 8005e90:	4630      	mov	r0, r6
 8005e92:	b003      	add	sp, #12
 8005e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e98:	6812      	ldr	r2, [r2, #0]
 8005e9a:	3b04      	subs	r3, #4
 8005e9c:	2a00      	cmp	r2, #0
 8005e9e:	d1cb      	bne.n	8005e38 <quorem+0x94>
 8005ea0:	3c01      	subs	r4, #1
 8005ea2:	e7c6      	b.n	8005e32 <quorem+0x8e>
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	3b04      	subs	r3, #4
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	d1ef      	bne.n	8005e8c <quorem+0xe8>
 8005eac:	3c01      	subs	r4, #1
 8005eae:	e7ea      	b.n	8005e86 <quorem+0xe2>
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	e7ee      	b.n	8005e92 <quorem+0xee>
 8005eb4:	0000      	movs	r0, r0
	...

08005eb8 <_dtoa_r>:
 8005eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	69c7      	ldr	r7, [r0, #28]
 8005ebe:	b097      	sub	sp, #92	@ 0x5c
 8005ec0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005ec4:	ec55 4b10 	vmov	r4, r5, d0
 8005ec8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005eca:	9107      	str	r1, [sp, #28]
 8005ecc:	4681      	mov	r9, r0
 8005ece:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ed0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005ed2:	b97f      	cbnz	r7, 8005ef4 <_dtoa_r+0x3c>
 8005ed4:	2010      	movs	r0, #16
 8005ed6:	f000 fe09 	bl	8006aec <malloc>
 8005eda:	4602      	mov	r2, r0
 8005edc:	f8c9 001c 	str.w	r0, [r9, #28]
 8005ee0:	b920      	cbnz	r0, 8005eec <_dtoa_r+0x34>
 8005ee2:	4ba9      	ldr	r3, [pc, #676]	@ (8006188 <_dtoa_r+0x2d0>)
 8005ee4:	21ef      	movs	r1, #239	@ 0xef
 8005ee6:	48a9      	ldr	r0, [pc, #676]	@ (800618c <_dtoa_r+0x2d4>)
 8005ee8:	f7ff ff3e 	bl	8005d68 <__assert_func>
 8005eec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ef0:	6007      	str	r7, [r0, #0]
 8005ef2:	60c7      	str	r7, [r0, #12]
 8005ef4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ef8:	6819      	ldr	r1, [r3, #0]
 8005efa:	b159      	cbz	r1, 8005f14 <_dtoa_r+0x5c>
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	604a      	str	r2, [r1, #4]
 8005f00:	2301      	movs	r3, #1
 8005f02:	4093      	lsls	r3, r2
 8005f04:	608b      	str	r3, [r1, #8]
 8005f06:	4648      	mov	r0, r9
 8005f08:	f000 fee6 	bl	8006cd8 <_Bfree>
 8005f0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	1e2b      	subs	r3, r5, #0
 8005f16:	bfb9      	ittee	lt
 8005f18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f1c:	9305      	strlt	r3, [sp, #20]
 8005f1e:	2300      	movge	r3, #0
 8005f20:	6033      	strge	r3, [r6, #0]
 8005f22:	9f05      	ldr	r7, [sp, #20]
 8005f24:	4b9a      	ldr	r3, [pc, #616]	@ (8006190 <_dtoa_r+0x2d8>)
 8005f26:	bfbc      	itt	lt
 8005f28:	2201      	movlt	r2, #1
 8005f2a:	6032      	strlt	r2, [r6, #0]
 8005f2c:	43bb      	bics	r3, r7
 8005f2e:	d112      	bne.n	8005f56 <_dtoa_r+0x9e>
 8005f30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005f32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f3c:	4323      	orrs	r3, r4
 8005f3e:	f000 855a 	beq.w	80069f6 <_dtoa_r+0xb3e>
 8005f42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f44:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80061a4 <_dtoa_r+0x2ec>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 855c 	beq.w	8006a06 <_dtoa_r+0xb4e>
 8005f4e:	f10a 0303 	add.w	r3, sl, #3
 8005f52:	f000 bd56 	b.w	8006a02 <_dtoa_r+0xb4a>
 8005f56:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	ec51 0b17 	vmov	r0, r1, d7
 8005f60:	2300      	movs	r3, #0
 8005f62:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005f66:	f7fa fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f6a:	4680      	mov	r8, r0
 8005f6c:	b158      	cbz	r0, 8005f86 <_dtoa_r+0xce>
 8005f6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005f70:	2301      	movs	r3, #1
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f76:	b113      	cbz	r3, 8005f7e <_dtoa_r+0xc6>
 8005f78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f7a:	4b86      	ldr	r3, [pc, #536]	@ (8006194 <_dtoa_r+0x2dc>)
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80061a8 <_dtoa_r+0x2f0>
 8005f82:	f000 bd40 	b.w	8006a06 <_dtoa_r+0xb4e>
 8005f86:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005f8a:	aa14      	add	r2, sp, #80	@ 0x50
 8005f8c:	a915      	add	r1, sp, #84	@ 0x54
 8005f8e:	4648      	mov	r0, r9
 8005f90:	f001 f984 	bl	800729c <__d2b>
 8005f94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f98:	9002      	str	r0, [sp, #8]
 8005f9a:	2e00      	cmp	r6, #0
 8005f9c:	d078      	beq.n	8006090 <_dtoa_r+0x1d8>
 8005f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fa0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005fac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005fb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005fb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005fb8:	4619      	mov	r1, r3
 8005fba:	2200      	movs	r2, #0
 8005fbc:	4b76      	ldr	r3, [pc, #472]	@ (8006198 <_dtoa_r+0x2e0>)
 8005fbe:	f7fa f963 	bl	8000288 <__aeabi_dsub>
 8005fc2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006170 <_dtoa_r+0x2b8>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa fb16 	bl	80005f8 <__aeabi_dmul>
 8005fcc:	a36a      	add	r3, pc, #424	@ (adr r3, 8006178 <_dtoa_r+0x2c0>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f7fa f95b 	bl	800028c <__adddf3>
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4630      	mov	r0, r6
 8005fda:	460d      	mov	r5, r1
 8005fdc:	f7fa faa2 	bl	8000524 <__aeabi_i2d>
 8005fe0:	a367      	add	r3, pc, #412	@ (adr r3, 8006180 <_dtoa_r+0x2c8>)
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	f7fa fb07 	bl	80005f8 <__aeabi_dmul>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4620      	mov	r0, r4
 8005ff0:	4629      	mov	r1, r5
 8005ff2:	f7fa f94b 	bl	800028c <__adddf3>
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	f7fa fdad 	bl	8000b58 <__aeabi_d2iz>
 8005ffe:	2200      	movs	r2, #0
 8006000:	4607      	mov	r7, r0
 8006002:	2300      	movs	r3, #0
 8006004:	4620      	mov	r0, r4
 8006006:	4629      	mov	r1, r5
 8006008:	f7fa fd68 	bl	8000adc <__aeabi_dcmplt>
 800600c:	b140      	cbz	r0, 8006020 <_dtoa_r+0x168>
 800600e:	4638      	mov	r0, r7
 8006010:	f7fa fa88 	bl	8000524 <__aeabi_i2d>
 8006014:	4622      	mov	r2, r4
 8006016:	462b      	mov	r3, r5
 8006018:	f7fa fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800601c:	b900      	cbnz	r0, 8006020 <_dtoa_r+0x168>
 800601e:	3f01      	subs	r7, #1
 8006020:	2f16      	cmp	r7, #22
 8006022:	d852      	bhi.n	80060ca <_dtoa_r+0x212>
 8006024:	4b5d      	ldr	r3, [pc, #372]	@ (800619c <_dtoa_r+0x2e4>)
 8006026:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006032:	f7fa fd53 	bl	8000adc <__aeabi_dcmplt>
 8006036:	2800      	cmp	r0, #0
 8006038:	d049      	beq.n	80060ce <_dtoa_r+0x216>
 800603a:	3f01      	subs	r7, #1
 800603c:	2300      	movs	r3, #0
 800603e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006040:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006042:	1b9b      	subs	r3, r3, r6
 8006044:	1e5a      	subs	r2, r3, #1
 8006046:	bf45      	ittet	mi
 8006048:	f1c3 0301 	rsbmi	r3, r3, #1
 800604c:	9300      	strmi	r3, [sp, #0]
 800604e:	2300      	movpl	r3, #0
 8006050:	2300      	movmi	r3, #0
 8006052:	9206      	str	r2, [sp, #24]
 8006054:	bf54      	ite	pl
 8006056:	9300      	strpl	r3, [sp, #0]
 8006058:	9306      	strmi	r3, [sp, #24]
 800605a:	2f00      	cmp	r7, #0
 800605c:	db39      	blt.n	80060d2 <_dtoa_r+0x21a>
 800605e:	9b06      	ldr	r3, [sp, #24]
 8006060:	970d      	str	r7, [sp, #52]	@ 0x34
 8006062:	443b      	add	r3, r7
 8006064:	9306      	str	r3, [sp, #24]
 8006066:	2300      	movs	r3, #0
 8006068:	9308      	str	r3, [sp, #32]
 800606a:	9b07      	ldr	r3, [sp, #28]
 800606c:	2b09      	cmp	r3, #9
 800606e:	d863      	bhi.n	8006138 <_dtoa_r+0x280>
 8006070:	2b05      	cmp	r3, #5
 8006072:	bfc4      	itt	gt
 8006074:	3b04      	subgt	r3, #4
 8006076:	9307      	strgt	r3, [sp, #28]
 8006078:	9b07      	ldr	r3, [sp, #28]
 800607a:	f1a3 0302 	sub.w	r3, r3, #2
 800607e:	bfcc      	ite	gt
 8006080:	2400      	movgt	r4, #0
 8006082:	2401      	movle	r4, #1
 8006084:	2b03      	cmp	r3, #3
 8006086:	d863      	bhi.n	8006150 <_dtoa_r+0x298>
 8006088:	e8df f003 	tbb	[pc, r3]
 800608c:	2b375452 	.word	0x2b375452
 8006090:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006094:	441e      	add	r6, r3
 8006096:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800609a:	2b20      	cmp	r3, #32
 800609c:	bfc1      	itttt	gt
 800609e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80060a2:	409f      	lslgt	r7, r3
 80060a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80060a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80060ac:	bfd6      	itet	le
 80060ae:	f1c3 0320 	rsble	r3, r3, #32
 80060b2:	ea47 0003 	orrgt.w	r0, r7, r3
 80060b6:	fa04 f003 	lslle.w	r0, r4, r3
 80060ba:	f7fa fa23 	bl	8000504 <__aeabi_ui2d>
 80060be:	2201      	movs	r2, #1
 80060c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80060c4:	3e01      	subs	r6, #1
 80060c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80060c8:	e776      	b.n	8005fb8 <_dtoa_r+0x100>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e7b7      	b.n	800603e <_dtoa_r+0x186>
 80060ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80060d0:	e7b6      	b.n	8006040 <_dtoa_r+0x188>
 80060d2:	9b00      	ldr	r3, [sp, #0]
 80060d4:	1bdb      	subs	r3, r3, r7
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	427b      	negs	r3, r7
 80060da:	9308      	str	r3, [sp, #32]
 80060dc:	2300      	movs	r3, #0
 80060de:	930d      	str	r3, [sp, #52]	@ 0x34
 80060e0:	e7c3      	b.n	800606a <_dtoa_r+0x1b2>
 80060e2:	2301      	movs	r3, #1
 80060e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060e8:	eb07 0b03 	add.w	fp, r7, r3
 80060ec:	f10b 0301 	add.w	r3, fp, #1
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	9303      	str	r3, [sp, #12]
 80060f4:	bfb8      	it	lt
 80060f6:	2301      	movlt	r3, #1
 80060f8:	e006      	b.n	8006108 <_dtoa_r+0x250>
 80060fa:	2301      	movs	r3, #1
 80060fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80060fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006100:	2b00      	cmp	r3, #0
 8006102:	dd28      	ble.n	8006156 <_dtoa_r+0x29e>
 8006104:	469b      	mov	fp, r3
 8006106:	9303      	str	r3, [sp, #12]
 8006108:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800610c:	2100      	movs	r1, #0
 800610e:	2204      	movs	r2, #4
 8006110:	f102 0514 	add.w	r5, r2, #20
 8006114:	429d      	cmp	r5, r3
 8006116:	d926      	bls.n	8006166 <_dtoa_r+0x2ae>
 8006118:	6041      	str	r1, [r0, #4]
 800611a:	4648      	mov	r0, r9
 800611c:	f000 fd9c 	bl	8006c58 <_Balloc>
 8006120:	4682      	mov	sl, r0
 8006122:	2800      	cmp	r0, #0
 8006124:	d142      	bne.n	80061ac <_dtoa_r+0x2f4>
 8006126:	4b1e      	ldr	r3, [pc, #120]	@ (80061a0 <_dtoa_r+0x2e8>)
 8006128:	4602      	mov	r2, r0
 800612a:	f240 11af 	movw	r1, #431	@ 0x1af
 800612e:	e6da      	b.n	8005ee6 <_dtoa_r+0x2e>
 8006130:	2300      	movs	r3, #0
 8006132:	e7e3      	b.n	80060fc <_dtoa_r+0x244>
 8006134:	2300      	movs	r3, #0
 8006136:	e7d5      	b.n	80060e4 <_dtoa_r+0x22c>
 8006138:	2401      	movs	r4, #1
 800613a:	2300      	movs	r3, #0
 800613c:	9307      	str	r3, [sp, #28]
 800613e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006140:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006144:	2200      	movs	r2, #0
 8006146:	f8cd b00c 	str.w	fp, [sp, #12]
 800614a:	2312      	movs	r3, #18
 800614c:	920c      	str	r2, [sp, #48]	@ 0x30
 800614e:	e7db      	b.n	8006108 <_dtoa_r+0x250>
 8006150:	2301      	movs	r3, #1
 8006152:	9309      	str	r3, [sp, #36]	@ 0x24
 8006154:	e7f4      	b.n	8006140 <_dtoa_r+0x288>
 8006156:	f04f 0b01 	mov.w	fp, #1
 800615a:	f8cd b00c 	str.w	fp, [sp, #12]
 800615e:	465b      	mov	r3, fp
 8006160:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006164:	e7d0      	b.n	8006108 <_dtoa_r+0x250>
 8006166:	3101      	adds	r1, #1
 8006168:	0052      	lsls	r2, r2, #1
 800616a:	e7d1      	b.n	8006110 <_dtoa_r+0x258>
 800616c:	f3af 8000 	nop.w
 8006170:	636f4361 	.word	0x636f4361
 8006174:	3fd287a7 	.word	0x3fd287a7
 8006178:	8b60c8b3 	.word	0x8b60c8b3
 800617c:	3fc68a28 	.word	0x3fc68a28
 8006180:	509f79fb 	.word	0x509f79fb
 8006184:	3fd34413 	.word	0x3fd34413
 8006188:	08007f8c 	.word	0x08007f8c
 800618c:	08008046 	.word	0x08008046
 8006190:	7ff00000 	.word	0x7ff00000
 8006194:	08007f69 	.word	0x08007f69
 8006198:	3ff80000 	.word	0x3ff80000
 800619c:	08008158 	.word	0x08008158
 80061a0:	0800809e 	.word	0x0800809e
 80061a4:	08008042 	.word	0x08008042
 80061a8:	08007f68 	.word	0x08007f68
 80061ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061b0:	6018      	str	r0, [r3, #0]
 80061b2:	9b03      	ldr	r3, [sp, #12]
 80061b4:	2b0e      	cmp	r3, #14
 80061b6:	f200 80a1 	bhi.w	80062fc <_dtoa_r+0x444>
 80061ba:	2c00      	cmp	r4, #0
 80061bc:	f000 809e 	beq.w	80062fc <_dtoa_r+0x444>
 80061c0:	2f00      	cmp	r7, #0
 80061c2:	dd33      	ble.n	800622c <_dtoa_r+0x374>
 80061c4:	4b9c      	ldr	r3, [pc, #624]	@ (8006438 <_dtoa_r+0x580>)
 80061c6:	f007 020f 	and.w	r2, r7, #15
 80061ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ce:	ed93 7b00 	vldr	d7, [r3]
 80061d2:	05f8      	lsls	r0, r7, #23
 80061d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80061d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80061dc:	d516      	bpl.n	800620c <_dtoa_r+0x354>
 80061de:	4b97      	ldr	r3, [pc, #604]	@ (800643c <_dtoa_r+0x584>)
 80061e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80061e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061e8:	f7fa fb30 	bl	800084c <__aeabi_ddiv>
 80061ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061f0:	f004 040f 	and.w	r4, r4, #15
 80061f4:	2603      	movs	r6, #3
 80061f6:	4d91      	ldr	r5, [pc, #580]	@ (800643c <_dtoa_r+0x584>)
 80061f8:	b954      	cbnz	r4, 8006210 <_dtoa_r+0x358>
 80061fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80061fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006202:	f7fa fb23 	bl	800084c <__aeabi_ddiv>
 8006206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800620a:	e028      	b.n	800625e <_dtoa_r+0x3a6>
 800620c:	2602      	movs	r6, #2
 800620e:	e7f2      	b.n	80061f6 <_dtoa_r+0x33e>
 8006210:	07e1      	lsls	r1, r4, #31
 8006212:	d508      	bpl.n	8006226 <_dtoa_r+0x36e>
 8006214:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006218:	e9d5 2300 	ldrd	r2, r3, [r5]
 800621c:	f7fa f9ec 	bl	80005f8 <__aeabi_dmul>
 8006220:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006224:	3601      	adds	r6, #1
 8006226:	1064      	asrs	r4, r4, #1
 8006228:	3508      	adds	r5, #8
 800622a:	e7e5      	b.n	80061f8 <_dtoa_r+0x340>
 800622c:	f000 80af 	beq.w	800638e <_dtoa_r+0x4d6>
 8006230:	427c      	negs	r4, r7
 8006232:	4b81      	ldr	r3, [pc, #516]	@ (8006438 <_dtoa_r+0x580>)
 8006234:	4d81      	ldr	r5, [pc, #516]	@ (800643c <_dtoa_r+0x584>)
 8006236:	f004 020f 	and.w	r2, r4, #15
 800623a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006246:	f7fa f9d7 	bl	80005f8 <__aeabi_dmul>
 800624a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800624e:	1124      	asrs	r4, r4, #4
 8006250:	2300      	movs	r3, #0
 8006252:	2602      	movs	r6, #2
 8006254:	2c00      	cmp	r4, #0
 8006256:	f040 808f 	bne.w	8006378 <_dtoa_r+0x4c0>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1d3      	bne.n	8006206 <_dtoa_r+0x34e>
 800625e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006260:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8094 	beq.w	8006392 <_dtoa_r+0x4da>
 800626a:	4b75      	ldr	r3, [pc, #468]	@ (8006440 <_dtoa_r+0x588>)
 800626c:	2200      	movs	r2, #0
 800626e:	4620      	mov	r0, r4
 8006270:	4629      	mov	r1, r5
 8006272:	f7fa fc33 	bl	8000adc <__aeabi_dcmplt>
 8006276:	2800      	cmp	r0, #0
 8006278:	f000 808b 	beq.w	8006392 <_dtoa_r+0x4da>
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 8087 	beq.w	8006392 <_dtoa_r+0x4da>
 8006284:	f1bb 0f00 	cmp.w	fp, #0
 8006288:	dd34      	ble.n	80062f4 <_dtoa_r+0x43c>
 800628a:	4620      	mov	r0, r4
 800628c:	4b6d      	ldr	r3, [pc, #436]	@ (8006444 <_dtoa_r+0x58c>)
 800628e:	2200      	movs	r2, #0
 8006290:	4629      	mov	r1, r5
 8006292:	f7fa f9b1 	bl	80005f8 <__aeabi_dmul>
 8006296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800629a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800629e:	3601      	adds	r6, #1
 80062a0:	465c      	mov	r4, fp
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7fa f93e 	bl	8000524 <__aeabi_i2d>
 80062a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062ac:	f7fa f9a4 	bl	80005f8 <__aeabi_dmul>
 80062b0:	4b65      	ldr	r3, [pc, #404]	@ (8006448 <_dtoa_r+0x590>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	f7f9 ffea 	bl	800028c <__adddf3>
 80062b8:	4605      	mov	r5, r0
 80062ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80062be:	2c00      	cmp	r4, #0
 80062c0:	d16a      	bne.n	8006398 <_dtoa_r+0x4e0>
 80062c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062c6:	4b61      	ldr	r3, [pc, #388]	@ (800644c <_dtoa_r+0x594>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	f7f9 ffdd 	bl	8000288 <__aeabi_dsub>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062d6:	462a      	mov	r2, r5
 80062d8:	4633      	mov	r3, r6
 80062da:	f7fa fc1d 	bl	8000b18 <__aeabi_dcmpgt>
 80062de:	2800      	cmp	r0, #0
 80062e0:	f040 8298 	bne.w	8006814 <_dtoa_r+0x95c>
 80062e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062e8:	462a      	mov	r2, r5
 80062ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80062ee:	f7fa fbf5 	bl	8000adc <__aeabi_dcmplt>
 80062f2:	bb38      	cbnz	r0, 8006344 <_dtoa_r+0x48c>
 80062f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80062f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80062fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f2c0 8157 	blt.w	80065b2 <_dtoa_r+0x6fa>
 8006304:	2f0e      	cmp	r7, #14
 8006306:	f300 8154 	bgt.w	80065b2 <_dtoa_r+0x6fa>
 800630a:	4b4b      	ldr	r3, [pc, #300]	@ (8006438 <_dtoa_r+0x580>)
 800630c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006310:	ed93 7b00 	vldr	d7, [r3]
 8006314:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006316:	2b00      	cmp	r3, #0
 8006318:	ed8d 7b00 	vstr	d7, [sp]
 800631c:	f280 80e5 	bge.w	80064ea <_dtoa_r+0x632>
 8006320:	9b03      	ldr	r3, [sp, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f300 80e1 	bgt.w	80064ea <_dtoa_r+0x632>
 8006328:	d10c      	bne.n	8006344 <_dtoa_r+0x48c>
 800632a:	4b48      	ldr	r3, [pc, #288]	@ (800644c <_dtoa_r+0x594>)
 800632c:	2200      	movs	r2, #0
 800632e:	ec51 0b17 	vmov	r0, r1, d7
 8006332:	f7fa f961 	bl	80005f8 <__aeabi_dmul>
 8006336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800633a:	f7fa fbe3 	bl	8000b04 <__aeabi_dcmpge>
 800633e:	2800      	cmp	r0, #0
 8006340:	f000 8266 	beq.w	8006810 <_dtoa_r+0x958>
 8006344:	2400      	movs	r4, #0
 8006346:	4625      	mov	r5, r4
 8006348:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800634a:	4656      	mov	r6, sl
 800634c:	ea6f 0803 	mvn.w	r8, r3
 8006350:	2700      	movs	r7, #0
 8006352:	4621      	mov	r1, r4
 8006354:	4648      	mov	r0, r9
 8006356:	f000 fcbf 	bl	8006cd8 <_Bfree>
 800635a:	2d00      	cmp	r5, #0
 800635c:	f000 80bd 	beq.w	80064da <_dtoa_r+0x622>
 8006360:	b12f      	cbz	r7, 800636e <_dtoa_r+0x4b6>
 8006362:	42af      	cmp	r7, r5
 8006364:	d003      	beq.n	800636e <_dtoa_r+0x4b6>
 8006366:	4639      	mov	r1, r7
 8006368:	4648      	mov	r0, r9
 800636a:	f000 fcb5 	bl	8006cd8 <_Bfree>
 800636e:	4629      	mov	r1, r5
 8006370:	4648      	mov	r0, r9
 8006372:	f000 fcb1 	bl	8006cd8 <_Bfree>
 8006376:	e0b0      	b.n	80064da <_dtoa_r+0x622>
 8006378:	07e2      	lsls	r2, r4, #31
 800637a:	d505      	bpl.n	8006388 <_dtoa_r+0x4d0>
 800637c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006380:	f7fa f93a 	bl	80005f8 <__aeabi_dmul>
 8006384:	3601      	adds	r6, #1
 8006386:	2301      	movs	r3, #1
 8006388:	1064      	asrs	r4, r4, #1
 800638a:	3508      	adds	r5, #8
 800638c:	e762      	b.n	8006254 <_dtoa_r+0x39c>
 800638e:	2602      	movs	r6, #2
 8006390:	e765      	b.n	800625e <_dtoa_r+0x3a6>
 8006392:	9c03      	ldr	r4, [sp, #12]
 8006394:	46b8      	mov	r8, r7
 8006396:	e784      	b.n	80062a2 <_dtoa_r+0x3ea>
 8006398:	4b27      	ldr	r3, [pc, #156]	@ (8006438 <_dtoa_r+0x580>)
 800639a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800639c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80063a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063a4:	4454      	add	r4, sl
 80063a6:	2900      	cmp	r1, #0
 80063a8:	d054      	beq.n	8006454 <_dtoa_r+0x59c>
 80063aa:	4929      	ldr	r1, [pc, #164]	@ (8006450 <_dtoa_r+0x598>)
 80063ac:	2000      	movs	r0, #0
 80063ae:	f7fa fa4d 	bl	800084c <__aeabi_ddiv>
 80063b2:	4633      	mov	r3, r6
 80063b4:	462a      	mov	r2, r5
 80063b6:	f7f9 ff67 	bl	8000288 <__aeabi_dsub>
 80063ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80063be:	4656      	mov	r6, sl
 80063c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063c4:	f7fa fbc8 	bl	8000b58 <__aeabi_d2iz>
 80063c8:	4605      	mov	r5, r0
 80063ca:	f7fa f8ab 	bl	8000524 <__aeabi_i2d>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063d6:	f7f9 ff57 	bl	8000288 <__aeabi_dsub>
 80063da:	3530      	adds	r5, #48	@ 0x30
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063e4:	f806 5b01 	strb.w	r5, [r6], #1
 80063e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80063ec:	f7fa fb76 	bl	8000adc <__aeabi_dcmplt>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d172      	bne.n	80064da <_dtoa_r+0x622>
 80063f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063f8:	4911      	ldr	r1, [pc, #68]	@ (8006440 <_dtoa_r+0x588>)
 80063fa:	2000      	movs	r0, #0
 80063fc:	f7f9 ff44 	bl	8000288 <__aeabi_dsub>
 8006400:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006404:	f7fa fb6a 	bl	8000adc <__aeabi_dcmplt>
 8006408:	2800      	cmp	r0, #0
 800640a:	f040 80b4 	bne.w	8006576 <_dtoa_r+0x6be>
 800640e:	42a6      	cmp	r6, r4
 8006410:	f43f af70 	beq.w	80062f4 <_dtoa_r+0x43c>
 8006414:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006418:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <_dtoa_r+0x58c>)
 800641a:	2200      	movs	r2, #0
 800641c:	f7fa f8ec 	bl	80005f8 <__aeabi_dmul>
 8006420:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <_dtoa_r+0x58c>)
 8006422:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006426:	2200      	movs	r2, #0
 8006428:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800642c:	f7fa f8e4 	bl	80005f8 <__aeabi_dmul>
 8006430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006434:	e7c4      	b.n	80063c0 <_dtoa_r+0x508>
 8006436:	bf00      	nop
 8006438:	08008158 	.word	0x08008158
 800643c:	08008130 	.word	0x08008130
 8006440:	3ff00000 	.word	0x3ff00000
 8006444:	40240000 	.word	0x40240000
 8006448:	401c0000 	.word	0x401c0000
 800644c:	40140000 	.word	0x40140000
 8006450:	3fe00000 	.word	0x3fe00000
 8006454:	4631      	mov	r1, r6
 8006456:	4628      	mov	r0, r5
 8006458:	f7fa f8ce 	bl	80005f8 <__aeabi_dmul>
 800645c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006460:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006462:	4656      	mov	r6, sl
 8006464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006468:	f7fa fb76 	bl	8000b58 <__aeabi_d2iz>
 800646c:	4605      	mov	r5, r0
 800646e:	f7fa f859 	bl	8000524 <__aeabi_i2d>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800647a:	f7f9 ff05 	bl	8000288 <__aeabi_dsub>
 800647e:	3530      	adds	r5, #48	@ 0x30
 8006480:	f806 5b01 	strb.w	r5, [r6], #1
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	42a6      	cmp	r6, r4
 800648a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	d124      	bne.n	80064de <_dtoa_r+0x626>
 8006494:	4baf      	ldr	r3, [pc, #700]	@ (8006754 <_dtoa_r+0x89c>)
 8006496:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800649a:	f7f9 fef7 	bl	800028c <__adddf3>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064a6:	f7fa fb37 	bl	8000b18 <__aeabi_dcmpgt>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d163      	bne.n	8006576 <_dtoa_r+0x6be>
 80064ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80064b2:	49a8      	ldr	r1, [pc, #672]	@ (8006754 <_dtoa_r+0x89c>)
 80064b4:	2000      	movs	r0, #0
 80064b6:	f7f9 fee7 	bl	8000288 <__aeabi_dsub>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064c2:	f7fa fb0b 	bl	8000adc <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f43f af14 	beq.w	80062f4 <_dtoa_r+0x43c>
 80064cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80064ce:	1e73      	subs	r3, r6, #1
 80064d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80064d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064d6:	2b30      	cmp	r3, #48	@ 0x30
 80064d8:	d0f8      	beq.n	80064cc <_dtoa_r+0x614>
 80064da:	4647      	mov	r7, r8
 80064dc:	e03b      	b.n	8006556 <_dtoa_r+0x69e>
 80064de:	4b9e      	ldr	r3, [pc, #632]	@ (8006758 <_dtoa_r+0x8a0>)
 80064e0:	f7fa f88a 	bl	80005f8 <__aeabi_dmul>
 80064e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064e8:	e7bc      	b.n	8006464 <_dtoa_r+0x5ac>
 80064ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80064ee:	4656      	mov	r6, sl
 80064f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064f4:	4620      	mov	r0, r4
 80064f6:	4629      	mov	r1, r5
 80064f8:	f7fa f9a8 	bl	800084c <__aeabi_ddiv>
 80064fc:	f7fa fb2c 	bl	8000b58 <__aeabi_d2iz>
 8006500:	4680      	mov	r8, r0
 8006502:	f7fa f80f 	bl	8000524 <__aeabi_i2d>
 8006506:	e9dd 2300 	ldrd	r2, r3, [sp]
 800650a:	f7fa f875 	bl	80005f8 <__aeabi_dmul>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4620      	mov	r0, r4
 8006514:	4629      	mov	r1, r5
 8006516:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800651a:	f7f9 feb5 	bl	8000288 <__aeabi_dsub>
 800651e:	f806 4b01 	strb.w	r4, [r6], #1
 8006522:	9d03      	ldr	r5, [sp, #12]
 8006524:	eba6 040a 	sub.w	r4, r6, sl
 8006528:	42a5      	cmp	r5, r4
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	d133      	bne.n	8006598 <_dtoa_r+0x6e0>
 8006530:	f7f9 feac 	bl	800028c <__adddf3>
 8006534:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006538:	4604      	mov	r4, r0
 800653a:	460d      	mov	r5, r1
 800653c:	f7fa faec 	bl	8000b18 <__aeabi_dcmpgt>
 8006540:	b9c0      	cbnz	r0, 8006574 <_dtoa_r+0x6bc>
 8006542:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006546:	4620      	mov	r0, r4
 8006548:	4629      	mov	r1, r5
 800654a:	f7fa fabd 	bl	8000ac8 <__aeabi_dcmpeq>
 800654e:	b110      	cbz	r0, 8006556 <_dtoa_r+0x69e>
 8006550:	f018 0f01 	tst.w	r8, #1
 8006554:	d10e      	bne.n	8006574 <_dtoa_r+0x6bc>
 8006556:	9902      	ldr	r1, [sp, #8]
 8006558:	4648      	mov	r0, r9
 800655a:	f000 fbbd 	bl	8006cd8 <_Bfree>
 800655e:	2300      	movs	r3, #0
 8006560:	7033      	strb	r3, [r6, #0]
 8006562:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006564:	3701      	adds	r7, #1
 8006566:	601f      	str	r7, [r3, #0]
 8006568:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 824b 	beq.w	8006a06 <_dtoa_r+0xb4e>
 8006570:	601e      	str	r6, [r3, #0]
 8006572:	e248      	b.n	8006a06 <_dtoa_r+0xb4e>
 8006574:	46b8      	mov	r8, r7
 8006576:	4633      	mov	r3, r6
 8006578:	461e      	mov	r6, r3
 800657a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800657e:	2a39      	cmp	r2, #57	@ 0x39
 8006580:	d106      	bne.n	8006590 <_dtoa_r+0x6d8>
 8006582:	459a      	cmp	sl, r3
 8006584:	d1f8      	bne.n	8006578 <_dtoa_r+0x6c0>
 8006586:	2230      	movs	r2, #48	@ 0x30
 8006588:	f108 0801 	add.w	r8, r8, #1
 800658c:	f88a 2000 	strb.w	r2, [sl]
 8006590:	781a      	ldrb	r2, [r3, #0]
 8006592:	3201      	adds	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e7a0      	b.n	80064da <_dtoa_r+0x622>
 8006598:	4b6f      	ldr	r3, [pc, #444]	@ (8006758 <_dtoa_r+0x8a0>)
 800659a:	2200      	movs	r2, #0
 800659c:	f7fa f82c 	bl	80005f8 <__aeabi_dmul>
 80065a0:	2200      	movs	r2, #0
 80065a2:	2300      	movs	r3, #0
 80065a4:	4604      	mov	r4, r0
 80065a6:	460d      	mov	r5, r1
 80065a8:	f7fa fa8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d09f      	beq.n	80064f0 <_dtoa_r+0x638>
 80065b0:	e7d1      	b.n	8006556 <_dtoa_r+0x69e>
 80065b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	f000 80ea 	beq.w	800678e <_dtoa_r+0x8d6>
 80065ba:	9a07      	ldr	r2, [sp, #28]
 80065bc:	2a01      	cmp	r2, #1
 80065be:	f300 80cd 	bgt.w	800675c <_dtoa_r+0x8a4>
 80065c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80065c4:	2a00      	cmp	r2, #0
 80065c6:	f000 80c1 	beq.w	800674c <_dtoa_r+0x894>
 80065ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80065ce:	9c08      	ldr	r4, [sp, #32]
 80065d0:	9e00      	ldr	r6, [sp, #0]
 80065d2:	9a00      	ldr	r2, [sp, #0]
 80065d4:	441a      	add	r2, r3
 80065d6:	9200      	str	r2, [sp, #0]
 80065d8:	9a06      	ldr	r2, [sp, #24]
 80065da:	2101      	movs	r1, #1
 80065dc:	441a      	add	r2, r3
 80065de:	4648      	mov	r0, r9
 80065e0:	9206      	str	r2, [sp, #24]
 80065e2:	f000 fc2d 	bl	8006e40 <__i2b>
 80065e6:	4605      	mov	r5, r0
 80065e8:	b166      	cbz	r6, 8006604 <_dtoa_r+0x74c>
 80065ea:	9b06      	ldr	r3, [sp, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dd09      	ble.n	8006604 <_dtoa_r+0x74c>
 80065f0:	42b3      	cmp	r3, r6
 80065f2:	9a00      	ldr	r2, [sp, #0]
 80065f4:	bfa8      	it	ge
 80065f6:	4633      	movge	r3, r6
 80065f8:	1ad2      	subs	r2, r2, r3
 80065fa:	9200      	str	r2, [sp, #0]
 80065fc:	9a06      	ldr	r2, [sp, #24]
 80065fe:	1af6      	subs	r6, r6, r3
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	9306      	str	r3, [sp, #24]
 8006604:	9b08      	ldr	r3, [sp, #32]
 8006606:	b30b      	cbz	r3, 800664c <_dtoa_r+0x794>
 8006608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 80c6 	beq.w	800679c <_dtoa_r+0x8e4>
 8006610:	2c00      	cmp	r4, #0
 8006612:	f000 80c0 	beq.w	8006796 <_dtoa_r+0x8de>
 8006616:	4629      	mov	r1, r5
 8006618:	4622      	mov	r2, r4
 800661a:	4648      	mov	r0, r9
 800661c:	f000 fcc8 	bl	8006fb0 <__pow5mult>
 8006620:	9a02      	ldr	r2, [sp, #8]
 8006622:	4601      	mov	r1, r0
 8006624:	4605      	mov	r5, r0
 8006626:	4648      	mov	r0, r9
 8006628:	f000 fc20 	bl	8006e6c <__multiply>
 800662c:	9902      	ldr	r1, [sp, #8]
 800662e:	4680      	mov	r8, r0
 8006630:	4648      	mov	r0, r9
 8006632:	f000 fb51 	bl	8006cd8 <_Bfree>
 8006636:	9b08      	ldr	r3, [sp, #32]
 8006638:	1b1b      	subs	r3, r3, r4
 800663a:	9308      	str	r3, [sp, #32]
 800663c:	f000 80b1 	beq.w	80067a2 <_dtoa_r+0x8ea>
 8006640:	9a08      	ldr	r2, [sp, #32]
 8006642:	4641      	mov	r1, r8
 8006644:	4648      	mov	r0, r9
 8006646:	f000 fcb3 	bl	8006fb0 <__pow5mult>
 800664a:	9002      	str	r0, [sp, #8]
 800664c:	2101      	movs	r1, #1
 800664e:	4648      	mov	r0, r9
 8006650:	f000 fbf6 	bl	8006e40 <__i2b>
 8006654:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006656:	4604      	mov	r4, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 81d8 	beq.w	8006a0e <_dtoa_r+0xb56>
 800665e:	461a      	mov	r2, r3
 8006660:	4601      	mov	r1, r0
 8006662:	4648      	mov	r0, r9
 8006664:	f000 fca4 	bl	8006fb0 <__pow5mult>
 8006668:	9b07      	ldr	r3, [sp, #28]
 800666a:	2b01      	cmp	r3, #1
 800666c:	4604      	mov	r4, r0
 800666e:	f300 809f 	bgt.w	80067b0 <_dtoa_r+0x8f8>
 8006672:	9b04      	ldr	r3, [sp, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f040 8097 	bne.w	80067a8 <_dtoa_r+0x8f0>
 800667a:	9b05      	ldr	r3, [sp, #20]
 800667c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006680:	2b00      	cmp	r3, #0
 8006682:	f040 8093 	bne.w	80067ac <_dtoa_r+0x8f4>
 8006686:	9b05      	ldr	r3, [sp, #20]
 8006688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800668c:	0d1b      	lsrs	r3, r3, #20
 800668e:	051b      	lsls	r3, r3, #20
 8006690:	b133      	cbz	r3, 80066a0 <_dtoa_r+0x7e8>
 8006692:	9b00      	ldr	r3, [sp, #0]
 8006694:	3301      	adds	r3, #1
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	9b06      	ldr	r3, [sp, #24]
 800669a:	3301      	adds	r3, #1
 800669c:	9306      	str	r3, [sp, #24]
 800669e:	2301      	movs	r3, #1
 80066a0:	9308      	str	r3, [sp, #32]
 80066a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 81b8 	beq.w	8006a1a <_dtoa_r+0xb62>
 80066aa:	6923      	ldr	r3, [r4, #16]
 80066ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80066b0:	6918      	ldr	r0, [r3, #16]
 80066b2:	f000 fb79 	bl	8006da8 <__hi0bits>
 80066b6:	f1c0 0020 	rsb	r0, r0, #32
 80066ba:	9b06      	ldr	r3, [sp, #24]
 80066bc:	4418      	add	r0, r3
 80066be:	f010 001f 	ands.w	r0, r0, #31
 80066c2:	f000 8082 	beq.w	80067ca <_dtoa_r+0x912>
 80066c6:	f1c0 0320 	rsb	r3, r0, #32
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	dd73      	ble.n	80067b6 <_dtoa_r+0x8fe>
 80066ce:	9b00      	ldr	r3, [sp, #0]
 80066d0:	f1c0 001c 	rsb	r0, r0, #28
 80066d4:	4403      	add	r3, r0
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	9b06      	ldr	r3, [sp, #24]
 80066da:	4403      	add	r3, r0
 80066dc:	4406      	add	r6, r0
 80066de:	9306      	str	r3, [sp, #24]
 80066e0:	9b00      	ldr	r3, [sp, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	dd05      	ble.n	80066f2 <_dtoa_r+0x83a>
 80066e6:	9902      	ldr	r1, [sp, #8]
 80066e8:	461a      	mov	r2, r3
 80066ea:	4648      	mov	r0, r9
 80066ec:	f000 fcba 	bl	8007064 <__lshift>
 80066f0:	9002      	str	r0, [sp, #8]
 80066f2:	9b06      	ldr	r3, [sp, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dd05      	ble.n	8006704 <_dtoa_r+0x84c>
 80066f8:	4621      	mov	r1, r4
 80066fa:	461a      	mov	r2, r3
 80066fc:	4648      	mov	r0, r9
 80066fe:	f000 fcb1 	bl	8007064 <__lshift>
 8006702:	4604      	mov	r4, r0
 8006704:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006706:	2b00      	cmp	r3, #0
 8006708:	d061      	beq.n	80067ce <_dtoa_r+0x916>
 800670a:	9802      	ldr	r0, [sp, #8]
 800670c:	4621      	mov	r1, r4
 800670e:	f000 fd15 	bl	800713c <__mcmp>
 8006712:	2800      	cmp	r0, #0
 8006714:	da5b      	bge.n	80067ce <_dtoa_r+0x916>
 8006716:	2300      	movs	r3, #0
 8006718:	9902      	ldr	r1, [sp, #8]
 800671a:	220a      	movs	r2, #10
 800671c:	4648      	mov	r0, r9
 800671e:	f000 fafd 	bl	8006d1c <__multadd>
 8006722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006724:	9002      	str	r0, [sp, #8]
 8006726:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 8177 	beq.w	8006a1e <_dtoa_r+0xb66>
 8006730:	4629      	mov	r1, r5
 8006732:	2300      	movs	r3, #0
 8006734:	220a      	movs	r2, #10
 8006736:	4648      	mov	r0, r9
 8006738:	f000 faf0 	bl	8006d1c <__multadd>
 800673c:	f1bb 0f00 	cmp.w	fp, #0
 8006740:	4605      	mov	r5, r0
 8006742:	dc6f      	bgt.n	8006824 <_dtoa_r+0x96c>
 8006744:	9b07      	ldr	r3, [sp, #28]
 8006746:	2b02      	cmp	r3, #2
 8006748:	dc49      	bgt.n	80067de <_dtoa_r+0x926>
 800674a:	e06b      	b.n	8006824 <_dtoa_r+0x96c>
 800674c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800674e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006752:	e73c      	b.n	80065ce <_dtoa_r+0x716>
 8006754:	3fe00000 	.word	0x3fe00000
 8006758:	40240000 	.word	0x40240000
 800675c:	9b03      	ldr	r3, [sp, #12]
 800675e:	1e5c      	subs	r4, r3, #1
 8006760:	9b08      	ldr	r3, [sp, #32]
 8006762:	42a3      	cmp	r3, r4
 8006764:	db09      	blt.n	800677a <_dtoa_r+0x8c2>
 8006766:	1b1c      	subs	r4, r3, r4
 8006768:	9b03      	ldr	r3, [sp, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f6bf af30 	bge.w	80065d0 <_dtoa_r+0x718>
 8006770:	9b00      	ldr	r3, [sp, #0]
 8006772:	9a03      	ldr	r2, [sp, #12]
 8006774:	1a9e      	subs	r6, r3, r2
 8006776:	2300      	movs	r3, #0
 8006778:	e72b      	b.n	80065d2 <_dtoa_r+0x71a>
 800677a:	9b08      	ldr	r3, [sp, #32]
 800677c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800677e:	9408      	str	r4, [sp, #32]
 8006780:	1ae3      	subs	r3, r4, r3
 8006782:	441a      	add	r2, r3
 8006784:	9e00      	ldr	r6, [sp, #0]
 8006786:	9b03      	ldr	r3, [sp, #12]
 8006788:	920d      	str	r2, [sp, #52]	@ 0x34
 800678a:	2400      	movs	r4, #0
 800678c:	e721      	b.n	80065d2 <_dtoa_r+0x71a>
 800678e:	9c08      	ldr	r4, [sp, #32]
 8006790:	9e00      	ldr	r6, [sp, #0]
 8006792:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006794:	e728      	b.n	80065e8 <_dtoa_r+0x730>
 8006796:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800679a:	e751      	b.n	8006640 <_dtoa_r+0x788>
 800679c:	9a08      	ldr	r2, [sp, #32]
 800679e:	9902      	ldr	r1, [sp, #8]
 80067a0:	e750      	b.n	8006644 <_dtoa_r+0x78c>
 80067a2:	f8cd 8008 	str.w	r8, [sp, #8]
 80067a6:	e751      	b.n	800664c <_dtoa_r+0x794>
 80067a8:	2300      	movs	r3, #0
 80067aa:	e779      	b.n	80066a0 <_dtoa_r+0x7e8>
 80067ac:	9b04      	ldr	r3, [sp, #16]
 80067ae:	e777      	b.n	80066a0 <_dtoa_r+0x7e8>
 80067b0:	2300      	movs	r3, #0
 80067b2:	9308      	str	r3, [sp, #32]
 80067b4:	e779      	b.n	80066aa <_dtoa_r+0x7f2>
 80067b6:	d093      	beq.n	80066e0 <_dtoa_r+0x828>
 80067b8:	9a00      	ldr	r2, [sp, #0]
 80067ba:	331c      	adds	r3, #28
 80067bc:	441a      	add	r2, r3
 80067be:	9200      	str	r2, [sp, #0]
 80067c0:	9a06      	ldr	r2, [sp, #24]
 80067c2:	441a      	add	r2, r3
 80067c4:	441e      	add	r6, r3
 80067c6:	9206      	str	r2, [sp, #24]
 80067c8:	e78a      	b.n	80066e0 <_dtoa_r+0x828>
 80067ca:	4603      	mov	r3, r0
 80067cc:	e7f4      	b.n	80067b8 <_dtoa_r+0x900>
 80067ce:	9b03      	ldr	r3, [sp, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	46b8      	mov	r8, r7
 80067d4:	dc20      	bgt.n	8006818 <_dtoa_r+0x960>
 80067d6:	469b      	mov	fp, r3
 80067d8:	9b07      	ldr	r3, [sp, #28]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	dd1e      	ble.n	800681c <_dtoa_r+0x964>
 80067de:	f1bb 0f00 	cmp.w	fp, #0
 80067e2:	f47f adb1 	bne.w	8006348 <_dtoa_r+0x490>
 80067e6:	4621      	mov	r1, r4
 80067e8:	465b      	mov	r3, fp
 80067ea:	2205      	movs	r2, #5
 80067ec:	4648      	mov	r0, r9
 80067ee:	f000 fa95 	bl	8006d1c <__multadd>
 80067f2:	4601      	mov	r1, r0
 80067f4:	4604      	mov	r4, r0
 80067f6:	9802      	ldr	r0, [sp, #8]
 80067f8:	f000 fca0 	bl	800713c <__mcmp>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	f77f ada3 	ble.w	8006348 <_dtoa_r+0x490>
 8006802:	4656      	mov	r6, sl
 8006804:	2331      	movs	r3, #49	@ 0x31
 8006806:	f806 3b01 	strb.w	r3, [r6], #1
 800680a:	f108 0801 	add.w	r8, r8, #1
 800680e:	e59f      	b.n	8006350 <_dtoa_r+0x498>
 8006810:	9c03      	ldr	r4, [sp, #12]
 8006812:	46b8      	mov	r8, r7
 8006814:	4625      	mov	r5, r4
 8006816:	e7f4      	b.n	8006802 <_dtoa_r+0x94a>
 8006818:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800681c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8101 	beq.w	8006a26 <_dtoa_r+0xb6e>
 8006824:	2e00      	cmp	r6, #0
 8006826:	dd05      	ble.n	8006834 <_dtoa_r+0x97c>
 8006828:	4629      	mov	r1, r5
 800682a:	4632      	mov	r2, r6
 800682c:	4648      	mov	r0, r9
 800682e:	f000 fc19 	bl	8007064 <__lshift>
 8006832:	4605      	mov	r5, r0
 8006834:	9b08      	ldr	r3, [sp, #32]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d05c      	beq.n	80068f4 <_dtoa_r+0xa3c>
 800683a:	6869      	ldr	r1, [r5, #4]
 800683c:	4648      	mov	r0, r9
 800683e:	f000 fa0b 	bl	8006c58 <_Balloc>
 8006842:	4606      	mov	r6, r0
 8006844:	b928      	cbnz	r0, 8006852 <_dtoa_r+0x99a>
 8006846:	4b82      	ldr	r3, [pc, #520]	@ (8006a50 <_dtoa_r+0xb98>)
 8006848:	4602      	mov	r2, r0
 800684a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800684e:	f7ff bb4a 	b.w	8005ee6 <_dtoa_r+0x2e>
 8006852:	692a      	ldr	r2, [r5, #16]
 8006854:	3202      	adds	r2, #2
 8006856:	0092      	lsls	r2, r2, #2
 8006858:	f105 010c 	add.w	r1, r5, #12
 800685c:	300c      	adds	r0, #12
 800685e:	f000 ffb5 	bl	80077cc <memcpy>
 8006862:	2201      	movs	r2, #1
 8006864:	4631      	mov	r1, r6
 8006866:	4648      	mov	r0, r9
 8006868:	f000 fbfc 	bl	8007064 <__lshift>
 800686c:	f10a 0301 	add.w	r3, sl, #1
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	eb0a 030b 	add.w	r3, sl, fp
 8006876:	9308      	str	r3, [sp, #32]
 8006878:	9b04      	ldr	r3, [sp, #16]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	462f      	mov	r7, r5
 8006880:	9306      	str	r3, [sp, #24]
 8006882:	4605      	mov	r5, r0
 8006884:	9b00      	ldr	r3, [sp, #0]
 8006886:	9802      	ldr	r0, [sp, #8]
 8006888:	4621      	mov	r1, r4
 800688a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800688e:	f7ff fa89 	bl	8005da4 <quorem>
 8006892:	4603      	mov	r3, r0
 8006894:	3330      	adds	r3, #48	@ 0x30
 8006896:	9003      	str	r0, [sp, #12]
 8006898:	4639      	mov	r1, r7
 800689a:	9802      	ldr	r0, [sp, #8]
 800689c:	9309      	str	r3, [sp, #36]	@ 0x24
 800689e:	f000 fc4d 	bl	800713c <__mcmp>
 80068a2:	462a      	mov	r2, r5
 80068a4:	9004      	str	r0, [sp, #16]
 80068a6:	4621      	mov	r1, r4
 80068a8:	4648      	mov	r0, r9
 80068aa:	f000 fc63 	bl	8007174 <__mdiff>
 80068ae:	68c2      	ldr	r2, [r0, #12]
 80068b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b2:	4606      	mov	r6, r0
 80068b4:	bb02      	cbnz	r2, 80068f8 <_dtoa_r+0xa40>
 80068b6:	4601      	mov	r1, r0
 80068b8:	9802      	ldr	r0, [sp, #8]
 80068ba:	f000 fc3f 	bl	800713c <__mcmp>
 80068be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c0:	4602      	mov	r2, r0
 80068c2:	4631      	mov	r1, r6
 80068c4:	4648      	mov	r0, r9
 80068c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80068c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80068ca:	f000 fa05 	bl	8006cd8 <_Bfree>
 80068ce:	9b07      	ldr	r3, [sp, #28]
 80068d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068d2:	9e00      	ldr	r6, [sp, #0]
 80068d4:	ea42 0103 	orr.w	r1, r2, r3
 80068d8:	9b06      	ldr	r3, [sp, #24]
 80068da:	4319      	orrs	r1, r3
 80068dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068de:	d10d      	bne.n	80068fc <_dtoa_r+0xa44>
 80068e0:	2b39      	cmp	r3, #57	@ 0x39
 80068e2:	d027      	beq.n	8006934 <_dtoa_r+0xa7c>
 80068e4:	9a04      	ldr	r2, [sp, #16]
 80068e6:	2a00      	cmp	r2, #0
 80068e8:	dd01      	ble.n	80068ee <_dtoa_r+0xa36>
 80068ea:	9b03      	ldr	r3, [sp, #12]
 80068ec:	3331      	adds	r3, #49	@ 0x31
 80068ee:	f88b 3000 	strb.w	r3, [fp]
 80068f2:	e52e      	b.n	8006352 <_dtoa_r+0x49a>
 80068f4:	4628      	mov	r0, r5
 80068f6:	e7b9      	b.n	800686c <_dtoa_r+0x9b4>
 80068f8:	2201      	movs	r2, #1
 80068fa:	e7e2      	b.n	80068c2 <_dtoa_r+0xa0a>
 80068fc:	9904      	ldr	r1, [sp, #16]
 80068fe:	2900      	cmp	r1, #0
 8006900:	db04      	blt.n	800690c <_dtoa_r+0xa54>
 8006902:	9807      	ldr	r0, [sp, #28]
 8006904:	4301      	orrs	r1, r0
 8006906:	9806      	ldr	r0, [sp, #24]
 8006908:	4301      	orrs	r1, r0
 800690a:	d120      	bne.n	800694e <_dtoa_r+0xa96>
 800690c:	2a00      	cmp	r2, #0
 800690e:	ddee      	ble.n	80068ee <_dtoa_r+0xa36>
 8006910:	9902      	ldr	r1, [sp, #8]
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	2201      	movs	r2, #1
 8006916:	4648      	mov	r0, r9
 8006918:	f000 fba4 	bl	8007064 <__lshift>
 800691c:	4621      	mov	r1, r4
 800691e:	9002      	str	r0, [sp, #8]
 8006920:	f000 fc0c 	bl	800713c <__mcmp>
 8006924:	2800      	cmp	r0, #0
 8006926:	9b00      	ldr	r3, [sp, #0]
 8006928:	dc02      	bgt.n	8006930 <_dtoa_r+0xa78>
 800692a:	d1e0      	bne.n	80068ee <_dtoa_r+0xa36>
 800692c:	07da      	lsls	r2, r3, #31
 800692e:	d5de      	bpl.n	80068ee <_dtoa_r+0xa36>
 8006930:	2b39      	cmp	r3, #57	@ 0x39
 8006932:	d1da      	bne.n	80068ea <_dtoa_r+0xa32>
 8006934:	2339      	movs	r3, #57	@ 0x39
 8006936:	f88b 3000 	strb.w	r3, [fp]
 800693a:	4633      	mov	r3, r6
 800693c:	461e      	mov	r6, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006944:	2a39      	cmp	r2, #57	@ 0x39
 8006946:	d04e      	beq.n	80069e6 <_dtoa_r+0xb2e>
 8006948:	3201      	adds	r2, #1
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	e501      	b.n	8006352 <_dtoa_r+0x49a>
 800694e:	2a00      	cmp	r2, #0
 8006950:	dd03      	ble.n	800695a <_dtoa_r+0xaa2>
 8006952:	2b39      	cmp	r3, #57	@ 0x39
 8006954:	d0ee      	beq.n	8006934 <_dtoa_r+0xa7c>
 8006956:	3301      	adds	r3, #1
 8006958:	e7c9      	b.n	80068ee <_dtoa_r+0xa36>
 800695a:	9a00      	ldr	r2, [sp, #0]
 800695c:	9908      	ldr	r1, [sp, #32]
 800695e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006962:	428a      	cmp	r2, r1
 8006964:	d028      	beq.n	80069b8 <_dtoa_r+0xb00>
 8006966:	9902      	ldr	r1, [sp, #8]
 8006968:	2300      	movs	r3, #0
 800696a:	220a      	movs	r2, #10
 800696c:	4648      	mov	r0, r9
 800696e:	f000 f9d5 	bl	8006d1c <__multadd>
 8006972:	42af      	cmp	r7, r5
 8006974:	9002      	str	r0, [sp, #8]
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	f04f 020a 	mov.w	r2, #10
 800697e:	4639      	mov	r1, r7
 8006980:	4648      	mov	r0, r9
 8006982:	d107      	bne.n	8006994 <_dtoa_r+0xadc>
 8006984:	f000 f9ca 	bl	8006d1c <__multadd>
 8006988:	4607      	mov	r7, r0
 800698a:	4605      	mov	r5, r0
 800698c:	9b00      	ldr	r3, [sp, #0]
 800698e:	3301      	adds	r3, #1
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	e777      	b.n	8006884 <_dtoa_r+0x9cc>
 8006994:	f000 f9c2 	bl	8006d1c <__multadd>
 8006998:	4629      	mov	r1, r5
 800699a:	4607      	mov	r7, r0
 800699c:	2300      	movs	r3, #0
 800699e:	220a      	movs	r2, #10
 80069a0:	4648      	mov	r0, r9
 80069a2:	f000 f9bb 	bl	8006d1c <__multadd>
 80069a6:	4605      	mov	r5, r0
 80069a8:	e7f0      	b.n	800698c <_dtoa_r+0xad4>
 80069aa:	f1bb 0f00 	cmp.w	fp, #0
 80069ae:	bfcc      	ite	gt
 80069b0:	465e      	movgt	r6, fp
 80069b2:	2601      	movle	r6, #1
 80069b4:	4456      	add	r6, sl
 80069b6:	2700      	movs	r7, #0
 80069b8:	9902      	ldr	r1, [sp, #8]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	2201      	movs	r2, #1
 80069be:	4648      	mov	r0, r9
 80069c0:	f000 fb50 	bl	8007064 <__lshift>
 80069c4:	4621      	mov	r1, r4
 80069c6:	9002      	str	r0, [sp, #8]
 80069c8:	f000 fbb8 	bl	800713c <__mcmp>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	dcb4      	bgt.n	800693a <_dtoa_r+0xa82>
 80069d0:	d102      	bne.n	80069d8 <_dtoa_r+0xb20>
 80069d2:	9b00      	ldr	r3, [sp, #0]
 80069d4:	07db      	lsls	r3, r3, #31
 80069d6:	d4b0      	bmi.n	800693a <_dtoa_r+0xa82>
 80069d8:	4633      	mov	r3, r6
 80069da:	461e      	mov	r6, r3
 80069dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069e0:	2a30      	cmp	r2, #48	@ 0x30
 80069e2:	d0fa      	beq.n	80069da <_dtoa_r+0xb22>
 80069e4:	e4b5      	b.n	8006352 <_dtoa_r+0x49a>
 80069e6:	459a      	cmp	sl, r3
 80069e8:	d1a8      	bne.n	800693c <_dtoa_r+0xa84>
 80069ea:	2331      	movs	r3, #49	@ 0x31
 80069ec:	f108 0801 	add.w	r8, r8, #1
 80069f0:	f88a 3000 	strb.w	r3, [sl]
 80069f4:	e4ad      	b.n	8006352 <_dtoa_r+0x49a>
 80069f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006a54 <_dtoa_r+0xb9c>
 80069fc:	b11b      	cbz	r3, 8006a06 <_dtoa_r+0xb4e>
 80069fe:	f10a 0308 	add.w	r3, sl, #8
 8006a02:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	4650      	mov	r0, sl
 8006a08:	b017      	add	sp, #92	@ 0x5c
 8006a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0e:	9b07      	ldr	r3, [sp, #28]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	f77f ae2e 	ble.w	8006672 <_dtoa_r+0x7ba>
 8006a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a18:	9308      	str	r3, [sp, #32]
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	e64d      	b.n	80066ba <_dtoa_r+0x802>
 8006a1e:	f1bb 0f00 	cmp.w	fp, #0
 8006a22:	f77f aed9 	ble.w	80067d8 <_dtoa_r+0x920>
 8006a26:	4656      	mov	r6, sl
 8006a28:	9802      	ldr	r0, [sp, #8]
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	f7ff f9ba 	bl	8005da4 <quorem>
 8006a30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006a34:	f806 3b01 	strb.w	r3, [r6], #1
 8006a38:	eba6 020a 	sub.w	r2, r6, sl
 8006a3c:	4593      	cmp	fp, r2
 8006a3e:	ddb4      	ble.n	80069aa <_dtoa_r+0xaf2>
 8006a40:	9902      	ldr	r1, [sp, #8]
 8006a42:	2300      	movs	r3, #0
 8006a44:	220a      	movs	r2, #10
 8006a46:	4648      	mov	r0, r9
 8006a48:	f000 f968 	bl	8006d1c <__multadd>
 8006a4c:	9002      	str	r0, [sp, #8]
 8006a4e:	e7eb      	b.n	8006a28 <_dtoa_r+0xb70>
 8006a50:	0800809e 	.word	0x0800809e
 8006a54:	08008039 	.word	0x08008039

08006a58 <_free_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	4605      	mov	r5, r0
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	d041      	beq.n	8006ae4 <_free_r+0x8c>
 8006a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a64:	1f0c      	subs	r4, r1, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfb8      	it	lt
 8006a6a:	18e4      	addlt	r4, r4, r3
 8006a6c:	f000 f8e8 	bl	8006c40 <__malloc_lock>
 8006a70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae8 <_free_r+0x90>)
 8006a72:	6813      	ldr	r3, [r2, #0]
 8006a74:	b933      	cbnz	r3, 8006a84 <_free_r+0x2c>
 8006a76:	6063      	str	r3, [r4, #4]
 8006a78:	6014      	str	r4, [r2, #0]
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a80:	f000 b8e4 	b.w	8006c4c <__malloc_unlock>
 8006a84:	42a3      	cmp	r3, r4
 8006a86:	d908      	bls.n	8006a9a <_free_r+0x42>
 8006a88:	6820      	ldr	r0, [r4, #0]
 8006a8a:	1821      	adds	r1, r4, r0
 8006a8c:	428b      	cmp	r3, r1
 8006a8e:	bf01      	itttt	eq
 8006a90:	6819      	ldreq	r1, [r3, #0]
 8006a92:	685b      	ldreq	r3, [r3, #4]
 8006a94:	1809      	addeq	r1, r1, r0
 8006a96:	6021      	streq	r1, [r4, #0]
 8006a98:	e7ed      	b.n	8006a76 <_free_r+0x1e>
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	b10b      	cbz	r3, 8006aa4 <_free_r+0x4c>
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	d9fa      	bls.n	8006a9a <_free_r+0x42>
 8006aa4:	6811      	ldr	r1, [r2, #0]
 8006aa6:	1850      	adds	r0, r2, r1
 8006aa8:	42a0      	cmp	r0, r4
 8006aaa:	d10b      	bne.n	8006ac4 <_free_r+0x6c>
 8006aac:	6820      	ldr	r0, [r4, #0]
 8006aae:	4401      	add	r1, r0
 8006ab0:	1850      	adds	r0, r2, r1
 8006ab2:	4283      	cmp	r3, r0
 8006ab4:	6011      	str	r1, [r2, #0]
 8006ab6:	d1e0      	bne.n	8006a7a <_free_r+0x22>
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	6053      	str	r3, [r2, #4]
 8006abe:	4408      	add	r0, r1
 8006ac0:	6010      	str	r0, [r2, #0]
 8006ac2:	e7da      	b.n	8006a7a <_free_r+0x22>
 8006ac4:	d902      	bls.n	8006acc <_free_r+0x74>
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	602b      	str	r3, [r5, #0]
 8006aca:	e7d6      	b.n	8006a7a <_free_r+0x22>
 8006acc:	6820      	ldr	r0, [r4, #0]
 8006ace:	1821      	adds	r1, r4, r0
 8006ad0:	428b      	cmp	r3, r1
 8006ad2:	bf04      	itt	eq
 8006ad4:	6819      	ldreq	r1, [r3, #0]
 8006ad6:	685b      	ldreq	r3, [r3, #4]
 8006ad8:	6063      	str	r3, [r4, #4]
 8006ada:	bf04      	itt	eq
 8006adc:	1809      	addeq	r1, r1, r0
 8006ade:	6021      	streq	r1, [r4, #0]
 8006ae0:	6054      	str	r4, [r2, #4]
 8006ae2:	e7ca      	b.n	8006a7a <_free_r+0x22>
 8006ae4:	bd38      	pop	{r3, r4, r5, pc}
 8006ae6:	bf00      	nop
 8006ae8:	200004f8 	.word	0x200004f8

08006aec <malloc>:
 8006aec:	4b02      	ldr	r3, [pc, #8]	@ (8006af8 <malloc+0xc>)
 8006aee:	4601      	mov	r1, r0
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	f000 b825 	b.w	8006b40 <_malloc_r>
 8006af6:	bf00      	nop
 8006af8:	20000018 	.word	0x20000018

08006afc <sbrk_aligned>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	4e0f      	ldr	r6, [pc, #60]	@ (8006b3c <sbrk_aligned+0x40>)
 8006b00:	460c      	mov	r4, r1
 8006b02:	6831      	ldr	r1, [r6, #0]
 8006b04:	4605      	mov	r5, r0
 8006b06:	b911      	cbnz	r1, 8006b0e <sbrk_aligned+0x12>
 8006b08:	f000 fe50 	bl	80077ac <_sbrk_r>
 8006b0c:	6030      	str	r0, [r6, #0]
 8006b0e:	4621      	mov	r1, r4
 8006b10:	4628      	mov	r0, r5
 8006b12:	f000 fe4b 	bl	80077ac <_sbrk_r>
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	d103      	bne.n	8006b22 <sbrk_aligned+0x26>
 8006b1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006b1e:	4620      	mov	r0, r4
 8006b20:	bd70      	pop	{r4, r5, r6, pc}
 8006b22:	1cc4      	adds	r4, r0, #3
 8006b24:	f024 0403 	bic.w	r4, r4, #3
 8006b28:	42a0      	cmp	r0, r4
 8006b2a:	d0f8      	beq.n	8006b1e <sbrk_aligned+0x22>
 8006b2c:	1a21      	subs	r1, r4, r0
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 fe3c 	bl	80077ac <_sbrk_r>
 8006b34:	3001      	adds	r0, #1
 8006b36:	d1f2      	bne.n	8006b1e <sbrk_aligned+0x22>
 8006b38:	e7ef      	b.n	8006b1a <sbrk_aligned+0x1e>
 8006b3a:	bf00      	nop
 8006b3c:	200004f4 	.word	0x200004f4

08006b40 <_malloc_r>:
 8006b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b44:	1ccd      	adds	r5, r1, #3
 8006b46:	f025 0503 	bic.w	r5, r5, #3
 8006b4a:	3508      	adds	r5, #8
 8006b4c:	2d0c      	cmp	r5, #12
 8006b4e:	bf38      	it	cc
 8006b50:	250c      	movcc	r5, #12
 8006b52:	2d00      	cmp	r5, #0
 8006b54:	4606      	mov	r6, r0
 8006b56:	db01      	blt.n	8006b5c <_malloc_r+0x1c>
 8006b58:	42a9      	cmp	r1, r5
 8006b5a:	d904      	bls.n	8006b66 <_malloc_r+0x26>
 8006b5c:	230c      	movs	r3, #12
 8006b5e:	6033      	str	r3, [r6, #0]
 8006b60:	2000      	movs	r0, #0
 8006b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c3c <_malloc_r+0xfc>
 8006b6a:	f000 f869 	bl	8006c40 <__malloc_lock>
 8006b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b72:	461c      	mov	r4, r3
 8006b74:	bb44      	cbnz	r4, 8006bc8 <_malloc_r+0x88>
 8006b76:	4629      	mov	r1, r5
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f7ff ffbf 	bl	8006afc <sbrk_aligned>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	4604      	mov	r4, r0
 8006b82:	d158      	bne.n	8006c36 <_malloc_r+0xf6>
 8006b84:	f8d8 4000 	ldr.w	r4, [r8]
 8006b88:	4627      	mov	r7, r4
 8006b8a:	2f00      	cmp	r7, #0
 8006b8c:	d143      	bne.n	8006c16 <_malloc_r+0xd6>
 8006b8e:	2c00      	cmp	r4, #0
 8006b90:	d04b      	beq.n	8006c2a <_malloc_r+0xea>
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	4639      	mov	r1, r7
 8006b96:	4630      	mov	r0, r6
 8006b98:	eb04 0903 	add.w	r9, r4, r3
 8006b9c:	f000 fe06 	bl	80077ac <_sbrk_r>
 8006ba0:	4581      	cmp	r9, r0
 8006ba2:	d142      	bne.n	8006c2a <_malloc_r+0xea>
 8006ba4:	6821      	ldr	r1, [r4, #0]
 8006ba6:	1a6d      	subs	r5, r5, r1
 8006ba8:	4629      	mov	r1, r5
 8006baa:	4630      	mov	r0, r6
 8006bac:	f7ff ffa6 	bl	8006afc <sbrk_aligned>
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d03a      	beq.n	8006c2a <_malloc_r+0xea>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	442b      	add	r3, r5
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	f8d8 3000 	ldr.w	r3, [r8]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	bb62      	cbnz	r2, 8006c1c <_malloc_r+0xdc>
 8006bc2:	f8c8 7000 	str.w	r7, [r8]
 8006bc6:	e00f      	b.n	8006be8 <_malloc_r+0xa8>
 8006bc8:	6822      	ldr	r2, [r4, #0]
 8006bca:	1b52      	subs	r2, r2, r5
 8006bcc:	d420      	bmi.n	8006c10 <_malloc_r+0xd0>
 8006bce:	2a0b      	cmp	r2, #11
 8006bd0:	d917      	bls.n	8006c02 <_malloc_r+0xc2>
 8006bd2:	1961      	adds	r1, r4, r5
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	6025      	str	r5, [r4, #0]
 8006bd8:	bf18      	it	ne
 8006bda:	6059      	strne	r1, [r3, #4]
 8006bdc:	6863      	ldr	r3, [r4, #4]
 8006bde:	bf08      	it	eq
 8006be0:	f8c8 1000 	streq.w	r1, [r8]
 8006be4:	5162      	str	r2, [r4, r5]
 8006be6:	604b      	str	r3, [r1, #4]
 8006be8:	4630      	mov	r0, r6
 8006bea:	f000 f82f 	bl	8006c4c <__malloc_unlock>
 8006bee:	f104 000b 	add.w	r0, r4, #11
 8006bf2:	1d23      	adds	r3, r4, #4
 8006bf4:	f020 0007 	bic.w	r0, r0, #7
 8006bf8:	1ac2      	subs	r2, r0, r3
 8006bfa:	bf1c      	itt	ne
 8006bfc:	1a1b      	subne	r3, r3, r0
 8006bfe:	50a3      	strne	r3, [r4, r2]
 8006c00:	e7af      	b.n	8006b62 <_malloc_r+0x22>
 8006c02:	6862      	ldr	r2, [r4, #4]
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	bf0c      	ite	eq
 8006c08:	f8c8 2000 	streq.w	r2, [r8]
 8006c0c:	605a      	strne	r2, [r3, #4]
 8006c0e:	e7eb      	b.n	8006be8 <_malloc_r+0xa8>
 8006c10:	4623      	mov	r3, r4
 8006c12:	6864      	ldr	r4, [r4, #4]
 8006c14:	e7ae      	b.n	8006b74 <_malloc_r+0x34>
 8006c16:	463c      	mov	r4, r7
 8006c18:	687f      	ldr	r7, [r7, #4]
 8006c1a:	e7b6      	b.n	8006b8a <_malloc_r+0x4a>
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	d1fb      	bne.n	8006c1c <_malloc_r+0xdc>
 8006c24:	2300      	movs	r3, #0
 8006c26:	6053      	str	r3, [r2, #4]
 8006c28:	e7de      	b.n	8006be8 <_malloc_r+0xa8>
 8006c2a:	230c      	movs	r3, #12
 8006c2c:	6033      	str	r3, [r6, #0]
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f000 f80c 	bl	8006c4c <__malloc_unlock>
 8006c34:	e794      	b.n	8006b60 <_malloc_r+0x20>
 8006c36:	6005      	str	r5, [r0, #0]
 8006c38:	e7d6      	b.n	8006be8 <_malloc_r+0xa8>
 8006c3a:	bf00      	nop
 8006c3c:	200004f8 	.word	0x200004f8

08006c40 <__malloc_lock>:
 8006c40:	4801      	ldr	r0, [pc, #4]	@ (8006c48 <__malloc_lock+0x8>)
 8006c42:	f7ff b886 	b.w	8005d52 <__retarget_lock_acquire_recursive>
 8006c46:	bf00      	nop
 8006c48:	200004f0 	.word	0x200004f0

08006c4c <__malloc_unlock>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	@ (8006c54 <__malloc_unlock+0x8>)
 8006c4e:	f7ff b881 	b.w	8005d54 <__retarget_lock_release_recursive>
 8006c52:	bf00      	nop
 8006c54:	200004f0 	.word	0x200004f0

08006c58 <_Balloc>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	69c6      	ldr	r6, [r0, #28]
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	460d      	mov	r5, r1
 8006c60:	b976      	cbnz	r6, 8006c80 <_Balloc+0x28>
 8006c62:	2010      	movs	r0, #16
 8006c64:	f7ff ff42 	bl	8006aec <malloc>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	61e0      	str	r0, [r4, #28]
 8006c6c:	b920      	cbnz	r0, 8006c78 <_Balloc+0x20>
 8006c6e:	4b18      	ldr	r3, [pc, #96]	@ (8006cd0 <_Balloc+0x78>)
 8006c70:	4818      	ldr	r0, [pc, #96]	@ (8006cd4 <_Balloc+0x7c>)
 8006c72:	216b      	movs	r1, #107	@ 0x6b
 8006c74:	f7ff f878 	bl	8005d68 <__assert_func>
 8006c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c7c:	6006      	str	r6, [r0, #0]
 8006c7e:	60c6      	str	r6, [r0, #12]
 8006c80:	69e6      	ldr	r6, [r4, #28]
 8006c82:	68f3      	ldr	r3, [r6, #12]
 8006c84:	b183      	cbz	r3, 8006ca8 <_Balloc+0x50>
 8006c86:	69e3      	ldr	r3, [r4, #28]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c8e:	b9b8      	cbnz	r0, 8006cc0 <_Balloc+0x68>
 8006c90:	2101      	movs	r1, #1
 8006c92:	fa01 f605 	lsl.w	r6, r1, r5
 8006c96:	1d72      	adds	r2, r6, #5
 8006c98:	0092      	lsls	r2, r2, #2
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 fdab 	bl	80077f6 <_calloc_r>
 8006ca0:	b160      	cbz	r0, 8006cbc <_Balloc+0x64>
 8006ca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ca6:	e00e      	b.n	8006cc6 <_Balloc+0x6e>
 8006ca8:	2221      	movs	r2, #33	@ 0x21
 8006caa:	2104      	movs	r1, #4
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 fda2 	bl	80077f6 <_calloc_r>
 8006cb2:	69e3      	ldr	r3, [r4, #28]
 8006cb4:	60f0      	str	r0, [r6, #12]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e4      	bne.n	8006c86 <_Balloc+0x2e>
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
 8006cc0:	6802      	ldr	r2, [r0, #0]
 8006cc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ccc:	e7f7      	b.n	8006cbe <_Balloc+0x66>
 8006cce:	bf00      	nop
 8006cd0:	08007f8c 	.word	0x08007f8c
 8006cd4:	080080af 	.word	0x080080af

08006cd8 <_Bfree>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	69c6      	ldr	r6, [r0, #28]
 8006cdc:	4605      	mov	r5, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	b976      	cbnz	r6, 8006d00 <_Bfree+0x28>
 8006ce2:	2010      	movs	r0, #16
 8006ce4:	f7ff ff02 	bl	8006aec <malloc>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	61e8      	str	r0, [r5, #28]
 8006cec:	b920      	cbnz	r0, 8006cf8 <_Bfree+0x20>
 8006cee:	4b09      	ldr	r3, [pc, #36]	@ (8006d14 <_Bfree+0x3c>)
 8006cf0:	4809      	ldr	r0, [pc, #36]	@ (8006d18 <_Bfree+0x40>)
 8006cf2:	218f      	movs	r1, #143	@ 0x8f
 8006cf4:	f7ff f838 	bl	8005d68 <__assert_func>
 8006cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cfc:	6006      	str	r6, [r0, #0]
 8006cfe:	60c6      	str	r6, [r0, #12]
 8006d00:	b13c      	cbz	r4, 8006d12 <_Bfree+0x3a>
 8006d02:	69eb      	ldr	r3, [r5, #28]
 8006d04:	6862      	ldr	r2, [r4, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d0c:	6021      	str	r1, [r4, #0]
 8006d0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	08007f8c 	.word	0x08007f8c
 8006d18:	080080af 	.word	0x080080af

08006d1c <__multadd>:
 8006d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d20:	690d      	ldr	r5, [r1, #16]
 8006d22:	4607      	mov	r7, r0
 8006d24:	460c      	mov	r4, r1
 8006d26:	461e      	mov	r6, r3
 8006d28:	f101 0c14 	add.w	ip, r1, #20
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	f8dc 3000 	ldr.w	r3, [ip]
 8006d32:	b299      	uxth	r1, r3
 8006d34:	fb02 6101 	mla	r1, r2, r1, r6
 8006d38:	0c1e      	lsrs	r6, r3, #16
 8006d3a:	0c0b      	lsrs	r3, r1, #16
 8006d3c:	fb02 3306 	mla	r3, r2, r6, r3
 8006d40:	b289      	uxth	r1, r1
 8006d42:	3001      	adds	r0, #1
 8006d44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d48:	4285      	cmp	r5, r0
 8006d4a:	f84c 1b04 	str.w	r1, [ip], #4
 8006d4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d52:	dcec      	bgt.n	8006d2e <__multadd+0x12>
 8006d54:	b30e      	cbz	r6, 8006d9a <__multadd+0x7e>
 8006d56:	68a3      	ldr	r3, [r4, #8]
 8006d58:	42ab      	cmp	r3, r5
 8006d5a:	dc19      	bgt.n	8006d90 <__multadd+0x74>
 8006d5c:	6861      	ldr	r1, [r4, #4]
 8006d5e:	4638      	mov	r0, r7
 8006d60:	3101      	adds	r1, #1
 8006d62:	f7ff ff79 	bl	8006c58 <_Balloc>
 8006d66:	4680      	mov	r8, r0
 8006d68:	b928      	cbnz	r0, 8006d76 <__multadd+0x5a>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006da0 <__multadd+0x84>)
 8006d6e:	480d      	ldr	r0, [pc, #52]	@ (8006da4 <__multadd+0x88>)
 8006d70:	21ba      	movs	r1, #186	@ 0xba
 8006d72:	f7fe fff9 	bl	8005d68 <__assert_func>
 8006d76:	6922      	ldr	r2, [r4, #16]
 8006d78:	3202      	adds	r2, #2
 8006d7a:	f104 010c 	add.w	r1, r4, #12
 8006d7e:	0092      	lsls	r2, r2, #2
 8006d80:	300c      	adds	r0, #12
 8006d82:	f000 fd23 	bl	80077cc <memcpy>
 8006d86:	4621      	mov	r1, r4
 8006d88:	4638      	mov	r0, r7
 8006d8a:	f7ff ffa5 	bl	8006cd8 <_Bfree>
 8006d8e:	4644      	mov	r4, r8
 8006d90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d94:	3501      	adds	r5, #1
 8006d96:	615e      	str	r6, [r3, #20]
 8006d98:	6125      	str	r5, [r4, #16]
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da0:	0800809e 	.word	0x0800809e
 8006da4:	080080af 	.word	0x080080af

08006da8 <__hi0bits>:
 8006da8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006dac:	4603      	mov	r3, r0
 8006dae:	bf36      	itet	cc
 8006db0:	0403      	lslcc	r3, r0, #16
 8006db2:	2000      	movcs	r0, #0
 8006db4:	2010      	movcc	r0, #16
 8006db6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dba:	bf3c      	itt	cc
 8006dbc:	021b      	lslcc	r3, r3, #8
 8006dbe:	3008      	addcc	r0, #8
 8006dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dc4:	bf3c      	itt	cc
 8006dc6:	011b      	lslcc	r3, r3, #4
 8006dc8:	3004      	addcc	r0, #4
 8006dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dce:	bf3c      	itt	cc
 8006dd0:	009b      	lslcc	r3, r3, #2
 8006dd2:	3002      	addcc	r0, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	db05      	blt.n	8006de4 <__hi0bits+0x3c>
 8006dd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ddc:	f100 0001 	add.w	r0, r0, #1
 8006de0:	bf08      	it	eq
 8006de2:	2020      	moveq	r0, #32
 8006de4:	4770      	bx	lr

08006de6 <__lo0bits>:
 8006de6:	6803      	ldr	r3, [r0, #0]
 8006de8:	4602      	mov	r2, r0
 8006dea:	f013 0007 	ands.w	r0, r3, #7
 8006dee:	d00b      	beq.n	8006e08 <__lo0bits+0x22>
 8006df0:	07d9      	lsls	r1, r3, #31
 8006df2:	d421      	bmi.n	8006e38 <__lo0bits+0x52>
 8006df4:	0798      	lsls	r0, r3, #30
 8006df6:	bf49      	itett	mi
 8006df8:	085b      	lsrmi	r3, r3, #1
 8006dfa:	089b      	lsrpl	r3, r3, #2
 8006dfc:	2001      	movmi	r0, #1
 8006dfe:	6013      	strmi	r3, [r2, #0]
 8006e00:	bf5c      	itt	pl
 8006e02:	6013      	strpl	r3, [r2, #0]
 8006e04:	2002      	movpl	r0, #2
 8006e06:	4770      	bx	lr
 8006e08:	b299      	uxth	r1, r3
 8006e0a:	b909      	cbnz	r1, 8006e10 <__lo0bits+0x2a>
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	2010      	movs	r0, #16
 8006e10:	b2d9      	uxtb	r1, r3
 8006e12:	b909      	cbnz	r1, 8006e18 <__lo0bits+0x32>
 8006e14:	3008      	adds	r0, #8
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	0719      	lsls	r1, r3, #28
 8006e1a:	bf04      	itt	eq
 8006e1c:	091b      	lsreq	r3, r3, #4
 8006e1e:	3004      	addeq	r0, #4
 8006e20:	0799      	lsls	r1, r3, #30
 8006e22:	bf04      	itt	eq
 8006e24:	089b      	lsreq	r3, r3, #2
 8006e26:	3002      	addeq	r0, #2
 8006e28:	07d9      	lsls	r1, r3, #31
 8006e2a:	d403      	bmi.n	8006e34 <__lo0bits+0x4e>
 8006e2c:	085b      	lsrs	r3, r3, #1
 8006e2e:	f100 0001 	add.w	r0, r0, #1
 8006e32:	d003      	beq.n	8006e3c <__lo0bits+0x56>
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	4770      	bx	lr
 8006e38:	2000      	movs	r0, #0
 8006e3a:	4770      	bx	lr
 8006e3c:	2020      	movs	r0, #32
 8006e3e:	4770      	bx	lr

08006e40 <__i2b>:
 8006e40:	b510      	push	{r4, lr}
 8006e42:	460c      	mov	r4, r1
 8006e44:	2101      	movs	r1, #1
 8006e46:	f7ff ff07 	bl	8006c58 <_Balloc>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	b928      	cbnz	r0, 8006e5a <__i2b+0x1a>
 8006e4e:	4b05      	ldr	r3, [pc, #20]	@ (8006e64 <__i2b+0x24>)
 8006e50:	4805      	ldr	r0, [pc, #20]	@ (8006e68 <__i2b+0x28>)
 8006e52:	f240 1145 	movw	r1, #325	@ 0x145
 8006e56:	f7fe ff87 	bl	8005d68 <__assert_func>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	6144      	str	r4, [r0, #20]
 8006e5e:	6103      	str	r3, [r0, #16]
 8006e60:	bd10      	pop	{r4, pc}
 8006e62:	bf00      	nop
 8006e64:	0800809e 	.word	0x0800809e
 8006e68:	080080af 	.word	0x080080af

08006e6c <__multiply>:
 8006e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e70:	4617      	mov	r7, r2
 8006e72:	690a      	ldr	r2, [r1, #16]
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	bfa8      	it	ge
 8006e7a:	463b      	movge	r3, r7
 8006e7c:	4689      	mov	r9, r1
 8006e7e:	bfa4      	itt	ge
 8006e80:	460f      	movge	r7, r1
 8006e82:	4699      	movge	r9, r3
 8006e84:	693d      	ldr	r5, [r7, #16]
 8006e86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	eb05 060a 	add.w	r6, r5, sl
 8006e92:	42b3      	cmp	r3, r6
 8006e94:	b085      	sub	sp, #20
 8006e96:	bfb8      	it	lt
 8006e98:	3101      	addlt	r1, #1
 8006e9a:	f7ff fedd 	bl	8006c58 <_Balloc>
 8006e9e:	b930      	cbnz	r0, 8006eae <__multiply+0x42>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	4b41      	ldr	r3, [pc, #260]	@ (8006fa8 <__multiply+0x13c>)
 8006ea4:	4841      	ldr	r0, [pc, #260]	@ (8006fac <__multiply+0x140>)
 8006ea6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006eaa:	f7fe ff5d 	bl	8005d68 <__assert_func>
 8006eae:	f100 0414 	add.w	r4, r0, #20
 8006eb2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006eb6:	4623      	mov	r3, r4
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4573      	cmp	r3, lr
 8006ebc:	d320      	bcc.n	8006f00 <__multiply+0x94>
 8006ebe:	f107 0814 	add.w	r8, r7, #20
 8006ec2:	f109 0114 	add.w	r1, r9, #20
 8006ec6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006eca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006ece:	9302      	str	r3, [sp, #8]
 8006ed0:	1beb      	subs	r3, r5, r7
 8006ed2:	3b15      	subs	r3, #21
 8006ed4:	f023 0303 	bic.w	r3, r3, #3
 8006ed8:	3304      	adds	r3, #4
 8006eda:	3715      	adds	r7, #21
 8006edc:	42bd      	cmp	r5, r7
 8006ede:	bf38      	it	cc
 8006ee0:	2304      	movcc	r3, #4
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	9b02      	ldr	r3, [sp, #8]
 8006ee6:	9103      	str	r1, [sp, #12]
 8006ee8:	428b      	cmp	r3, r1
 8006eea:	d80c      	bhi.n	8006f06 <__multiply+0x9a>
 8006eec:	2e00      	cmp	r6, #0
 8006eee:	dd03      	ble.n	8006ef8 <__multiply+0x8c>
 8006ef0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d055      	beq.n	8006fa4 <__multiply+0x138>
 8006ef8:	6106      	str	r6, [r0, #16]
 8006efa:	b005      	add	sp, #20
 8006efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f00:	f843 2b04 	str.w	r2, [r3], #4
 8006f04:	e7d9      	b.n	8006eba <__multiply+0x4e>
 8006f06:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f0a:	f1ba 0f00 	cmp.w	sl, #0
 8006f0e:	d01f      	beq.n	8006f50 <__multiply+0xe4>
 8006f10:	46c4      	mov	ip, r8
 8006f12:	46a1      	mov	r9, r4
 8006f14:	2700      	movs	r7, #0
 8006f16:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f1a:	f8d9 3000 	ldr.w	r3, [r9]
 8006f1e:	fa1f fb82 	uxth.w	fp, r2
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f28:	443b      	add	r3, r7
 8006f2a:	f8d9 7000 	ldr.w	r7, [r9]
 8006f2e:	0c12      	lsrs	r2, r2, #16
 8006f30:	0c3f      	lsrs	r7, r7, #16
 8006f32:	fb0a 7202 	mla	r2, sl, r2, r7
 8006f36:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f40:	4565      	cmp	r5, ip
 8006f42:	f849 3b04 	str.w	r3, [r9], #4
 8006f46:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006f4a:	d8e4      	bhi.n	8006f16 <__multiply+0xaa>
 8006f4c:	9b01      	ldr	r3, [sp, #4]
 8006f4e:	50e7      	str	r7, [r4, r3]
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f56:	3104      	adds	r1, #4
 8006f58:	f1b9 0f00 	cmp.w	r9, #0
 8006f5c:	d020      	beq.n	8006fa0 <__multiply+0x134>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	4647      	mov	r7, r8
 8006f62:	46a4      	mov	ip, r4
 8006f64:	f04f 0a00 	mov.w	sl, #0
 8006f68:	f8b7 b000 	ldrh.w	fp, [r7]
 8006f6c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006f70:	fb09 220b 	mla	r2, r9, fp, r2
 8006f74:	4452      	add	r2, sl
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f7c:	f84c 3b04 	str.w	r3, [ip], #4
 8006f80:	f857 3b04 	ldr.w	r3, [r7], #4
 8006f84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f88:	f8bc 3000 	ldrh.w	r3, [ip]
 8006f8c:	fb09 330a 	mla	r3, r9, sl, r3
 8006f90:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006f94:	42bd      	cmp	r5, r7
 8006f96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f9a:	d8e5      	bhi.n	8006f68 <__multiply+0xfc>
 8006f9c:	9a01      	ldr	r2, [sp, #4]
 8006f9e:	50a3      	str	r3, [r4, r2]
 8006fa0:	3404      	adds	r4, #4
 8006fa2:	e79f      	b.n	8006ee4 <__multiply+0x78>
 8006fa4:	3e01      	subs	r6, #1
 8006fa6:	e7a1      	b.n	8006eec <__multiply+0x80>
 8006fa8:	0800809e 	.word	0x0800809e
 8006fac:	080080af 	.word	0x080080af

08006fb0 <__pow5mult>:
 8006fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb4:	4615      	mov	r5, r2
 8006fb6:	f012 0203 	ands.w	r2, r2, #3
 8006fba:	4607      	mov	r7, r0
 8006fbc:	460e      	mov	r6, r1
 8006fbe:	d007      	beq.n	8006fd0 <__pow5mult+0x20>
 8006fc0:	4c25      	ldr	r4, [pc, #148]	@ (8007058 <__pow5mult+0xa8>)
 8006fc2:	3a01      	subs	r2, #1
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fca:	f7ff fea7 	bl	8006d1c <__multadd>
 8006fce:	4606      	mov	r6, r0
 8006fd0:	10ad      	asrs	r5, r5, #2
 8006fd2:	d03d      	beq.n	8007050 <__pow5mult+0xa0>
 8006fd4:	69fc      	ldr	r4, [r7, #28]
 8006fd6:	b97c      	cbnz	r4, 8006ff8 <__pow5mult+0x48>
 8006fd8:	2010      	movs	r0, #16
 8006fda:	f7ff fd87 	bl	8006aec <malloc>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	61f8      	str	r0, [r7, #28]
 8006fe2:	b928      	cbnz	r0, 8006ff0 <__pow5mult+0x40>
 8006fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800705c <__pow5mult+0xac>)
 8006fe6:	481e      	ldr	r0, [pc, #120]	@ (8007060 <__pow5mult+0xb0>)
 8006fe8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006fec:	f7fe febc 	bl	8005d68 <__assert_func>
 8006ff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ff4:	6004      	str	r4, [r0, #0]
 8006ff6:	60c4      	str	r4, [r0, #12]
 8006ff8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ffc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007000:	b94c      	cbnz	r4, 8007016 <__pow5mult+0x66>
 8007002:	f240 2171 	movw	r1, #625	@ 0x271
 8007006:	4638      	mov	r0, r7
 8007008:	f7ff ff1a 	bl	8006e40 <__i2b>
 800700c:	2300      	movs	r3, #0
 800700e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007012:	4604      	mov	r4, r0
 8007014:	6003      	str	r3, [r0, #0]
 8007016:	f04f 0900 	mov.w	r9, #0
 800701a:	07eb      	lsls	r3, r5, #31
 800701c:	d50a      	bpl.n	8007034 <__pow5mult+0x84>
 800701e:	4631      	mov	r1, r6
 8007020:	4622      	mov	r2, r4
 8007022:	4638      	mov	r0, r7
 8007024:	f7ff ff22 	bl	8006e6c <__multiply>
 8007028:	4631      	mov	r1, r6
 800702a:	4680      	mov	r8, r0
 800702c:	4638      	mov	r0, r7
 800702e:	f7ff fe53 	bl	8006cd8 <_Bfree>
 8007032:	4646      	mov	r6, r8
 8007034:	106d      	asrs	r5, r5, #1
 8007036:	d00b      	beq.n	8007050 <__pow5mult+0xa0>
 8007038:	6820      	ldr	r0, [r4, #0]
 800703a:	b938      	cbnz	r0, 800704c <__pow5mult+0x9c>
 800703c:	4622      	mov	r2, r4
 800703e:	4621      	mov	r1, r4
 8007040:	4638      	mov	r0, r7
 8007042:	f7ff ff13 	bl	8006e6c <__multiply>
 8007046:	6020      	str	r0, [r4, #0]
 8007048:	f8c0 9000 	str.w	r9, [r0]
 800704c:	4604      	mov	r4, r0
 800704e:	e7e4      	b.n	800701a <__pow5mult+0x6a>
 8007050:	4630      	mov	r0, r6
 8007052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007056:	bf00      	nop
 8007058:	08008124 	.word	0x08008124
 800705c:	08007f8c 	.word	0x08007f8c
 8007060:	080080af 	.word	0x080080af

08007064 <__lshift>:
 8007064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	460c      	mov	r4, r1
 800706a:	6849      	ldr	r1, [r1, #4]
 800706c:	6923      	ldr	r3, [r4, #16]
 800706e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007072:	68a3      	ldr	r3, [r4, #8]
 8007074:	4607      	mov	r7, r0
 8007076:	4691      	mov	r9, r2
 8007078:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800707c:	f108 0601 	add.w	r6, r8, #1
 8007080:	42b3      	cmp	r3, r6
 8007082:	db0b      	blt.n	800709c <__lshift+0x38>
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff fde7 	bl	8006c58 <_Balloc>
 800708a:	4605      	mov	r5, r0
 800708c:	b948      	cbnz	r0, 80070a2 <__lshift+0x3e>
 800708e:	4602      	mov	r2, r0
 8007090:	4b28      	ldr	r3, [pc, #160]	@ (8007134 <__lshift+0xd0>)
 8007092:	4829      	ldr	r0, [pc, #164]	@ (8007138 <__lshift+0xd4>)
 8007094:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007098:	f7fe fe66 	bl	8005d68 <__assert_func>
 800709c:	3101      	adds	r1, #1
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	e7ee      	b.n	8007080 <__lshift+0x1c>
 80070a2:	2300      	movs	r3, #0
 80070a4:	f100 0114 	add.w	r1, r0, #20
 80070a8:	f100 0210 	add.w	r2, r0, #16
 80070ac:	4618      	mov	r0, r3
 80070ae:	4553      	cmp	r3, sl
 80070b0:	db33      	blt.n	800711a <__lshift+0xb6>
 80070b2:	6920      	ldr	r0, [r4, #16]
 80070b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070b8:	f104 0314 	add.w	r3, r4, #20
 80070bc:	f019 091f 	ands.w	r9, r9, #31
 80070c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070c8:	d02b      	beq.n	8007122 <__lshift+0xbe>
 80070ca:	f1c9 0e20 	rsb	lr, r9, #32
 80070ce:	468a      	mov	sl, r1
 80070d0:	2200      	movs	r2, #0
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	fa00 f009 	lsl.w	r0, r0, r9
 80070d8:	4310      	orrs	r0, r2
 80070da:	f84a 0b04 	str.w	r0, [sl], #4
 80070de:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e2:	459c      	cmp	ip, r3
 80070e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80070e8:	d8f3      	bhi.n	80070d2 <__lshift+0x6e>
 80070ea:	ebac 0304 	sub.w	r3, ip, r4
 80070ee:	3b15      	subs	r3, #21
 80070f0:	f023 0303 	bic.w	r3, r3, #3
 80070f4:	3304      	adds	r3, #4
 80070f6:	f104 0015 	add.w	r0, r4, #21
 80070fa:	4560      	cmp	r0, ip
 80070fc:	bf88      	it	hi
 80070fe:	2304      	movhi	r3, #4
 8007100:	50ca      	str	r2, [r1, r3]
 8007102:	b10a      	cbz	r2, 8007108 <__lshift+0xa4>
 8007104:	f108 0602 	add.w	r6, r8, #2
 8007108:	3e01      	subs	r6, #1
 800710a:	4638      	mov	r0, r7
 800710c:	612e      	str	r6, [r5, #16]
 800710e:	4621      	mov	r1, r4
 8007110:	f7ff fde2 	bl	8006cd8 <_Bfree>
 8007114:	4628      	mov	r0, r5
 8007116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711a:	f842 0f04 	str.w	r0, [r2, #4]!
 800711e:	3301      	adds	r3, #1
 8007120:	e7c5      	b.n	80070ae <__lshift+0x4a>
 8007122:	3904      	subs	r1, #4
 8007124:	f853 2b04 	ldr.w	r2, [r3], #4
 8007128:	f841 2f04 	str.w	r2, [r1, #4]!
 800712c:	459c      	cmp	ip, r3
 800712e:	d8f9      	bhi.n	8007124 <__lshift+0xc0>
 8007130:	e7ea      	b.n	8007108 <__lshift+0xa4>
 8007132:	bf00      	nop
 8007134:	0800809e 	.word	0x0800809e
 8007138:	080080af 	.word	0x080080af

0800713c <__mcmp>:
 800713c:	690a      	ldr	r2, [r1, #16]
 800713e:	4603      	mov	r3, r0
 8007140:	6900      	ldr	r0, [r0, #16]
 8007142:	1a80      	subs	r0, r0, r2
 8007144:	b530      	push	{r4, r5, lr}
 8007146:	d10e      	bne.n	8007166 <__mcmp+0x2a>
 8007148:	3314      	adds	r3, #20
 800714a:	3114      	adds	r1, #20
 800714c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007150:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007154:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007158:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800715c:	4295      	cmp	r5, r2
 800715e:	d003      	beq.n	8007168 <__mcmp+0x2c>
 8007160:	d205      	bcs.n	800716e <__mcmp+0x32>
 8007162:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007166:	bd30      	pop	{r4, r5, pc}
 8007168:	42a3      	cmp	r3, r4
 800716a:	d3f3      	bcc.n	8007154 <__mcmp+0x18>
 800716c:	e7fb      	b.n	8007166 <__mcmp+0x2a>
 800716e:	2001      	movs	r0, #1
 8007170:	e7f9      	b.n	8007166 <__mcmp+0x2a>
	...

08007174 <__mdiff>:
 8007174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	4689      	mov	r9, r1
 800717a:	4606      	mov	r6, r0
 800717c:	4611      	mov	r1, r2
 800717e:	4648      	mov	r0, r9
 8007180:	4614      	mov	r4, r2
 8007182:	f7ff ffdb 	bl	800713c <__mcmp>
 8007186:	1e05      	subs	r5, r0, #0
 8007188:	d112      	bne.n	80071b0 <__mdiff+0x3c>
 800718a:	4629      	mov	r1, r5
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff fd63 	bl	8006c58 <_Balloc>
 8007192:	4602      	mov	r2, r0
 8007194:	b928      	cbnz	r0, 80071a2 <__mdiff+0x2e>
 8007196:	4b3f      	ldr	r3, [pc, #252]	@ (8007294 <__mdiff+0x120>)
 8007198:	f240 2137 	movw	r1, #567	@ 0x237
 800719c:	483e      	ldr	r0, [pc, #248]	@ (8007298 <__mdiff+0x124>)
 800719e:	f7fe fde3 	bl	8005d68 <__assert_func>
 80071a2:	2301      	movs	r3, #1
 80071a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071a8:	4610      	mov	r0, r2
 80071aa:	b003      	add	sp, #12
 80071ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b0:	bfbc      	itt	lt
 80071b2:	464b      	movlt	r3, r9
 80071b4:	46a1      	movlt	r9, r4
 80071b6:	4630      	mov	r0, r6
 80071b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80071bc:	bfba      	itte	lt
 80071be:	461c      	movlt	r4, r3
 80071c0:	2501      	movlt	r5, #1
 80071c2:	2500      	movge	r5, #0
 80071c4:	f7ff fd48 	bl	8006c58 <_Balloc>
 80071c8:	4602      	mov	r2, r0
 80071ca:	b918      	cbnz	r0, 80071d4 <__mdiff+0x60>
 80071cc:	4b31      	ldr	r3, [pc, #196]	@ (8007294 <__mdiff+0x120>)
 80071ce:	f240 2145 	movw	r1, #581	@ 0x245
 80071d2:	e7e3      	b.n	800719c <__mdiff+0x28>
 80071d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071d8:	6926      	ldr	r6, [r4, #16]
 80071da:	60c5      	str	r5, [r0, #12]
 80071dc:	f109 0310 	add.w	r3, r9, #16
 80071e0:	f109 0514 	add.w	r5, r9, #20
 80071e4:	f104 0e14 	add.w	lr, r4, #20
 80071e8:	f100 0b14 	add.w	fp, r0, #20
 80071ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80071f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	46d9      	mov	r9, fp
 80071f8:	f04f 0c00 	mov.w	ip, #0
 80071fc:	9b01      	ldr	r3, [sp, #4]
 80071fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007202:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	fa1f f38a 	uxth.w	r3, sl
 800720c:	4619      	mov	r1, r3
 800720e:	b283      	uxth	r3, r0
 8007210:	1acb      	subs	r3, r1, r3
 8007212:	0c00      	lsrs	r0, r0, #16
 8007214:	4463      	add	r3, ip
 8007216:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800721a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800721e:	b29b      	uxth	r3, r3
 8007220:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007224:	4576      	cmp	r6, lr
 8007226:	f849 3b04 	str.w	r3, [r9], #4
 800722a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800722e:	d8e5      	bhi.n	80071fc <__mdiff+0x88>
 8007230:	1b33      	subs	r3, r6, r4
 8007232:	3b15      	subs	r3, #21
 8007234:	f023 0303 	bic.w	r3, r3, #3
 8007238:	3415      	adds	r4, #21
 800723a:	3304      	adds	r3, #4
 800723c:	42a6      	cmp	r6, r4
 800723e:	bf38      	it	cc
 8007240:	2304      	movcc	r3, #4
 8007242:	441d      	add	r5, r3
 8007244:	445b      	add	r3, fp
 8007246:	461e      	mov	r6, r3
 8007248:	462c      	mov	r4, r5
 800724a:	4544      	cmp	r4, r8
 800724c:	d30e      	bcc.n	800726c <__mdiff+0xf8>
 800724e:	f108 0103 	add.w	r1, r8, #3
 8007252:	1b49      	subs	r1, r1, r5
 8007254:	f021 0103 	bic.w	r1, r1, #3
 8007258:	3d03      	subs	r5, #3
 800725a:	45a8      	cmp	r8, r5
 800725c:	bf38      	it	cc
 800725e:	2100      	movcc	r1, #0
 8007260:	440b      	add	r3, r1
 8007262:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007266:	b191      	cbz	r1, 800728e <__mdiff+0x11a>
 8007268:	6117      	str	r7, [r2, #16]
 800726a:	e79d      	b.n	80071a8 <__mdiff+0x34>
 800726c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007270:	46e6      	mov	lr, ip
 8007272:	0c08      	lsrs	r0, r1, #16
 8007274:	fa1c fc81 	uxtah	ip, ip, r1
 8007278:	4471      	add	r1, lr
 800727a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800727e:	b289      	uxth	r1, r1
 8007280:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007284:	f846 1b04 	str.w	r1, [r6], #4
 8007288:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800728c:	e7dd      	b.n	800724a <__mdiff+0xd6>
 800728e:	3f01      	subs	r7, #1
 8007290:	e7e7      	b.n	8007262 <__mdiff+0xee>
 8007292:	bf00      	nop
 8007294:	0800809e 	.word	0x0800809e
 8007298:	080080af 	.word	0x080080af

0800729c <__d2b>:
 800729c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072a0:	460f      	mov	r7, r1
 80072a2:	2101      	movs	r1, #1
 80072a4:	ec59 8b10 	vmov	r8, r9, d0
 80072a8:	4616      	mov	r6, r2
 80072aa:	f7ff fcd5 	bl	8006c58 <_Balloc>
 80072ae:	4604      	mov	r4, r0
 80072b0:	b930      	cbnz	r0, 80072c0 <__d2b+0x24>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b23      	ldr	r3, [pc, #140]	@ (8007344 <__d2b+0xa8>)
 80072b6:	4824      	ldr	r0, [pc, #144]	@ (8007348 <__d2b+0xac>)
 80072b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80072bc:	f7fe fd54 	bl	8005d68 <__assert_func>
 80072c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072c8:	b10d      	cbz	r5, 80072ce <__d2b+0x32>
 80072ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	f1b8 0300 	subs.w	r3, r8, #0
 80072d4:	d023      	beq.n	800731e <__d2b+0x82>
 80072d6:	4668      	mov	r0, sp
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	f7ff fd84 	bl	8006de6 <__lo0bits>
 80072de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072e2:	b1d0      	cbz	r0, 800731a <__d2b+0x7e>
 80072e4:	f1c0 0320 	rsb	r3, r0, #32
 80072e8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ec:	430b      	orrs	r3, r1
 80072ee:	40c2      	lsrs	r2, r0
 80072f0:	6163      	str	r3, [r4, #20]
 80072f2:	9201      	str	r2, [sp, #4]
 80072f4:	9b01      	ldr	r3, [sp, #4]
 80072f6:	61a3      	str	r3, [r4, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bf0c      	ite	eq
 80072fc:	2201      	moveq	r2, #1
 80072fe:	2202      	movne	r2, #2
 8007300:	6122      	str	r2, [r4, #16]
 8007302:	b1a5      	cbz	r5, 800732e <__d2b+0x92>
 8007304:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007308:	4405      	add	r5, r0
 800730a:	603d      	str	r5, [r7, #0]
 800730c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007310:	6030      	str	r0, [r6, #0]
 8007312:	4620      	mov	r0, r4
 8007314:	b003      	add	sp, #12
 8007316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800731a:	6161      	str	r1, [r4, #20]
 800731c:	e7ea      	b.n	80072f4 <__d2b+0x58>
 800731e:	a801      	add	r0, sp, #4
 8007320:	f7ff fd61 	bl	8006de6 <__lo0bits>
 8007324:	9b01      	ldr	r3, [sp, #4]
 8007326:	6163      	str	r3, [r4, #20]
 8007328:	3020      	adds	r0, #32
 800732a:	2201      	movs	r2, #1
 800732c:	e7e8      	b.n	8007300 <__d2b+0x64>
 800732e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007332:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007336:	6038      	str	r0, [r7, #0]
 8007338:	6918      	ldr	r0, [r3, #16]
 800733a:	f7ff fd35 	bl	8006da8 <__hi0bits>
 800733e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007342:	e7e5      	b.n	8007310 <__d2b+0x74>
 8007344:	0800809e 	.word	0x0800809e
 8007348:	080080af 	.word	0x080080af

0800734c <__ssputs_r>:
 800734c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007350:	688e      	ldr	r6, [r1, #8]
 8007352:	461f      	mov	r7, r3
 8007354:	42be      	cmp	r6, r7
 8007356:	680b      	ldr	r3, [r1, #0]
 8007358:	4682      	mov	sl, r0
 800735a:	460c      	mov	r4, r1
 800735c:	4690      	mov	r8, r2
 800735e:	d82d      	bhi.n	80073bc <__ssputs_r+0x70>
 8007360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007364:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007368:	d026      	beq.n	80073b8 <__ssputs_r+0x6c>
 800736a:	6965      	ldr	r5, [r4, #20]
 800736c:	6909      	ldr	r1, [r1, #16]
 800736e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007372:	eba3 0901 	sub.w	r9, r3, r1
 8007376:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800737a:	1c7b      	adds	r3, r7, #1
 800737c:	444b      	add	r3, r9
 800737e:	106d      	asrs	r5, r5, #1
 8007380:	429d      	cmp	r5, r3
 8007382:	bf38      	it	cc
 8007384:	461d      	movcc	r5, r3
 8007386:	0553      	lsls	r3, r2, #21
 8007388:	d527      	bpl.n	80073da <__ssputs_r+0x8e>
 800738a:	4629      	mov	r1, r5
 800738c:	f7ff fbd8 	bl	8006b40 <_malloc_r>
 8007390:	4606      	mov	r6, r0
 8007392:	b360      	cbz	r0, 80073ee <__ssputs_r+0xa2>
 8007394:	6921      	ldr	r1, [r4, #16]
 8007396:	464a      	mov	r2, r9
 8007398:	f000 fa18 	bl	80077cc <memcpy>
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80073a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a6:	81a3      	strh	r3, [r4, #12]
 80073a8:	6126      	str	r6, [r4, #16]
 80073aa:	6165      	str	r5, [r4, #20]
 80073ac:	444e      	add	r6, r9
 80073ae:	eba5 0509 	sub.w	r5, r5, r9
 80073b2:	6026      	str	r6, [r4, #0]
 80073b4:	60a5      	str	r5, [r4, #8]
 80073b6:	463e      	mov	r6, r7
 80073b8:	42be      	cmp	r6, r7
 80073ba:	d900      	bls.n	80073be <__ssputs_r+0x72>
 80073bc:	463e      	mov	r6, r7
 80073be:	6820      	ldr	r0, [r4, #0]
 80073c0:	4632      	mov	r2, r6
 80073c2:	4641      	mov	r1, r8
 80073c4:	f000 f9d8 	bl	8007778 <memmove>
 80073c8:	68a3      	ldr	r3, [r4, #8]
 80073ca:	1b9b      	subs	r3, r3, r6
 80073cc:	60a3      	str	r3, [r4, #8]
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	4433      	add	r3, r6
 80073d2:	6023      	str	r3, [r4, #0]
 80073d4:	2000      	movs	r0, #0
 80073d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073da:	462a      	mov	r2, r5
 80073dc:	f000 fa31 	bl	8007842 <_realloc_r>
 80073e0:	4606      	mov	r6, r0
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d1e0      	bne.n	80073a8 <__ssputs_r+0x5c>
 80073e6:	6921      	ldr	r1, [r4, #16]
 80073e8:	4650      	mov	r0, sl
 80073ea:	f7ff fb35 	bl	8006a58 <_free_r>
 80073ee:	230c      	movs	r3, #12
 80073f0:	f8ca 3000 	str.w	r3, [sl]
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007400:	e7e9      	b.n	80073d6 <__ssputs_r+0x8a>
	...

08007404 <_svfiprintf_r>:
 8007404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	4698      	mov	r8, r3
 800740a:	898b      	ldrh	r3, [r1, #12]
 800740c:	061b      	lsls	r3, r3, #24
 800740e:	b09d      	sub	sp, #116	@ 0x74
 8007410:	4607      	mov	r7, r0
 8007412:	460d      	mov	r5, r1
 8007414:	4614      	mov	r4, r2
 8007416:	d510      	bpl.n	800743a <_svfiprintf_r+0x36>
 8007418:	690b      	ldr	r3, [r1, #16]
 800741a:	b973      	cbnz	r3, 800743a <_svfiprintf_r+0x36>
 800741c:	2140      	movs	r1, #64	@ 0x40
 800741e:	f7ff fb8f 	bl	8006b40 <_malloc_r>
 8007422:	6028      	str	r0, [r5, #0]
 8007424:	6128      	str	r0, [r5, #16]
 8007426:	b930      	cbnz	r0, 8007436 <_svfiprintf_r+0x32>
 8007428:	230c      	movs	r3, #12
 800742a:	603b      	str	r3, [r7, #0]
 800742c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007430:	b01d      	add	sp, #116	@ 0x74
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	2340      	movs	r3, #64	@ 0x40
 8007438:	616b      	str	r3, [r5, #20]
 800743a:	2300      	movs	r3, #0
 800743c:	9309      	str	r3, [sp, #36]	@ 0x24
 800743e:	2320      	movs	r3, #32
 8007440:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007444:	f8cd 800c 	str.w	r8, [sp, #12]
 8007448:	2330      	movs	r3, #48	@ 0x30
 800744a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075e8 <_svfiprintf_r+0x1e4>
 800744e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007452:	f04f 0901 	mov.w	r9, #1
 8007456:	4623      	mov	r3, r4
 8007458:	469a      	mov	sl, r3
 800745a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800745e:	b10a      	cbz	r2, 8007464 <_svfiprintf_r+0x60>
 8007460:	2a25      	cmp	r2, #37	@ 0x25
 8007462:	d1f9      	bne.n	8007458 <_svfiprintf_r+0x54>
 8007464:	ebba 0b04 	subs.w	fp, sl, r4
 8007468:	d00b      	beq.n	8007482 <_svfiprintf_r+0x7e>
 800746a:	465b      	mov	r3, fp
 800746c:	4622      	mov	r2, r4
 800746e:	4629      	mov	r1, r5
 8007470:	4638      	mov	r0, r7
 8007472:	f7ff ff6b 	bl	800734c <__ssputs_r>
 8007476:	3001      	adds	r0, #1
 8007478:	f000 80a7 	beq.w	80075ca <_svfiprintf_r+0x1c6>
 800747c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800747e:	445a      	add	r2, fp
 8007480:	9209      	str	r2, [sp, #36]	@ 0x24
 8007482:	f89a 3000 	ldrb.w	r3, [sl]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 809f 	beq.w	80075ca <_svfiprintf_r+0x1c6>
 800748c:	2300      	movs	r3, #0
 800748e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007496:	f10a 0a01 	add.w	sl, sl, #1
 800749a:	9304      	str	r3, [sp, #16]
 800749c:	9307      	str	r3, [sp, #28]
 800749e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80074a4:	4654      	mov	r4, sl
 80074a6:	2205      	movs	r2, #5
 80074a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ac:	484e      	ldr	r0, [pc, #312]	@ (80075e8 <_svfiprintf_r+0x1e4>)
 80074ae:	f7f8 fe8f 	bl	80001d0 <memchr>
 80074b2:	9a04      	ldr	r2, [sp, #16]
 80074b4:	b9d8      	cbnz	r0, 80074ee <_svfiprintf_r+0xea>
 80074b6:	06d0      	lsls	r0, r2, #27
 80074b8:	bf44      	itt	mi
 80074ba:	2320      	movmi	r3, #32
 80074bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074c0:	0711      	lsls	r1, r2, #28
 80074c2:	bf44      	itt	mi
 80074c4:	232b      	movmi	r3, #43	@ 0x2b
 80074c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ca:	f89a 3000 	ldrb.w	r3, [sl]
 80074ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80074d0:	d015      	beq.n	80074fe <_svfiprintf_r+0xfa>
 80074d2:	9a07      	ldr	r2, [sp, #28]
 80074d4:	4654      	mov	r4, sl
 80074d6:	2000      	movs	r0, #0
 80074d8:	f04f 0c0a 	mov.w	ip, #10
 80074dc:	4621      	mov	r1, r4
 80074de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074e2:	3b30      	subs	r3, #48	@ 0x30
 80074e4:	2b09      	cmp	r3, #9
 80074e6:	d94b      	bls.n	8007580 <_svfiprintf_r+0x17c>
 80074e8:	b1b0      	cbz	r0, 8007518 <_svfiprintf_r+0x114>
 80074ea:	9207      	str	r2, [sp, #28]
 80074ec:	e014      	b.n	8007518 <_svfiprintf_r+0x114>
 80074ee:	eba0 0308 	sub.w	r3, r0, r8
 80074f2:	fa09 f303 	lsl.w	r3, r9, r3
 80074f6:	4313      	orrs	r3, r2
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	46a2      	mov	sl, r4
 80074fc:	e7d2      	b.n	80074a4 <_svfiprintf_r+0xa0>
 80074fe:	9b03      	ldr	r3, [sp, #12]
 8007500:	1d19      	adds	r1, r3, #4
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	9103      	str	r1, [sp, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	bfbb      	ittet	lt
 800750a:	425b      	neglt	r3, r3
 800750c:	f042 0202 	orrlt.w	r2, r2, #2
 8007510:	9307      	strge	r3, [sp, #28]
 8007512:	9307      	strlt	r3, [sp, #28]
 8007514:	bfb8      	it	lt
 8007516:	9204      	strlt	r2, [sp, #16]
 8007518:	7823      	ldrb	r3, [r4, #0]
 800751a:	2b2e      	cmp	r3, #46	@ 0x2e
 800751c:	d10a      	bne.n	8007534 <_svfiprintf_r+0x130>
 800751e:	7863      	ldrb	r3, [r4, #1]
 8007520:	2b2a      	cmp	r3, #42	@ 0x2a
 8007522:	d132      	bne.n	800758a <_svfiprintf_r+0x186>
 8007524:	9b03      	ldr	r3, [sp, #12]
 8007526:	1d1a      	adds	r2, r3, #4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	9203      	str	r2, [sp, #12]
 800752c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007530:	3402      	adds	r4, #2
 8007532:	9305      	str	r3, [sp, #20]
 8007534:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075f8 <_svfiprintf_r+0x1f4>
 8007538:	7821      	ldrb	r1, [r4, #0]
 800753a:	2203      	movs	r2, #3
 800753c:	4650      	mov	r0, sl
 800753e:	f7f8 fe47 	bl	80001d0 <memchr>
 8007542:	b138      	cbz	r0, 8007554 <_svfiprintf_r+0x150>
 8007544:	9b04      	ldr	r3, [sp, #16]
 8007546:	eba0 000a 	sub.w	r0, r0, sl
 800754a:	2240      	movs	r2, #64	@ 0x40
 800754c:	4082      	lsls	r2, r0
 800754e:	4313      	orrs	r3, r2
 8007550:	3401      	adds	r4, #1
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007558:	4824      	ldr	r0, [pc, #144]	@ (80075ec <_svfiprintf_r+0x1e8>)
 800755a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800755e:	2206      	movs	r2, #6
 8007560:	f7f8 fe36 	bl	80001d0 <memchr>
 8007564:	2800      	cmp	r0, #0
 8007566:	d036      	beq.n	80075d6 <_svfiprintf_r+0x1d2>
 8007568:	4b21      	ldr	r3, [pc, #132]	@ (80075f0 <_svfiprintf_r+0x1ec>)
 800756a:	bb1b      	cbnz	r3, 80075b4 <_svfiprintf_r+0x1b0>
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	3307      	adds	r3, #7
 8007570:	f023 0307 	bic.w	r3, r3, #7
 8007574:	3308      	adds	r3, #8
 8007576:	9303      	str	r3, [sp, #12]
 8007578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757a:	4433      	add	r3, r6
 800757c:	9309      	str	r3, [sp, #36]	@ 0x24
 800757e:	e76a      	b.n	8007456 <_svfiprintf_r+0x52>
 8007580:	fb0c 3202 	mla	r2, ip, r2, r3
 8007584:	460c      	mov	r4, r1
 8007586:	2001      	movs	r0, #1
 8007588:	e7a8      	b.n	80074dc <_svfiprintf_r+0xd8>
 800758a:	2300      	movs	r3, #0
 800758c:	3401      	adds	r4, #1
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	4619      	mov	r1, r3
 8007592:	f04f 0c0a 	mov.w	ip, #10
 8007596:	4620      	mov	r0, r4
 8007598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800759c:	3a30      	subs	r2, #48	@ 0x30
 800759e:	2a09      	cmp	r2, #9
 80075a0:	d903      	bls.n	80075aa <_svfiprintf_r+0x1a6>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0c6      	beq.n	8007534 <_svfiprintf_r+0x130>
 80075a6:	9105      	str	r1, [sp, #20]
 80075a8:	e7c4      	b.n	8007534 <_svfiprintf_r+0x130>
 80075aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80075ae:	4604      	mov	r4, r0
 80075b0:	2301      	movs	r3, #1
 80075b2:	e7f0      	b.n	8007596 <_svfiprintf_r+0x192>
 80075b4:	ab03      	add	r3, sp, #12
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	462a      	mov	r2, r5
 80075ba:	4b0e      	ldr	r3, [pc, #56]	@ (80075f4 <_svfiprintf_r+0x1f0>)
 80075bc:	a904      	add	r1, sp, #16
 80075be:	4638      	mov	r0, r7
 80075c0:	f7fd fdc4 	bl	800514c <_printf_float>
 80075c4:	1c42      	adds	r2, r0, #1
 80075c6:	4606      	mov	r6, r0
 80075c8:	d1d6      	bne.n	8007578 <_svfiprintf_r+0x174>
 80075ca:	89ab      	ldrh	r3, [r5, #12]
 80075cc:	065b      	lsls	r3, r3, #25
 80075ce:	f53f af2d 	bmi.w	800742c <_svfiprintf_r+0x28>
 80075d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075d4:	e72c      	b.n	8007430 <_svfiprintf_r+0x2c>
 80075d6:	ab03      	add	r3, sp, #12
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	462a      	mov	r2, r5
 80075dc:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <_svfiprintf_r+0x1f0>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	4638      	mov	r0, r7
 80075e2:	f7fe f84b 	bl	800567c <_printf_i>
 80075e6:	e7ed      	b.n	80075c4 <_svfiprintf_r+0x1c0>
 80075e8:	08008108 	.word	0x08008108
 80075ec:	08008112 	.word	0x08008112
 80075f0:	0800514d 	.word	0x0800514d
 80075f4:	0800734d 	.word	0x0800734d
 80075f8:	0800810e 	.word	0x0800810e

080075fc <__sflush_r>:
 80075fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	0716      	lsls	r6, r2, #28
 8007606:	4605      	mov	r5, r0
 8007608:	460c      	mov	r4, r1
 800760a:	d454      	bmi.n	80076b6 <__sflush_r+0xba>
 800760c:	684b      	ldr	r3, [r1, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dc02      	bgt.n	8007618 <__sflush_r+0x1c>
 8007612:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	dd48      	ble.n	80076aa <__sflush_r+0xae>
 8007618:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800761a:	2e00      	cmp	r6, #0
 800761c:	d045      	beq.n	80076aa <__sflush_r+0xae>
 800761e:	2300      	movs	r3, #0
 8007620:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007624:	682f      	ldr	r7, [r5, #0]
 8007626:	6a21      	ldr	r1, [r4, #32]
 8007628:	602b      	str	r3, [r5, #0]
 800762a:	d030      	beq.n	800768e <__sflush_r+0x92>
 800762c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	0759      	lsls	r1, r3, #29
 8007632:	d505      	bpl.n	8007640 <__sflush_r+0x44>
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800763a:	b10b      	cbz	r3, 8007640 <__sflush_r+0x44>
 800763c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	2300      	movs	r3, #0
 8007642:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007644:	6a21      	ldr	r1, [r4, #32]
 8007646:	4628      	mov	r0, r5
 8007648:	47b0      	blx	r6
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	d106      	bne.n	800765e <__sflush_r+0x62>
 8007650:	6829      	ldr	r1, [r5, #0]
 8007652:	291d      	cmp	r1, #29
 8007654:	d82b      	bhi.n	80076ae <__sflush_r+0xb2>
 8007656:	4a2a      	ldr	r2, [pc, #168]	@ (8007700 <__sflush_r+0x104>)
 8007658:	40ca      	lsrs	r2, r1
 800765a:	07d6      	lsls	r6, r2, #31
 800765c:	d527      	bpl.n	80076ae <__sflush_r+0xb2>
 800765e:	2200      	movs	r2, #0
 8007660:	6062      	str	r2, [r4, #4]
 8007662:	04d9      	lsls	r1, r3, #19
 8007664:	6922      	ldr	r2, [r4, #16]
 8007666:	6022      	str	r2, [r4, #0]
 8007668:	d504      	bpl.n	8007674 <__sflush_r+0x78>
 800766a:	1c42      	adds	r2, r0, #1
 800766c:	d101      	bne.n	8007672 <__sflush_r+0x76>
 800766e:	682b      	ldr	r3, [r5, #0]
 8007670:	b903      	cbnz	r3, 8007674 <__sflush_r+0x78>
 8007672:	6560      	str	r0, [r4, #84]	@ 0x54
 8007674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007676:	602f      	str	r7, [r5, #0]
 8007678:	b1b9      	cbz	r1, 80076aa <__sflush_r+0xae>
 800767a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800767e:	4299      	cmp	r1, r3
 8007680:	d002      	beq.n	8007688 <__sflush_r+0x8c>
 8007682:	4628      	mov	r0, r5
 8007684:	f7ff f9e8 	bl	8006a58 <_free_r>
 8007688:	2300      	movs	r3, #0
 800768a:	6363      	str	r3, [r4, #52]	@ 0x34
 800768c:	e00d      	b.n	80076aa <__sflush_r+0xae>
 800768e:	2301      	movs	r3, #1
 8007690:	4628      	mov	r0, r5
 8007692:	47b0      	blx	r6
 8007694:	4602      	mov	r2, r0
 8007696:	1c50      	adds	r0, r2, #1
 8007698:	d1c9      	bne.n	800762e <__sflush_r+0x32>
 800769a:	682b      	ldr	r3, [r5, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0c6      	beq.n	800762e <__sflush_r+0x32>
 80076a0:	2b1d      	cmp	r3, #29
 80076a2:	d001      	beq.n	80076a8 <__sflush_r+0xac>
 80076a4:	2b16      	cmp	r3, #22
 80076a6:	d11e      	bne.n	80076e6 <__sflush_r+0xea>
 80076a8:	602f      	str	r7, [r5, #0]
 80076aa:	2000      	movs	r0, #0
 80076ac:	e022      	b.n	80076f4 <__sflush_r+0xf8>
 80076ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076b2:	b21b      	sxth	r3, r3
 80076b4:	e01b      	b.n	80076ee <__sflush_r+0xf2>
 80076b6:	690f      	ldr	r7, [r1, #16]
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	d0f6      	beq.n	80076aa <__sflush_r+0xae>
 80076bc:	0793      	lsls	r3, r2, #30
 80076be:	680e      	ldr	r6, [r1, #0]
 80076c0:	bf08      	it	eq
 80076c2:	694b      	ldreq	r3, [r1, #20]
 80076c4:	600f      	str	r7, [r1, #0]
 80076c6:	bf18      	it	ne
 80076c8:	2300      	movne	r3, #0
 80076ca:	eba6 0807 	sub.w	r8, r6, r7
 80076ce:	608b      	str	r3, [r1, #8]
 80076d0:	f1b8 0f00 	cmp.w	r8, #0
 80076d4:	dde9      	ble.n	80076aa <__sflush_r+0xae>
 80076d6:	6a21      	ldr	r1, [r4, #32]
 80076d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076da:	4643      	mov	r3, r8
 80076dc:	463a      	mov	r2, r7
 80076de:	4628      	mov	r0, r5
 80076e0:	47b0      	blx	r6
 80076e2:	2800      	cmp	r0, #0
 80076e4:	dc08      	bgt.n	80076f8 <__sflush_r+0xfc>
 80076e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f8:	4407      	add	r7, r0
 80076fa:	eba8 0800 	sub.w	r8, r8, r0
 80076fe:	e7e7      	b.n	80076d0 <__sflush_r+0xd4>
 8007700:	20400001 	.word	0x20400001

08007704 <_fflush_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	690b      	ldr	r3, [r1, #16]
 8007708:	4605      	mov	r5, r0
 800770a:	460c      	mov	r4, r1
 800770c:	b913      	cbnz	r3, 8007714 <_fflush_r+0x10>
 800770e:	2500      	movs	r5, #0
 8007710:	4628      	mov	r0, r5
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	b118      	cbz	r0, 800771e <_fflush_r+0x1a>
 8007716:	6a03      	ldr	r3, [r0, #32]
 8007718:	b90b      	cbnz	r3, 800771e <_fflush_r+0x1a>
 800771a:	f7fe f959 	bl	80059d0 <__sinit>
 800771e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f3      	beq.n	800770e <_fflush_r+0xa>
 8007726:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007728:	07d0      	lsls	r0, r2, #31
 800772a:	d404      	bmi.n	8007736 <_fflush_r+0x32>
 800772c:	0599      	lsls	r1, r3, #22
 800772e:	d402      	bmi.n	8007736 <_fflush_r+0x32>
 8007730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007732:	f7fe fb0e 	bl	8005d52 <__retarget_lock_acquire_recursive>
 8007736:	4628      	mov	r0, r5
 8007738:	4621      	mov	r1, r4
 800773a:	f7ff ff5f 	bl	80075fc <__sflush_r>
 800773e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007740:	07da      	lsls	r2, r3, #31
 8007742:	4605      	mov	r5, r0
 8007744:	d4e4      	bmi.n	8007710 <_fflush_r+0xc>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	059b      	lsls	r3, r3, #22
 800774a:	d4e1      	bmi.n	8007710 <_fflush_r+0xc>
 800774c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800774e:	f7fe fb01 	bl	8005d54 <__retarget_lock_release_recursive>
 8007752:	e7dd      	b.n	8007710 <_fflush_r+0xc>

08007754 <fiprintf>:
 8007754:	b40e      	push	{r1, r2, r3}
 8007756:	b503      	push	{r0, r1, lr}
 8007758:	4601      	mov	r1, r0
 800775a:	ab03      	add	r3, sp, #12
 800775c:	4805      	ldr	r0, [pc, #20]	@ (8007774 <fiprintf+0x20>)
 800775e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007762:	6800      	ldr	r0, [r0, #0]
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	f000 f8d1 	bl	800790c <_vfiprintf_r>
 800776a:	b002      	add	sp, #8
 800776c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007770:	b003      	add	sp, #12
 8007772:	4770      	bx	lr
 8007774:	20000018 	.word	0x20000018

08007778 <memmove>:
 8007778:	4288      	cmp	r0, r1
 800777a:	b510      	push	{r4, lr}
 800777c:	eb01 0402 	add.w	r4, r1, r2
 8007780:	d902      	bls.n	8007788 <memmove+0x10>
 8007782:	4284      	cmp	r4, r0
 8007784:	4623      	mov	r3, r4
 8007786:	d807      	bhi.n	8007798 <memmove+0x20>
 8007788:	1e43      	subs	r3, r0, #1
 800778a:	42a1      	cmp	r1, r4
 800778c:	d008      	beq.n	80077a0 <memmove+0x28>
 800778e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007796:	e7f8      	b.n	800778a <memmove+0x12>
 8007798:	4402      	add	r2, r0
 800779a:	4601      	mov	r1, r0
 800779c:	428a      	cmp	r2, r1
 800779e:	d100      	bne.n	80077a2 <memmove+0x2a>
 80077a0:	bd10      	pop	{r4, pc}
 80077a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077aa:	e7f7      	b.n	800779c <memmove+0x24>

080077ac <_sbrk_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d06      	ldr	r5, [pc, #24]	@ (80077c8 <_sbrk_r+0x1c>)
 80077b0:	2300      	movs	r3, #0
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	602b      	str	r3, [r5, #0]
 80077b8:	f7fa fafa 	bl	8001db0 <_sbrk>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d102      	bne.n	80077c6 <_sbrk_r+0x1a>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	b103      	cbz	r3, 80077c6 <_sbrk_r+0x1a>
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	200004ec 	.word	0x200004ec

080077cc <memcpy>:
 80077cc:	440a      	add	r2, r1
 80077ce:	4291      	cmp	r1, r2
 80077d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80077d4:	d100      	bne.n	80077d8 <memcpy+0xc>
 80077d6:	4770      	bx	lr
 80077d8:	b510      	push	{r4, lr}
 80077da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077e2:	4291      	cmp	r1, r2
 80077e4:	d1f9      	bne.n	80077da <memcpy+0xe>
 80077e6:	bd10      	pop	{r4, pc}

080077e8 <abort>:
 80077e8:	b508      	push	{r3, lr}
 80077ea:	2006      	movs	r0, #6
 80077ec:	f000 fa62 	bl	8007cb4 <raise>
 80077f0:	2001      	movs	r0, #1
 80077f2:	f7fa fa65 	bl	8001cc0 <_exit>

080077f6 <_calloc_r>:
 80077f6:	b570      	push	{r4, r5, r6, lr}
 80077f8:	fba1 5402 	umull	r5, r4, r1, r2
 80077fc:	b934      	cbnz	r4, 800780c <_calloc_r+0x16>
 80077fe:	4629      	mov	r1, r5
 8007800:	f7ff f99e 	bl	8006b40 <_malloc_r>
 8007804:	4606      	mov	r6, r0
 8007806:	b928      	cbnz	r0, 8007814 <_calloc_r+0x1e>
 8007808:	4630      	mov	r0, r6
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	220c      	movs	r2, #12
 800780e:	6002      	str	r2, [r0, #0]
 8007810:	2600      	movs	r6, #0
 8007812:	e7f9      	b.n	8007808 <_calloc_r+0x12>
 8007814:	462a      	mov	r2, r5
 8007816:	4621      	mov	r1, r4
 8007818:	f7fe f9ab 	bl	8005b72 <memset>
 800781c:	e7f4      	b.n	8007808 <_calloc_r+0x12>

0800781e <__ascii_mbtowc>:
 800781e:	b082      	sub	sp, #8
 8007820:	b901      	cbnz	r1, 8007824 <__ascii_mbtowc+0x6>
 8007822:	a901      	add	r1, sp, #4
 8007824:	b142      	cbz	r2, 8007838 <__ascii_mbtowc+0x1a>
 8007826:	b14b      	cbz	r3, 800783c <__ascii_mbtowc+0x1e>
 8007828:	7813      	ldrb	r3, [r2, #0]
 800782a:	600b      	str	r3, [r1, #0]
 800782c:	7812      	ldrb	r2, [r2, #0]
 800782e:	1e10      	subs	r0, r2, #0
 8007830:	bf18      	it	ne
 8007832:	2001      	movne	r0, #1
 8007834:	b002      	add	sp, #8
 8007836:	4770      	bx	lr
 8007838:	4610      	mov	r0, r2
 800783a:	e7fb      	b.n	8007834 <__ascii_mbtowc+0x16>
 800783c:	f06f 0001 	mvn.w	r0, #1
 8007840:	e7f8      	b.n	8007834 <__ascii_mbtowc+0x16>

08007842 <_realloc_r>:
 8007842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007846:	4607      	mov	r7, r0
 8007848:	4614      	mov	r4, r2
 800784a:	460d      	mov	r5, r1
 800784c:	b921      	cbnz	r1, 8007858 <_realloc_r+0x16>
 800784e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007852:	4611      	mov	r1, r2
 8007854:	f7ff b974 	b.w	8006b40 <_malloc_r>
 8007858:	b92a      	cbnz	r2, 8007866 <_realloc_r+0x24>
 800785a:	f7ff f8fd 	bl	8006a58 <_free_r>
 800785e:	4625      	mov	r5, r4
 8007860:	4628      	mov	r0, r5
 8007862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007866:	f000 fa41 	bl	8007cec <_malloc_usable_size_r>
 800786a:	4284      	cmp	r4, r0
 800786c:	4606      	mov	r6, r0
 800786e:	d802      	bhi.n	8007876 <_realloc_r+0x34>
 8007870:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007874:	d8f4      	bhi.n	8007860 <_realloc_r+0x1e>
 8007876:	4621      	mov	r1, r4
 8007878:	4638      	mov	r0, r7
 800787a:	f7ff f961 	bl	8006b40 <_malloc_r>
 800787e:	4680      	mov	r8, r0
 8007880:	b908      	cbnz	r0, 8007886 <_realloc_r+0x44>
 8007882:	4645      	mov	r5, r8
 8007884:	e7ec      	b.n	8007860 <_realloc_r+0x1e>
 8007886:	42b4      	cmp	r4, r6
 8007888:	4622      	mov	r2, r4
 800788a:	4629      	mov	r1, r5
 800788c:	bf28      	it	cs
 800788e:	4632      	movcs	r2, r6
 8007890:	f7ff ff9c 	bl	80077cc <memcpy>
 8007894:	4629      	mov	r1, r5
 8007896:	4638      	mov	r0, r7
 8007898:	f7ff f8de 	bl	8006a58 <_free_r>
 800789c:	e7f1      	b.n	8007882 <_realloc_r+0x40>

0800789e <__ascii_wctomb>:
 800789e:	4603      	mov	r3, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	b141      	cbz	r1, 80078b6 <__ascii_wctomb+0x18>
 80078a4:	2aff      	cmp	r2, #255	@ 0xff
 80078a6:	d904      	bls.n	80078b2 <__ascii_wctomb+0x14>
 80078a8:	228a      	movs	r2, #138	@ 0x8a
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078b0:	4770      	bx	lr
 80078b2:	700a      	strb	r2, [r1, #0]
 80078b4:	2001      	movs	r0, #1
 80078b6:	4770      	bx	lr

080078b8 <__sfputc_r>:
 80078b8:	6893      	ldr	r3, [r2, #8]
 80078ba:	3b01      	subs	r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	b410      	push	{r4}
 80078c0:	6093      	str	r3, [r2, #8]
 80078c2:	da08      	bge.n	80078d6 <__sfputc_r+0x1e>
 80078c4:	6994      	ldr	r4, [r2, #24]
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	db01      	blt.n	80078ce <__sfputc_r+0x16>
 80078ca:	290a      	cmp	r1, #10
 80078cc:	d103      	bne.n	80078d6 <__sfputc_r+0x1e>
 80078ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078d2:	f000 b933 	b.w	8007b3c <__swbuf_r>
 80078d6:	6813      	ldr	r3, [r2, #0]
 80078d8:	1c58      	adds	r0, r3, #1
 80078da:	6010      	str	r0, [r2, #0]
 80078dc:	7019      	strb	r1, [r3, #0]
 80078de:	4608      	mov	r0, r1
 80078e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <__sfputs_r>:
 80078e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e8:	4606      	mov	r6, r0
 80078ea:	460f      	mov	r7, r1
 80078ec:	4614      	mov	r4, r2
 80078ee:	18d5      	adds	r5, r2, r3
 80078f0:	42ac      	cmp	r4, r5
 80078f2:	d101      	bne.n	80078f8 <__sfputs_r+0x12>
 80078f4:	2000      	movs	r0, #0
 80078f6:	e007      	b.n	8007908 <__sfputs_r+0x22>
 80078f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078fc:	463a      	mov	r2, r7
 80078fe:	4630      	mov	r0, r6
 8007900:	f7ff ffda 	bl	80078b8 <__sfputc_r>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d1f3      	bne.n	80078f0 <__sfputs_r+0xa>
 8007908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800790c <_vfiprintf_r>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	460d      	mov	r5, r1
 8007912:	b09d      	sub	sp, #116	@ 0x74
 8007914:	4614      	mov	r4, r2
 8007916:	4698      	mov	r8, r3
 8007918:	4606      	mov	r6, r0
 800791a:	b118      	cbz	r0, 8007924 <_vfiprintf_r+0x18>
 800791c:	6a03      	ldr	r3, [r0, #32]
 800791e:	b90b      	cbnz	r3, 8007924 <_vfiprintf_r+0x18>
 8007920:	f7fe f856 	bl	80059d0 <__sinit>
 8007924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007926:	07d9      	lsls	r1, r3, #31
 8007928:	d405      	bmi.n	8007936 <_vfiprintf_r+0x2a>
 800792a:	89ab      	ldrh	r3, [r5, #12]
 800792c:	059a      	lsls	r2, r3, #22
 800792e:	d402      	bmi.n	8007936 <_vfiprintf_r+0x2a>
 8007930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007932:	f7fe fa0e 	bl	8005d52 <__retarget_lock_acquire_recursive>
 8007936:	89ab      	ldrh	r3, [r5, #12]
 8007938:	071b      	lsls	r3, r3, #28
 800793a:	d501      	bpl.n	8007940 <_vfiprintf_r+0x34>
 800793c:	692b      	ldr	r3, [r5, #16]
 800793e:	b99b      	cbnz	r3, 8007968 <_vfiprintf_r+0x5c>
 8007940:	4629      	mov	r1, r5
 8007942:	4630      	mov	r0, r6
 8007944:	f000 f938 	bl	8007bb8 <__swsetup_r>
 8007948:	b170      	cbz	r0, 8007968 <_vfiprintf_r+0x5c>
 800794a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800794c:	07dc      	lsls	r4, r3, #31
 800794e:	d504      	bpl.n	800795a <_vfiprintf_r+0x4e>
 8007950:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007954:	b01d      	add	sp, #116	@ 0x74
 8007956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	0598      	lsls	r0, r3, #22
 800795e:	d4f7      	bmi.n	8007950 <_vfiprintf_r+0x44>
 8007960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007962:	f7fe f9f7 	bl	8005d54 <__retarget_lock_release_recursive>
 8007966:	e7f3      	b.n	8007950 <_vfiprintf_r+0x44>
 8007968:	2300      	movs	r3, #0
 800796a:	9309      	str	r3, [sp, #36]	@ 0x24
 800796c:	2320      	movs	r3, #32
 800796e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007972:	f8cd 800c 	str.w	r8, [sp, #12]
 8007976:	2330      	movs	r3, #48	@ 0x30
 8007978:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007b28 <_vfiprintf_r+0x21c>
 800797c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007980:	f04f 0901 	mov.w	r9, #1
 8007984:	4623      	mov	r3, r4
 8007986:	469a      	mov	sl, r3
 8007988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800798c:	b10a      	cbz	r2, 8007992 <_vfiprintf_r+0x86>
 800798e:	2a25      	cmp	r2, #37	@ 0x25
 8007990:	d1f9      	bne.n	8007986 <_vfiprintf_r+0x7a>
 8007992:	ebba 0b04 	subs.w	fp, sl, r4
 8007996:	d00b      	beq.n	80079b0 <_vfiprintf_r+0xa4>
 8007998:	465b      	mov	r3, fp
 800799a:	4622      	mov	r2, r4
 800799c:	4629      	mov	r1, r5
 800799e:	4630      	mov	r0, r6
 80079a0:	f7ff ffa1 	bl	80078e6 <__sfputs_r>
 80079a4:	3001      	adds	r0, #1
 80079a6:	f000 80a7 	beq.w	8007af8 <_vfiprintf_r+0x1ec>
 80079aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ac:	445a      	add	r2, fp
 80079ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80079b0:	f89a 3000 	ldrb.w	r3, [sl]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 809f 	beq.w	8007af8 <_vfiprintf_r+0x1ec>
 80079ba:	2300      	movs	r3, #0
 80079bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079c4:	f10a 0a01 	add.w	sl, sl, #1
 80079c8:	9304      	str	r3, [sp, #16]
 80079ca:	9307      	str	r3, [sp, #28]
 80079cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80079d2:	4654      	mov	r4, sl
 80079d4:	2205      	movs	r2, #5
 80079d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079da:	4853      	ldr	r0, [pc, #332]	@ (8007b28 <_vfiprintf_r+0x21c>)
 80079dc:	f7f8 fbf8 	bl	80001d0 <memchr>
 80079e0:	9a04      	ldr	r2, [sp, #16]
 80079e2:	b9d8      	cbnz	r0, 8007a1c <_vfiprintf_r+0x110>
 80079e4:	06d1      	lsls	r1, r2, #27
 80079e6:	bf44      	itt	mi
 80079e8:	2320      	movmi	r3, #32
 80079ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079ee:	0713      	lsls	r3, r2, #28
 80079f0:	bf44      	itt	mi
 80079f2:	232b      	movmi	r3, #43	@ 0x2b
 80079f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079f8:	f89a 3000 	ldrb.w	r3, [sl]
 80079fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80079fe:	d015      	beq.n	8007a2c <_vfiprintf_r+0x120>
 8007a00:	9a07      	ldr	r2, [sp, #28]
 8007a02:	4654      	mov	r4, sl
 8007a04:	2000      	movs	r0, #0
 8007a06:	f04f 0c0a 	mov.w	ip, #10
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a10:	3b30      	subs	r3, #48	@ 0x30
 8007a12:	2b09      	cmp	r3, #9
 8007a14:	d94b      	bls.n	8007aae <_vfiprintf_r+0x1a2>
 8007a16:	b1b0      	cbz	r0, 8007a46 <_vfiprintf_r+0x13a>
 8007a18:	9207      	str	r2, [sp, #28]
 8007a1a:	e014      	b.n	8007a46 <_vfiprintf_r+0x13a>
 8007a1c:	eba0 0308 	sub.w	r3, r0, r8
 8007a20:	fa09 f303 	lsl.w	r3, r9, r3
 8007a24:	4313      	orrs	r3, r2
 8007a26:	9304      	str	r3, [sp, #16]
 8007a28:	46a2      	mov	sl, r4
 8007a2a:	e7d2      	b.n	80079d2 <_vfiprintf_r+0xc6>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	1d19      	adds	r1, r3, #4
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	9103      	str	r1, [sp, #12]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	bfbb      	ittet	lt
 8007a38:	425b      	neglt	r3, r3
 8007a3a:	f042 0202 	orrlt.w	r2, r2, #2
 8007a3e:	9307      	strge	r3, [sp, #28]
 8007a40:	9307      	strlt	r3, [sp, #28]
 8007a42:	bfb8      	it	lt
 8007a44:	9204      	strlt	r2, [sp, #16]
 8007a46:	7823      	ldrb	r3, [r4, #0]
 8007a48:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a4a:	d10a      	bne.n	8007a62 <_vfiprintf_r+0x156>
 8007a4c:	7863      	ldrb	r3, [r4, #1]
 8007a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a50:	d132      	bne.n	8007ab8 <_vfiprintf_r+0x1ac>
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	1d1a      	adds	r2, r3, #4
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	9203      	str	r2, [sp, #12]
 8007a5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a5e:	3402      	adds	r4, #2
 8007a60:	9305      	str	r3, [sp, #20]
 8007a62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007b38 <_vfiprintf_r+0x22c>
 8007a66:	7821      	ldrb	r1, [r4, #0]
 8007a68:	2203      	movs	r2, #3
 8007a6a:	4650      	mov	r0, sl
 8007a6c:	f7f8 fbb0 	bl	80001d0 <memchr>
 8007a70:	b138      	cbz	r0, 8007a82 <_vfiprintf_r+0x176>
 8007a72:	9b04      	ldr	r3, [sp, #16]
 8007a74:	eba0 000a 	sub.w	r0, r0, sl
 8007a78:	2240      	movs	r2, #64	@ 0x40
 8007a7a:	4082      	lsls	r2, r0
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	3401      	adds	r4, #1
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a86:	4829      	ldr	r0, [pc, #164]	@ (8007b2c <_vfiprintf_r+0x220>)
 8007a88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a8c:	2206      	movs	r2, #6
 8007a8e:	f7f8 fb9f 	bl	80001d0 <memchr>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d03f      	beq.n	8007b16 <_vfiprintf_r+0x20a>
 8007a96:	4b26      	ldr	r3, [pc, #152]	@ (8007b30 <_vfiprintf_r+0x224>)
 8007a98:	bb1b      	cbnz	r3, 8007ae2 <_vfiprintf_r+0x1d6>
 8007a9a:	9b03      	ldr	r3, [sp, #12]
 8007a9c:	3307      	adds	r3, #7
 8007a9e:	f023 0307 	bic.w	r3, r3, #7
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	9303      	str	r3, [sp, #12]
 8007aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa8:	443b      	add	r3, r7
 8007aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007aac:	e76a      	b.n	8007984 <_vfiprintf_r+0x78>
 8007aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	e7a8      	b.n	8007a0a <_vfiprintf_r+0xfe>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	3401      	adds	r4, #1
 8007abc:	9305      	str	r3, [sp, #20]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	f04f 0c0a 	mov.w	ip, #10
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aca:	3a30      	subs	r2, #48	@ 0x30
 8007acc:	2a09      	cmp	r2, #9
 8007ace:	d903      	bls.n	8007ad8 <_vfiprintf_r+0x1cc>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0c6      	beq.n	8007a62 <_vfiprintf_r+0x156>
 8007ad4:	9105      	str	r1, [sp, #20]
 8007ad6:	e7c4      	b.n	8007a62 <_vfiprintf_r+0x156>
 8007ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007adc:	4604      	mov	r4, r0
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e7f0      	b.n	8007ac4 <_vfiprintf_r+0x1b8>
 8007ae2:	ab03      	add	r3, sp, #12
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	462a      	mov	r2, r5
 8007ae8:	4b12      	ldr	r3, [pc, #72]	@ (8007b34 <_vfiprintf_r+0x228>)
 8007aea:	a904      	add	r1, sp, #16
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7fd fb2d 	bl	800514c <_printf_float>
 8007af2:	4607      	mov	r7, r0
 8007af4:	1c78      	adds	r0, r7, #1
 8007af6:	d1d6      	bne.n	8007aa6 <_vfiprintf_r+0x19a>
 8007af8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007afa:	07d9      	lsls	r1, r3, #31
 8007afc:	d405      	bmi.n	8007b0a <_vfiprintf_r+0x1fe>
 8007afe:	89ab      	ldrh	r3, [r5, #12]
 8007b00:	059a      	lsls	r2, r3, #22
 8007b02:	d402      	bmi.n	8007b0a <_vfiprintf_r+0x1fe>
 8007b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b06:	f7fe f925 	bl	8005d54 <__retarget_lock_release_recursive>
 8007b0a:	89ab      	ldrh	r3, [r5, #12]
 8007b0c:	065b      	lsls	r3, r3, #25
 8007b0e:	f53f af1f 	bmi.w	8007950 <_vfiprintf_r+0x44>
 8007b12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b14:	e71e      	b.n	8007954 <_vfiprintf_r+0x48>
 8007b16:	ab03      	add	r3, sp, #12
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	462a      	mov	r2, r5
 8007b1c:	4b05      	ldr	r3, [pc, #20]	@ (8007b34 <_vfiprintf_r+0x228>)
 8007b1e:	a904      	add	r1, sp, #16
 8007b20:	4630      	mov	r0, r6
 8007b22:	f7fd fdab 	bl	800567c <_printf_i>
 8007b26:	e7e4      	b.n	8007af2 <_vfiprintf_r+0x1e6>
 8007b28:	08008108 	.word	0x08008108
 8007b2c:	08008112 	.word	0x08008112
 8007b30:	0800514d 	.word	0x0800514d
 8007b34:	080078e7 	.word	0x080078e7
 8007b38:	0800810e 	.word	0x0800810e

08007b3c <__swbuf_r>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	460e      	mov	r6, r1
 8007b40:	4614      	mov	r4, r2
 8007b42:	4605      	mov	r5, r0
 8007b44:	b118      	cbz	r0, 8007b4e <__swbuf_r+0x12>
 8007b46:	6a03      	ldr	r3, [r0, #32]
 8007b48:	b90b      	cbnz	r3, 8007b4e <__swbuf_r+0x12>
 8007b4a:	f7fd ff41 	bl	80059d0 <__sinit>
 8007b4e:	69a3      	ldr	r3, [r4, #24]
 8007b50:	60a3      	str	r3, [r4, #8]
 8007b52:	89a3      	ldrh	r3, [r4, #12]
 8007b54:	071a      	lsls	r2, r3, #28
 8007b56:	d501      	bpl.n	8007b5c <__swbuf_r+0x20>
 8007b58:	6923      	ldr	r3, [r4, #16]
 8007b5a:	b943      	cbnz	r3, 8007b6e <__swbuf_r+0x32>
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4628      	mov	r0, r5
 8007b60:	f000 f82a 	bl	8007bb8 <__swsetup_r>
 8007b64:	b118      	cbz	r0, 8007b6e <__swbuf_r+0x32>
 8007b66:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	6922      	ldr	r2, [r4, #16]
 8007b72:	1a98      	subs	r0, r3, r2
 8007b74:	6963      	ldr	r3, [r4, #20]
 8007b76:	b2f6      	uxtb	r6, r6
 8007b78:	4283      	cmp	r3, r0
 8007b7a:	4637      	mov	r7, r6
 8007b7c:	dc05      	bgt.n	8007b8a <__swbuf_r+0x4e>
 8007b7e:	4621      	mov	r1, r4
 8007b80:	4628      	mov	r0, r5
 8007b82:	f7ff fdbf 	bl	8007704 <_fflush_r>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d1ed      	bne.n	8007b66 <__swbuf_r+0x2a>
 8007b8a:	68a3      	ldr	r3, [r4, #8]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	60a3      	str	r3, [r4, #8]
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	6022      	str	r2, [r4, #0]
 8007b96:	701e      	strb	r6, [r3, #0]
 8007b98:	6962      	ldr	r2, [r4, #20]
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d004      	beq.n	8007baa <__swbuf_r+0x6e>
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	07db      	lsls	r3, r3, #31
 8007ba4:	d5e1      	bpl.n	8007b6a <__swbuf_r+0x2e>
 8007ba6:	2e0a      	cmp	r6, #10
 8007ba8:	d1df      	bne.n	8007b6a <__swbuf_r+0x2e>
 8007baa:	4621      	mov	r1, r4
 8007bac:	4628      	mov	r0, r5
 8007bae:	f7ff fda9 	bl	8007704 <_fflush_r>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d0d9      	beq.n	8007b6a <__swbuf_r+0x2e>
 8007bb6:	e7d6      	b.n	8007b66 <__swbuf_r+0x2a>

08007bb8 <__swsetup_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4b29      	ldr	r3, [pc, #164]	@ (8007c60 <__swsetup_r+0xa8>)
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	b118      	cbz	r0, 8007bcc <__swsetup_r+0x14>
 8007bc4:	6a03      	ldr	r3, [r0, #32]
 8007bc6:	b90b      	cbnz	r3, 8007bcc <__swsetup_r+0x14>
 8007bc8:	f7fd ff02 	bl	80059d0 <__sinit>
 8007bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bd0:	0719      	lsls	r1, r3, #28
 8007bd2:	d422      	bmi.n	8007c1a <__swsetup_r+0x62>
 8007bd4:	06da      	lsls	r2, r3, #27
 8007bd6:	d407      	bmi.n	8007be8 <__swsetup_r+0x30>
 8007bd8:	2209      	movs	r2, #9
 8007bda:	602a      	str	r2, [r5, #0]
 8007bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007be0:	81a3      	strh	r3, [r4, #12]
 8007be2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007be6:	e033      	b.n	8007c50 <__swsetup_r+0x98>
 8007be8:	0758      	lsls	r0, r3, #29
 8007bea:	d512      	bpl.n	8007c12 <__swsetup_r+0x5a>
 8007bec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bee:	b141      	cbz	r1, 8007c02 <__swsetup_r+0x4a>
 8007bf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bf4:	4299      	cmp	r1, r3
 8007bf6:	d002      	beq.n	8007bfe <__swsetup_r+0x46>
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f7fe ff2d 	bl	8006a58 <_free_r>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007c08:	81a3      	strh	r3, [r4, #12]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	6063      	str	r3, [r4, #4]
 8007c0e:	6923      	ldr	r3, [r4, #16]
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	f043 0308 	orr.w	r3, r3, #8
 8007c18:	81a3      	strh	r3, [r4, #12]
 8007c1a:	6923      	ldr	r3, [r4, #16]
 8007c1c:	b94b      	cbnz	r3, 8007c32 <__swsetup_r+0x7a>
 8007c1e:	89a3      	ldrh	r3, [r4, #12]
 8007c20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c28:	d003      	beq.n	8007c32 <__swsetup_r+0x7a>
 8007c2a:	4621      	mov	r1, r4
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	f000 f88b 	bl	8007d48 <__smakebuf_r>
 8007c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c36:	f013 0201 	ands.w	r2, r3, #1
 8007c3a:	d00a      	beq.n	8007c52 <__swsetup_r+0x9a>
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	60a2      	str	r2, [r4, #8]
 8007c40:	6962      	ldr	r2, [r4, #20]
 8007c42:	4252      	negs	r2, r2
 8007c44:	61a2      	str	r2, [r4, #24]
 8007c46:	6922      	ldr	r2, [r4, #16]
 8007c48:	b942      	cbnz	r2, 8007c5c <__swsetup_r+0xa4>
 8007c4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c4e:	d1c5      	bne.n	8007bdc <__swsetup_r+0x24>
 8007c50:	bd38      	pop	{r3, r4, r5, pc}
 8007c52:	0799      	lsls	r1, r3, #30
 8007c54:	bf58      	it	pl
 8007c56:	6962      	ldrpl	r2, [r4, #20]
 8007c58:	60a2      	str	r2, [r4, #8]
 8007c5a:	e7f4      	b.n	8007c46 <__swsetup_r+0x8e>
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	e7f7      	b.n	8007c50 <__swsetup_r+0x98>
 8007c60:	20000018 	.word	0x20000018

08007c64 <_raise_r>:
 8007c64:	291f      	cmp	r1, #31
 8007c66:	b538      	push	{r3, r4, r5, lr}
 8007c68:	4605      	mov	r5, r0
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	d904      	bls.n	8007c78 <_raise_r+0x14>
 8007c6e:	2316      	movs	r3, #22
 8007c70:	6003      	str	r3, [r0, #0]
 8007c72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c7a:	b112      	cbz	r2, 8007c82 <_raise_r+0x1e>
 8007c7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c80:	b94b      	cbnz	r3, 8007c96 <_raise_r+0x32>
 8007c82:	4628      	mov	r0, r5
 8007c84:	f000 f830 	bl	8007ce8 <_getpid_r>
 8007c88:	4622      	mov	r2, r4
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c92:	f000 b817 	b.w	8007cc4 <_kill_r>
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d00a      	beq.n	8007cb0 <_raise_r+0x4c>
 8007c9a:	1c59      	adds	r1, r3, #1
 8007c9c:	d103      	bne.n	8007ca6 <_raise_r+0x42>
 8007c9e:	2316      	movs	r3, #22
 8007ca0:	6003      	str	r3, [r0, #0]
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	e7e7      	b.n	8007c76 <_raise_r+0x12>
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007cac:	4620      	mov	r0, r4
 8007cae:	4798      	blx	r3
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	e7e0      	b.n	8007c76 <_raise_r+0x12>

08007cb4 <raise>:
 8007cb4:	4b02      	ldr	r3, [pc, #8]	@ (8007cc0 <raise+0xc>)
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	f7ff bfd3 	b.w	8007c64 <_raise_r>
 8007cbe:	bf00      	nop
 8007cc0:	20000018 	.word	0x20000018

08007cc4 <_kill_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4d07      	ldr	r5, [pc, #28]	@ (8007ce4 <_kill_r+0x20>)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	4611      	mov	r1, r2
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	f7f9 ffe5 	bl	8001ca0 <_kill>
 8007cd6:	1c43      	adds	r3, r0, #1
 8007cd8:	d102      	bne.n	8007ce0 <_kill_r+0x1c>
 8007cda:	682b      	ldr	r3, [r5, #0]
 8007cdc:	b103      	cbz	r3, 8007ce0 <_kill_r+0x1c>
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	bd38      	pop	{r3, r4, r5, pc}
 8007ce2:	bf00      	nop
 8007ce4:	200004ec 	.word	0x200004ec

08007ce8 <_getpid_r>:
 8007ce8:	f7f9 bfd2 	b.w	8001c90 <_getpid>

08007cec <_malloc_usable_size_r>:
 8007cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cf0:	1f18      	subs	r0, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	bfbc      	itt	lt
 8007cf6:	580b      	ldrlt	r3, [r1, r0]
 8007cf8:	18c0      	addlt	r0, r0, r3
 8007cfa:	4770      	bx	lr

08007cfc <__swhatbuf_r>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	460c      	mov	r4, r1
 8007d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d04:	2900      	cmp	r1, #0
 8007d06:	b096      	sub	sp, #88	@ 0x58
 8007d08:	4615      	mov	r5, r2
 8007d0a:	461e      	mov	r6, r3
 8007d0c:	da0d      	bge.n	8007d2a <__swhatbuf_r+0x2e>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d14:	f04f 0100 	mov.w	r1, #0
 8007d18:	bf14      	ite	ne
 8007d1a:	2340      	movne	r3, #64	@ 0x40
 8007d1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d20:	2000      	movs	r0, #0
 8007d22:	6031      	str	r1, [r6, #0]
 8007d24:	602b      	str	r3, [r5, #0]
 8007d26:	b016      	add	sp, #88	@ 0x58
 8007d28:	bd70      	pop	{r4, r5, r6, pc}
 8007d2a:	466a      	mov	r2, sp
 8007d2c:	f000 f848 	bl	8007dc0 <_fstat_r>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	dbec      	blt.n	8007d0e <__swhatbuf_r+0x12>
 8007d34:	9901      	ldr	r1, [sp, #4]
 8007d36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d3e:	4259      	negs	r1, r3
 8007d40:	4159      	adcs	r1, r3
 8007d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d46:	e7eb      	b.n	8007d20 <__swhatbuf_r+0x24>

08007d48 <__smakebuf_r>:
 8007d48:	898b      	ldrh	r3, [r1, #12]
 8007d4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d4c:	079d      	lsls	r5, r3, #30
 8007d4e:	4606      	mov	r6, r0
 8007d50:	460c      	mov	r4, r1
 8007d52:	d507      	bpl.n	8007d64 <__smakebuf_r+0x1c>
 8007d54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	6123      	str	r3, [r4, #16]
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	6163      	str	r3, [r4, #20]
 8007d60:	b003      	add	sp, #12
 8007d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d64:	ab01      	add	r3, sp, #4
 8007d66:	466a      	mov	r2, sp
 8007d68:	f7ff ffc8 	bl	8007cfc <__swhatbuf_r>
 8007d6c:	9f00      	ldr	r7, [sp, #0]
 8007d6e:	4605      	mov	r5, r0
 8007d70:	4639      	mov	r1, r7
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7fe fee4 	bl	8006b40 <_malloc_r>
 8007d78:	b948      	cbnz	r0, 8007d8e <__smakebuf_r+0x46>
 8007d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d7e:	059a      	lsls	r2, r3, #22
 8007d80:	d4ee      	bmi.n	8007d60 <__smakebuf_r+0x18>
 8007d82:	f023 0303 	bic.w	r3, r3, #3
 8007d86:	f043 0302 	orr.w	r3, r3, #2
 8007d8a:	81a3      	strh	r3, [r4, #12]
 8007d8c:	e7e2      	b.n	8007d54 <__smakebuf_r+0xc>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	6020      	str	r0, [r4, #0]
 8007d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d96:	81a3      	strh	r3, [r4, #12]
 8007d98:	9b01      	ldr	r3, [sp, #4]
 8007d9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d9e:	b15b      	cbz	r3, 8007db8 <__smakebuf_r+0x70>
 8007da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007da4:	4630      	mov	r0, r6
 8007da6:	f000 f81d 	bl	8007de4 <_isatty_r>
 8007daa:	b128      	cbz	r0, 8007db8 <__smakebuf_r+0x70>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f023 0303 	bic.w	r3, r3, #3
 8007db2:	f043 0301 	orr.w	r3, r3, #1
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	431d      	orrs	r5, r3
 8007dbc:	81a5      	strh	r5, [r4, #12]
 8007dbe:	e7cf      	b.n	8007d60 <__smakebuf_r+0x18>

08007dc0 <_fstat_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	@ (8007de0 <_fstat_r+0x20>)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4608      	mov	r0, r1
 8007dca:	4611      	mov	r1, r2
 8007dcc:	602b      	str	r3, [r5, #0]
 8007dce:	f7f9 ffc7 	bl	8001d60 <_fstat>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d102      	bne.n	8007ddc <_fstat_r+0x1c>
 8007dd6:	682b      	ldr	r3, [r5, #0]
 8007dd8:	b103      	cbz	r3, 8007ddc <_fstat_r+0x1c>
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	bd38      	pop	{r3, r4, r5, pc}
 8007dde:	bf00      	nop
 8007de0:	200004ec 	.word	0x200004ec

08007de4 <_isatty_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d06      	ldr	r5, [pc, #24]	@ (8007e00 <_isatty_r+0x1c>)
 8007de8:	2300      	movs	r3, #0
 8007dea:	4604      	mov	r4, r0
 8007dec:	4608      	mov	r0, r1
 8007dee:	602b      	str	r3, [r5, #0]
 8007df0:	f7f9 ffc6 	bl	8001d80 <_isatty>
 8007df4:	1c43      	adds	r3, r0, #1
 8007df6:	d102      	bne.n	8007dfe <_isatty_r+0x1a>
 8007df8:	682b      	ldr	r3, [r5, #0]
 8007dfa:	b103      	cbz	r3, 8007dfe <_isatty_r+0x1a>
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	bd38      	pop	{r3, r4, r5, pc}
 8007e00:	200004ec 	.word	0x200004ec

08007e04 <_init>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	bf00      	nop
 8007e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e0a:	bc08      	pop	{r3}
 8007e0c:	469e      	mov	lr, r3
 8007e0e:	4770      	bx	lr

08007e10 <_fini>:
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	bf00      	nop
 8007e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e16:	bc08      	pop	{r3}
 8007e18:	469e      	mov	lr, r3
 8007e1a:	4770      	bx	lr
