
FINAL_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08005b40  08005b40  00006b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d4c  08005d4c  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d4c  08005d4c  00006d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d54  08005d54  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d54  08005d54  00006d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d58  08005d58  00006d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005d5c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000328  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000390  20000390  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d59d  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021b9  00000000  00000000  00014635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  000167f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091b  00000000  00000000  000173a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fe4  00000000  00000000  00017cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef11  00000000  00000000  0003aca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b80  00000000  00000000  00049bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d738  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c2c  00000000  00000000  0011d77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  001213a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b28 	.word	0x08005b28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005b28 	.word	0x08005b28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <UART1_Read>:
#include "GPS.h"
#include <string.h>

extern UART_HandleTypeDef huart1;

char UART1_Read(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    uint8_t c;
    HAL_UART_Receive(&huart1, &c, 1, HAL_MAX_DELAY);
 80005b2:	1df9      	adds	r1, r7, #7
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b8:	2201      	movs	r2, #1
 80005ba:	4804      	ldr	r0, [pc, #16]	@ (80005cc <UART1_Read+0x20>)
 80005bc:	f003 fcc7 	bl	8003f4e <HAL_UART_Receive>
    return (char)c;
 80005c0:	79fb      	ldrb	r3, [r7, #7]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000184 	.word	0x20000184

080005d0 <GPS_Read_Location>:

uint8_t GPS_Read_Location(char *latitude, char *longitude) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b0a0      	sub	sp, #128	@ 0x80
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
    char line[100];
    int i = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    char c;

        c = UART1_Read();
 80005de:	f7ff ffe5 	bl	80005ac <UART1_Read>
 80005e2:	4603      	mov	r3, r0
 80005e4:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

        if (c == '$') {
 80005e8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80005ec:	2b24      	cmp	r3, #36	@ 0x24
 80005ee:	d157      	bne.n	80006a0 <GPS_Read_Location+0xd0>
            line[i++] = c;
 80005f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80005f6:	3380      	adds	r3, #128	@ 0x80
 80005f8:	443b      	add	r3, r7
 80005fa:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 80005fe:	f803 2c74 	strb.w	r2, [r3, #-116]

            while (i < 99) {
 8000602:	e011      	b.n	8000628 <GPS_Read_Location+0x58>
                c = UART1_Read();
 8000604:	f7ff ffd2 	bl	80005ac <UART1_Read>
 8000608:	4603      	mov	r3, r0
 800060a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
                line[i++] = c;
 800060e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000614:	3380      	adds	r3, #128	@ 0x80
 8000616:	443b      	add	r3, r7
 8000618:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 800061c:	f803 2c74 	strb.w	r2, [r3, #-116]
                if (c == '\n') break;
 8000620:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000624:	2b0a      	cmp	r3, #10
 8000626:	d003      	beq.n	8000630 <GPS_Read_Location+0x60>
            while (i < 99) {
 8000628:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800062a:	2b62      	cmp	r3, #98	@ 0x62
 800062c:	ddea      	ble.n	8000604 <GPS_Read_Location+0x34>
 800062e:	e000      	b.n	8000632 <GPS_Read_Location+0x62>
                if (c == '\n') break;
 8000630:	bf00      	nop
            }
            line[i] = '\0';
 8000632:	f107 020c 	add.w	r2, r7, #12
 8000636:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000638:	4413      	add	r3, r2
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]

            if (strstr(line, "$GPRMC") != NULL) {
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	491a      	ldr	r1, [pc, #104]	@ (80006ac <GPS_Read_Location+0xdc>)
 8000644:	4618      	mov	r0, r3
 8000646:	f004 fa0b 	bl	8004a60 <strstr>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d025      	beq.n	800069c <GPS_Read_Location+0xcc>
                char *token;
                int field = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	677b      	str	r3, [r7, #116]	@ 0x74
                token = strtok(line, ",");
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	4915      	ldr	r1, [pc, #84]	@ (80006b0 <GPS_Read_Location+0xe0>)
 800065a:	4618      	mov	r0, r3
 800065c:	f004 f9a4 	bl	80049a8 <strtok>
 8000660:	67b8      	str	r0, [r7, #120]	@ 0x78

                while (token != NULL) {
 8000662:	e018      	b.n	8000696 <GPS_Read_Location+0xc6>
                    field++;
 8000664:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000666:	3301      	adds	r3, #1
 8000668:	677b      	str	r3, [r7, #116]	@ 0x74
                    if (field == 4) {
 800066a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800066c:	2b04      	cmp	r3, #4
 800066e:	d104      	bne.n	800067a <GPS_Read_Location+0xaa>
                        strcpy(latitude, token);
 8000670:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f004 fa7d 	bl	8004b72 <strcpy>
 8000678:	e008      	b.n	800068c <GPS_Read_Location+0xbc>
                    } else if (field == 6) {
 800067a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800067c:	2b06      	cmp	r3, #6
 800067e:	d105      	bne.n	800068c <GPS_Read_Location+0xbc>
                        strcpy(longitude, token);
 8000680:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8000682:	6838      	ldr	r0, [r7, #0]
 8000684:	f004 fa75 	bl	8004b72 <strcpy>
                        return 1;
 8000688:	2301      	movs	r3, #1
 800068a:	e00a      	b.n	80006a2 <GPS_Read_Location+0xd2>
                    }
                    token = strtok(NULL, ",");
 800068c:	4908      	ldr	r1, [pc, #32]	@ (80006b0 <GPS_Read_Location+0xe0>)
 800068e:	2000      	movs	r0, #0
 8000690:	f004 f98a 	bl	80049a8 <strtok>
 8000694:	67b8      	str	r0, [r7, #120]	@ 0x78
                while (token != NULL) {
 8000696:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1e3      	bne.n	8000664 <GPS_Read_Location+0x94>
                }
            }
            i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        }


    return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3780      	adds	r7, #128	@ 0x80
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	08005b40 	.word	0x08005b40
 80006b0:	08005b48 	.word	0x08005b48

080006b4 <LcdInit>:
#include "lcd.h"

extern I2C_HandleTypeDef hi2c1;
static I2C_HandleTypeDef *lcd_i2c;

void LcdInit(I2C_HandleTypeDef *hi2c){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	lcd_i2c = hi2c;
 80006bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000730 <LcdInit+0x7c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]
	HAL_Delay(20);
 80006c2:	2014      	movs	r0, #20
 80006c4:	f000 ffc0 	bl	8001648 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 80006c8:	2103      	movs	r1, #3
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 f832 	bl	8000734 <LcdWriteNibble>
	HAL_Delay(5);
 80006d0:	2005      	movs	r0, #5
 80006d2:	f000 ffb9 	bl	8001648 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 80006d6:	2103      	movs	r1, #3
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f82b 	bl	8000734 <LcdWriteNibble>
	HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 ffb2 	bl	8001648 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 80006e4:	2103      	movs	r1, #3
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 f824 	bl	8000734 <LcdWriteNibble>
	HAL_Delay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 ffab 	bl	8001648 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x02);
 80006f2:	2102      	movs	r1, #2
 80006f4:	2000      	movs	r0, #0
 80006f6:	f000 f81d 	bl	8000734 <LcdWriteNibble>
	HAL_Delay(1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 ffa4 	bl	8001648 <HAL_Delay>

	LcdWriteByte(LCD_CMD, LCD_FNSET_2LINE);
 8000700:	2128      	movs	r1, #40	@ 0x28
 8000702:	2000      	movs	r0, #0
 8000704:	f000 f85e 	bl	80007c4 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_OFF);
 8000708:	2108      	movs	r1, #8
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f85a 	bl	80007c4 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_CLEAR);
 8000710:	2101      	movs	r1, #1
 8000712:	2000      	movs	r0, #0
 8000714:	f000 f856 	bl	80007c4 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_ENTRYMODE);
 8000718:	2106      	movs	r1, #6
 800071a:	2000      	movs	r0, #0
 800071c:	f000 f852 	bl	80007c4 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_ON);
 8000720:	210c      	movs	r1, #12
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f84e 	bl	80007c4 <LcdWriteByte>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000084 	.word	0x20000084

08000734 <LcdWriteNibble>:

void LcdWriteNibble(uint8_t cmd, uint8_t data){
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af02      	add	r7, sp, #8
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
	uint8_t rsFlag = (cmd == LCD_DATA) ? BV(LCD_RS_Pos) : 0;
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b01      	cmp	r3, #1
 8000748:	bf0c      	ite	eq
 800074a:	2301      	moveq	r3, #1
 800074c:	2300      	movne	r3, #0
 800074e:	b2db      	uxtb	r3, r3
 8000750:	73fb      	strb	r3, [r7, #15]
	uint8_t val;

	val = (data << 4) | rsFlag | BV(LCD_BL_Pos) | BV(LCD_EN_Pos);
 8000752:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000756:	011b      	lsls	r3, r3, #4
 8000758:	b25a      	sxtb	r2, r3
 800075a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075e:	4313      	orrs	r3, r2
 8000760:	b25b      	sxtb	r3, r3
 8000762:	f043 030c 	orr.w	r3, r3, #12
 8000766:	b25b      	sxtb	r3, r3
 8000768:	b2db      	uxtb	r3, r3
 800076a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(lcd_i2c, LCD_SLAVE_ADDR_W, &val, 1, HAL_MAX_DELAY);
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <LcdWriteNibble+0x8c>)
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	f107 020e 	add.w	r2, r7, #14
 8000774:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2301      	movs	r3, #1
 800077c:	214e      	movs	r1, #78	@ 0x4e
 800077e:	f002 fb19 	bl	8002db4 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f000 ff60 	bl	8001648 <HAL_Delay>
	val = (data << 4) | rsFlag | BV(LCD_BL_Pos);
 8000788:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	b25a      	sxtb	r2, r3
 8000790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000794:	4313      	orrs	r3, r2
 8000796:	b25b      	sxtb	r3, r3
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	b25b      	sxtb	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(lcd_i2c, LCD_SLAVE_ADDR_W, &val, 1, HAL_MAX_DELAY);
 80007a2:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <LcdWriteNibble+0x8c>)
 80007a4:	6818      	ldr	r0, [r3, #0]
 80007a6:	f107 020e 	add.w	r2, r7, #14
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2301      	movs	r3, #1
 80007b2:	214e      	movs	r1, #78	@ 0x4e
 80007b4:	f002 fafe 	bl	8002db4 <HAL_I2C_Master_Transmit>

}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000084 	.word	0x20000084

080007c4 <LcdWriteByte>:

void LcdWriteByte(uint8_t cmd, uint8_t data){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
	uint8_t high = data >> 4;
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	091b      	lsrs	r3, r3, #4
 80007d8:	73fb      	strb	r3, [r7, #15]
	uint8_t low = data & 0x0F;
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	f003 030f 	and.w	r3, r3, #15
 80007e0:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(cmd, high);
 80007e2:	7bfa      	ldrb	r2, [r7, #15]
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ffa3 	bl	8000734 <LcdWriteNibble>
	LcdWriteNibble(cmd, low);
 80007ee:	7bba      	ldrb	r2, [r7, #14]
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff9d 	bl	8000734 <LcdWriteNibble>
	HAL_Delay(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f000 ff24 	bl	8001648 <HAL_Delay>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <LcdPuts>:

void LcdPuts(uint8_t line, char *str){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
	LcdWriteByte(LCD_CMD, line);
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4619      	mov	r1, r3
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff ffd3 	bl	80007c4 <LcdWriteByte>
	for(int i=0 ; str[i] != '\0'; i++){
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	e00a      	b.n	800083a <LcdPuts+0x32>
		LcdWriteByte(LCD_DATA, str[i]);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	4413      	add	r3, r2
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ffc8 	bl	80007c4 <LcdWriteByte>
	for(int i=0 ; str[i] != '\0'; i++){
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1ee      	bne.n	8000824 <LcdPuts+0x1c>
	}
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b0be      	sub	sp, #248	@ 0xf8
 8000854:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 fe85 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f991 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f000 fb25 	bl	8000eac <MX_GPIO_Init>
  MX_DMA_Init();
 8000862:	f000 fb03 	bl	8000e6c <MX_DMA_Init>
  MX_I2C1_Init();
 8000866:	f000 fa7f 	bl	8000d68 <MX_I2C1_Init>
  MX_ADC1_Init();
 800086a:	f000 f9f3 	bl	8000c54 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800086e:	f000 faa9 	bl	8000dc4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000872:	f000 fad1 	bl	8000e18 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LcdInit(&hi2c1);
 8000876:	48a7      	ldr	r0, [pc, #668]	@ (8000b14 <main+0x2c4>)
 8000878:	f7ff ff1c 	bl	80006b4 <LcdInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, 5);
 800087c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000880:	2205      	movs	r2, #5
 8000882:	4619      	mov	r1, r3
 8000884:	48a4      	ldr	r0, [pc, #656]	@ (8000b18 <main+0x2c8>)
 8000886:	f000 ff47 	bl	8001718 <HAL_ADC_Start_DMA>
	  GPS_Read_Location(latitude, longitude);
 800088a:	49a4      	ldr	r1, [pc, #656]	@ (8000b1c <main+0x2cc>)
 800088c:	48a4      	ldr	r0, [pc, #656]	@ (8000b20 <main+0x2d0>)
 800088e:	f7ff fe9f 	bl	80005d0 <GPS_Read_Location>

	  char str[20];
	  	  uint16_t value = adc_values[0];
 8000892:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 8000896:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
	  	  sprintf(str, "MQ3 = %d",value);
 800089a:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	@ 0xee
 800089e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80008a2:	49a0      	ldr	r1, [pc, #640]	@ (8000b24 <main+0x2d4>)
 80008a4:	4618      	mov	r0, r3
 80008a6:	f004 f811 	bl	80048cc <siprintf>
	  	  //LcdPuts(LCD_LINE2,str);
	  	  if(value>=3600){
 80008aa:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 80008ae:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80008b2:	d323      	bcc.n	80008fc <main+0xac>
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008ba:	489b      	ldr	r0, [pc, #620]	@ (8000b28 <main+0x2d8>)
 80008bc:	f002 f91c 	bl	8002af8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2140      	movs	r1, #64	@ 0x40
 80008c4:	4899      	ldr	r0, [pc, #612]	@ (8000b2c <main+0x2dc>)
 80008c6:	f002 f917 	bl	8002af8 <HAL_GPIO_WritePin>
	  		char buffer[100];
	  		snprintf(buffer, sizeof(buffer), "%s,%s\nAlchole Decected!!!!\r\n", latitude, longitude);
 80008ca:	4638      	mov	r0, r7
 80008cc:	4b93      	ldr	r3, [pc, #588]	@ (8000b1c <main+0x2cc>)
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	4b93      	ldr	r3, [pc, #588]	@ (8000b20 <main+0x2d0>)
 80008d2:	4a97      	ldr	r2, [pc, #604]	@ (8000b30 <main+0x2e0>)
 80008d4:	2164      	movs	r1, #100	@ 0x64
 80008d6:	f003 ffc3 	bl	8004860 <sniprintf>
	  		HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80008da:	463b      	mov	r3, r7
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fc77 	bl	80001d0 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	4639      	mov	r1, r7
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ec:	4891      	ldr	r0, [pc, #580]	@ (8000b34 <main+0x2e4>)
 80008ee:	f003 faa3 	bl	8003e38 <HAL_UART_Transmit>
	  		HAL_Delay(2000);
 80008f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008f6:	f000 fea7 	bl	8001648 <HAL_Delay>
 80008fa:	e00a      	b.n	8000912 <main+0xc2>
	  	  }
	  	  else{
	  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000902:	4889      	ldr	r0, [pc, #548]	@ (8000b28 <main+0x2d8>)
 8000904:	f002 f8f8 	bl	8002af8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2140      	movs	r1, #64	@ 0x40
 800090c:	4887      	ldr	r0, [pc, #540]	@ (8000b2c <main+0x2dc>)
 800090e:	f002 f8f3 	bl	8002af8 <HAL_GPIO_WritePin>
	  	  }

	  char str1[20];
	  	  uint16_t data1 = adc_values[1];
 8000912:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 8000916:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
	  	  sprintf(str1, "Rain VAL = %d", data1);
 800091a:	f8b7 20ec 	ldrh.w	r2, [r7, #236]	@ 0xec
 800091e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8000922:	4985      	ldr	r1, [pc, #532]	@ (8000b38 <main+0x2e8>)
 8000924:	4618      	mov	r0, r3
 8000926:	f003 ffd1 	bl	80048cc <siprintf>
	  	  //LcdPuts(LCD_LINE1,str1);
	  	  if(data1>=3800){
 800092a:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 800092e:	f640 62d7 	movw	r2, #3799	@ 0xed7
 8000932:	4293      	cmp	r3, r2
 8000934:	d904      	bls.n	8000940 <main+0xf0>
	  		LcdPuts(LCD_LINE1,"        ");
 8000936:	4981      	ldr	r1, [pc, #516]	@ (8000b3c <main+0x2ec>)
 8000938:	2080      	movs	r0, #128	@ 0x80
 800093a:	f7ff ff65 	bl	8000808 <LcdPuts>
 800093e:	e00b      	b.n	8000958 <main+0x108>
	  	  }
	  	  else{
	  		LcdPuts(LCD_LINE1,"ABS-ON");
 8000940:	497f      	ldr	r1, [pc, #508]	@ (8000b40 <main+0x2f0>)
 8000942:	2080      	movs	r0, #128	@ 0x80
 8000944:	f7ff ff60 	bl	8000808 <LcdPuts>
	  		HAL_Delay(200);
 8000948:	20c8      	movs	r0, #200	@ 0xc8
 800094a:	f000 fe7d 	bl	8001648 <HAL_Delay>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2140      	movs	r1, #64	@ 0x40
 8000952:	4876      	ldr	r0, [pc, #472]	@ (8000b2c <main+0x2dc>)
 8000954:	f002 f8d0 	bl	8002af8 <HAL_GPIO_WritePin>
	  	  }

	  char str2[20];
	  	  uint16_t data2 = adc_values[2];
 8000958:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 800095c:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
	  	  sprintf(str2, "LDR VAL = %-6d", data2);
 8000960:	f8b7 20ea 	ldrh.w	r2, [r7, #234]	@ 0xea
 8000964:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000968:	4976      	ldr	r1, [pc, #472]	@ (8000b44 <main+0x2f4>)
 800096a:	4618      	mov	r0, r3
 800096c:	f003 ffae 	bl	80048cc <siprintf>
	  	  //LcdPuts(LCD_LINE2,str2);
	  	  if(data2 > 2500){
 8000970:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8000974:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000978:	4293      	cmp	r3, r2
 800097a:	d905      	bls.n	8000988 <main+0x138>
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2102      	movs	r1, #2
 8000980:	4871      	ldr	r0, [pc, #452]	@ (8000b48 <main+0x2f8>)
 8000982:	f002 f8b9 	bl	8002af8 <HAL_GPIO_WritePin>
 8000986:	e009      	b.n	800099c <main+0x14c>
	  	  }
	  	  else
	  	  {
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2102      	movs	r1, #2
 800098c:	486e      	ldr	r0, [pc, #440]	@ (8000b48 <main+0x2f8>)
 800098e:	f002 f8b3 	bl	8002af8 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2120      	movs	r1, #32
 8000996:	486c      	ldr	r0, [pc, #432]	@ (8000b48 <main+0x2f8>)
 8000998:	f002 f8ae 	bl	8002af8 <HAL_GPIO_WritePin>
	  	  }


	  char str3[20];
	  	  uint16_t data3 = adc_values[3];
 800099c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80009a0:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
	  	  float voltage = (data3 * 3.3f) / 4095.0f;
 80009a4:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 80009a8:	ee07 3a90 	vmov	s15, r3
 80009ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b0:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8000b4c <main+0x2fc>
 80009b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009b8:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8000b50 <main+0x300>
 80009bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009c0:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
	  	  float temp = voltage / 0.01f;
 80009c4:	ed97 7a39 	vldr	s14, [r7, #228]	@ 0xe4
 80009c8:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8000b54 <main+0x304>
 80009cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d0:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
	  	  int temp_int = (int)(temp * 100);
 80009d4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80009d8:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8000b58 <main+0x308>
 80009dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009e4:	ee17 3a90 	vmov	r3, s15
 80009e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	  	  int whole = temp_int / 100;
 80009ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80009f0:	4a5a      	ldr	r2, [pc, #360]	@ (8000b5c <main+0x30c>)
 80009f2:	fb82 1203 	smull	r1, r2, r2, r3
 80009f6:	1152      	asrs	r2, r2, #5
 80009f8:	17db      	asrs	r3, r3, #31
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	  	  int frac = temp_int % 100;
 8000a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a04:	4a55      	ldr	r2, [pc, #340]	@ (8000b5c <main+0x30c>)
 8000a06:	fb82 1203 	smull	r1, r2, r2, r3
 8000a0a:	1151      	asrs	r1, r2, #5
 8000a0c:	17da      	asrs	r2, r3, #31
 8000a0e:	1a8a      	subs	r2, r1, r2
 8000a10:	2164      	movs	r1, #100	@ 0x64
 8000a12:	fb01 f202 	mul.w	r2, r1, r2
 8000a16:	1a9b      	subs	r3, r3, r2
 8000a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	  	  sprintf(str3, "Temp: %d.%02d C", whole, abs(frac));
 8000a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	bfb8      	it	lt
 8000a24:	425b      	neglt	r3, r3
 8000a26:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8000a2a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000a2e:	494c      	ldr	r1, [pc, #304]	@ (8000b60 <main+0x310>)
 8000a30:	f003 ff4c 	bl	80048cc <siprintf>
	  	  //LcdPuts(LCD_LINE2,str3);
	  	  if(whole > 36){
 8000a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000a38:	2b24      	cmp	r3, #36	@ 0x24
 8000a3a:	dd21      	ble.n	8000a80 <main+0x230>
	  		LcdPuts(LCD_LINE2,"OVER HEAT");
 8000a3c:	4949      	ldr	r1, [pc, #292]	@ (8000b64 <main+0x314>)
 8000a3e:	20c0      	movs	r0, #192	@ 0xc0
 8000a40:	f7ff fee2 	bl	8000808 <LcdPuts>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2140      	movs	r1, #64	@ 0x40
 8000a48:	4838      	ldr	r0, [pc, #224]	@ (8000b2c <main+0x2dc>)
 8000a4a:	f002 f855 	bl	8002af8 <HAL_GPIO_WritePin>
	  		char buffer[100];
	  		snprintf(buffer, sizeof(buffer), "%s,%s\nVehicale Over Heated!!!!\r\n", latitude, longitude);
 8000a4e:	4638      	mov	r0, r7
 8000a50:	4b32      	ldr	r3, [pc, #200]	@ (8000b1c <main+0x2cc>)
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	4b32      	ldr	r3, [pc, #200]	@ (8000b20 <main+0x2d0>)
 8000a56:	4a44      	ldr	r2, [pc, #272]	@ (8000b68 <main+0x318>)
 8000a58:	2164      	movs	r1, #100	@ 0x64
 8000a5a:	f003 ff01 	bl	8004860 <sniprintf>
	  		HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbb5 	bl	80001d0 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4639      	mov	r1, r7
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a70:	4830      	ldr	r0, [pc, #192]	@ (8000b34 <main+0x2e4>)
 8000a72:	f003 f9e1 	bl	8003e38 <HAL_UART_Transmit>
	  		HAL_Delay(500);
 8000a76:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a7a:	f000 fde5 	bl	8001648 <HAL_Delay>
 8000a7e:	e008      	b.n	8000a92 <main+0x242>
	  	  }
	  	  else{
	  		LcdPuts(LCD_LINE2,"          ");
 8000a80:	493a      	ldr	r1, [pc, #232]	@ (8000b6c <main+0x31c>)
 8000a82:	20c0      	movs	r0, #192	@ 0xc0
 8000a84:	f7ff fec0 	bl	8000808 <LcdPuts>
	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2140      	movs	r1, #64	@ 0x40
 8000a8c:	4827      	ldr	r0, [pc, #156]	@ (8000b2c <main+0x2dc>)
 8000a8e:	f002 f833 	bl	8002af8 <HAL_GPIO_WritePin>
	  	  }

	  char str4[20];
	  	   uint16_t data4 = adc_values[4];
 8000a92:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8000a96:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
	  	   sprintf(str4, "vib = %d",data4);
 8000a9a:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	@ 0xd2
 8000a9e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aa2:	4933      	ldr	r1, [pc, #204]	@ (8000b70 <main+0x320>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 ff11 	bl	80048cc <siprintf>
	  	   //LcdPuts(LCD_LINE2, (uint16_t*)str4);
	  	   if(data4 < 4090){
 8000aaa:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000aae:	f640 72f9 	movw	r2, #4089	@ 0xff9
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d829      	bhi.n	8000b0a <main+0x2ba>
	  		   LcdPuts(LCD_LINE1,"drive carefully");
 8000ab6:	492f      	ldr	r1, [pc, #188]	@ (8000b74 <main+0x324>)
 8000ab8:	2080      	movs	r0, #128	@ 0x80
 8000aba:	f7ff fea5 	bl	8000808 <LcdPuts>
	  		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2140      	movs	r1, #64	@ 0x40
 8000ac2:	481a      	ldr	r0, [pc, #104]	@ (8000b2c <main+0x2dc>)
 8000ac4:	f002 f818 	bl	8002af8 <HAL_GPIO_WritePin>
	  		   char buffer[100];
	  		   snprintf(buffer, sizeof(buffer), "%s,%s\nRash Driving Detected!!!!\r\n", latitude, longitude);
 8000ac8:	4638      	mov	r0, r7
 8000aca:	4b14      	ldr	r3, [pc, #80]	@ (8000b1c <main+0x2cc>)
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <main+0x2d0>)
 8000ad0:	4a29      	ldr	r2, [pc, #164]	@ (8000b78 <main+0x328>)
 8000ad2:	2164      	movs	r1, #100	@ 0x64
 8000ad4:	f003 fec4 	bl	8004860 <sniprintf>
	  		   HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fb78 	bl	80001d0 <strlen>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4639      	mov	r1, r7
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aea:	4812      	ldr	r0, [pc, #72]	@ (8000b34 <main+0x2e4>)
 8000aec:	f003 f9a4 	bl	8003e38 <HAL_UART_Transmit>
	  		   HAL_Delay(1000);
 8000af0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000af4:	f000 fda8 	bl	8001648 <HAL_Delay>
	  		   LcdPuts(LCD_LINE1,"                ");
 8000af8:	4920      	ldr	r1, [pc, #128]	@ (8000b7c <main+0x32c>)
 8000afa:	2080      	movs	r0, #128	@ 0x80
 8000afc:	f7ff fe84 	bl	8000808 <LcdPuts>
	  		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2140      	movs	r1, #64	@ 0x40
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <main+0x2dc>)
 8000b06:	f001 fff7 	bl	8002af8 <HAL_GPIO_WritePin>
	  		}

	 HAL_Delay(500);
 8000b0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b0e:	f000 fd9b 	bl	8001648 <HAL_Delay>
  {
 8000b12:	e6b3      	b.n	800087c <main+0x2c>
 8000b14:	20000130 	.word	0x20000130
 8000b18:	20000088 	.word	0x20000088
 8000b1c:	20000228 	.word	0x20000228
 8000b20:	20000214 	.word	0x20000214
 8000b24:	08005b4c 	.word	0x08005b4c
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	08005b58 	.word	0x08005b58
 8000b34:	200001cc 	.word	0x200001cc
 8000b38:	08005b78 	.word	0x08005b78
 8000b3c:	08005b88 	.word	0x08005b88
 8000b40:	08005b94 	.word	0x08005b94
 8000b44:	08005b9c 	.word	0x08005b9c
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40533333 	.word	0x40533333
 8000b50:	457ff000 	.word	0x457ff000
 8000b54:	3c23d70a 	.word	0x3c23d70a
 8000b58:	42c80000 	.word	0x42c80000
 8000b5c:	51eb851f 	.word	0x51eb851f
 8000b60:	08005bac 	.word	0x08005bac
 8000b64:	08005bbc 	.word	0x08005bbc
 8000b68:	08005bc8 	.word	0x08005bc8
 8000b6c:	08005bec 	.word	0x08005bec
 8000b70:	08005bf8 	.word	0x08005bf8
 8000b74:	08005c04 	.word	0x08005c04
 8000b78:	08005c14 	.word	0x08005c14
 8000b7c:	08005c38 	.word	0x08005c38

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	@ 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2230      	movs	r2, #48	@ 0x30
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 ff01 	bl	8004996 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4b28      	ldr	r3, [pc, #160]	@ (8000c4c <SystemClock_Config+0xcc>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	4a27      	ldr	r2, [pc, #156]	@ (8000c4c <SystemClock_Config+0xcc>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb4:	4b25      	ldr	r3, [pc, #148]	@ (8000c4c <SystemClock_Config+0xcc>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <SystemClock_Config+0xd0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a21      	ldr	r2, [pc, #132]	@ (8000c50 <SystemClock_Config+0xd0>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <SystemClock_Config+0xd0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be4:	2310      	movs	r3, #16
 8000be6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000bf4:	2332      	movs	r3, #50	@ 0x32
 8000bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 fc2f 	bl	8003468 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c10:	f000 f9e4 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	230f      	movs	r3, #15
 8000c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c20:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 fe90 	bl	8003958 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c3e:	f000 f9cd 	bl	8000fdc <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3750      	adds	r7, #80	@ 0x50
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c66:	4b3d      	ldr	r3, [pc, #244]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000c68:	4a3d      	ldr	r2, [pc, #244]	@ (8000d60 <MX_ADC1_Init+0x10c>)
 8000c6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c72:	4b3a      	ldr	r3, [pc, #232]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c78:	4b38      	ldr	r3, [pc, #224]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c7e:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c84:	4b35      	ldr	r3, [pc, #212]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c8c:	4b33      	ldr	r3, [pc, #204]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c92:	4b32      	ldr	r3, [pc, #200]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000c94:	4a33      	ldr	r2, [pc, #204]	@ (8000d64 <MX_ADC1_Init+0x110>)
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c98:	4b30      	ldr	r3, [pc, #192]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000ca0:	2205      	movs	r2, #5
 8000ca2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cac:	4b2b      	ldr	r3, [pc, #172]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb2:	482a      	ldr	r0, [pc, #168]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000cb4:	f000 fcec 	bl	8001690 <HAL_ADC_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f000 f98d 	bl	8000fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4822      	ldr	r0, [pc, #136]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000cd4:	f000 fe52 	bl	800197c <HAL_ADC_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cde:	f000 f97d 	bl	8000fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	481b      	ldr	r0, [pc, #108]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000cf0:	f000 fe44 	bl	800197c <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000cfa:	f000 f96f 	bl	8000fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d02:	2303      	movs	r3, #3
 8000d04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d06:	463b      	mov	r3, r7
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4814      	ldr	r0, [pc, #80]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000d0c:	f000 fe36 	bl	800197c <HAL_ADC_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000d16:	f000 f961 	bl	8000fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d22:	463b      	mov	r3, r7
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000d28:	f000 fe28 	bl	800197c <HAL_ADC_ConfigChannel>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000d32:	f000 f953 	bl	8000fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d36:	2308      	movs	r3, #8
 8000d38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <MX_ADC1_Init+0x108>)
 8000d44:	f000 fe1a 	bl	800197c <HAL_ADC_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000d4e:	f000 f945 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000088 	.word	0x20000088
 8000d60:	40012000 	.word	0x40012000
 8000d64:	0f000001 	.word	0x0f000001

08000d68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d6e:	4a13      	ldr	r2, [pc, #76]	@ (8000dbc <MX_I2C1_Init+0x54>)
 8000d70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d74:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <MX_I2C1_Init+0x58>)
 8000d76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d92:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d98:	4b07      	ldr	r3, [pc, #28]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	@ (8000db8 <MX_I2C1_Init+0x50>)
 8000da6:	f001 fec1 	bl	8002b2c <HAL_I2C_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000db0:	f000 f914 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000130 	.word	0x20000130
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	000186a0 	.word	0x000186a0

08000dc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dca:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <MX_USART1_UART_Init+0x50>)
 8000dcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dd0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de8:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dea:	220c      	movs	r2, #12
 8000dec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_USART1_UART_Init+0x4c>)
 8000dfc:	f002 ffcc 	bl	8003d98 <HAL_UART_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e06:	f000 f8e9 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000184 	.word	0x20000184
 8000e14:	40011000 	.word	0x40011000

08000e18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <MX_USART3_UART_Init+0x4c>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <MX_USART3_UART_Init+0x50>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <MX_USART3_UART_Init+0x4c>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <MX_USART3_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <MX_USART3_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <MX_USART3_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <MX_USART3_UART_Init+0x4c>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <MX_USART3_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <MX_USART3_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_USART3_UART_Init+0x4c>)
 8000e50:	f002 ffa2 	bl	8003d98 <HAL_UART_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e5a:	f000 f8bf 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001cc 	.word	0x200001cc
 8000e68:	40004800 	.word	0x40004800

08000e6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MX_DMA_Init+0x3c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <MX_DMA_Init+0x3c>)
 8000e7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <MX_DMA_Init+0x3c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2038      	movs	r0, #56	@ 0x38
 8000e94:	f001 f8ed 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e98:	2038      	movs	r0, #56	@ 0x38
 8000e9a:	f001 f906 	bl	80020aa <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b41      	ldr	r3, [pc, #260]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	4a40      	ldr	r2, [pc, #256]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	4a39      	ldr	r2, [pc, #228]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eee:	4b37      	ldr	r3, [pc, #220]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a32      	ldr	r2, [pc, #200]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	4b25      	ldr	r3, [pc, #148]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a24      	ldr	r2, [pc, #144]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b22      	ldr	r3, [pc, #136]	@ (8000fcc <MX_GPIO_Init+0x120>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_1, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2122      	movs	r1, #34	@ 0x22
 8000f52:	481f      	ldr	r0, [pc, #124]	@ (8000fd0 <MX_GPIO_Init+0x124>)
 8000f54:	f001 fdd0 	bl	8002af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f5e:	481d      	ldr	r0, [pc, #116]	@ (8000fd4 <MX_GPIO_Init+0x128>)
 8000f60:	f001 fdca 	bl	8002af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2140      	movs	r1, #64	@ 0x40
 8000f68:	481b      	ldr	r0, [pc, #108]	@ (8000fd8 <MX_GPIO_Init+0x12c>)
 8000f6a:	f001 fdc5 	bl	8002af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_1;
 8000f6e:	2322      	movs	r3, #34	@ 0x22
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4812      	ldr	r0, [pc, #72]	@ (8000fd0 <MX_GPIO_Init+0x124>)
 8000f86:	f001 fc1b 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480c      	ldr	r0, [pc, #48]	@ (8000fd4 <MX_GPIO_Init+0x128>)
 8000fa4:	f001 fc0c 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fa8:	2340      	movs	r3, #64	@ 0x40
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <MX_GPIO_Init+0x12c>)
 8000fc0:	f001 fbfe 	bl	80027c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	@ 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <Error_Handler+0x8>

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <HAL_MspInit+0x4c>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8001034 <HAL_MspInit+0x4c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	4a08      	ldr	r2, [pc, #32]	@ (8001034 <HAL_MspInit+0x4c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001018:	6413      	str	r3, [r2, #64]	@ 0x40
 800101a:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_MspInit+0x4c>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001026:	2007      	movs	r0, #7
 8001028:	f001 f818 	bl	800205c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800

08001038 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a3b      	ldr	r2, [pc, #236]	@ (8001144 <HAL_ADC_MspInit+0x10c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d170      	bne.n	800113c <HAL_ADC_MspInit+0x104>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <HAL_ADC_MspInit+0x110>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a39      	ldr	r2, [pc, #228]	@ (8001148 <HAL_ADC_MspInit+0x110>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b37      	ldr	r3, [pc, #220]	@ (8001148 <HAL_ADC_MspInit+0x110>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b33      	ldr	r3, [pc, #204]	@ (8001148 <HAL_ADC_MspInit+0x110>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a32      	ldr	r2, [pc, #200]	@ (8001148 <HAL_ADC_MspInit+0x110>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b30      	ldr	r3, [pc, #192]	@ (8001148 <HAL_ADC_MspInit+0x110>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b2c      	ldr	r3, [pc, #176]	@ (8001148 <HAL_ADC_MspInit+0x110>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a2b      	ldr	r2, [pc, #172]	@ (8001148 <HAL_ADC_MspInit+0x110>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b29      	ldr	r3, [pc, #164]	@ (8001148 <HAL_ADC_MspInit+0x110>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 80010ae:	232b      	movs	r3, #43	@ 0x2b
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b2:	2303      	movs	r3, #3
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4822      	ldr	r0, [pc, #136]	@ (800114c <HAL_ADC_MspInit+0x114>)
 80010c2:	f001 fb7d 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ca:	2303      	movs	r3, #3
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	481d      	ldr	r0, [pc, #116]	@ (8001150 <HAL_ADC_MspInit+0x118>)
 80010da:	f001 fb71 	bl	80027c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 80010e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001158 <HAL_ADC_MspInit+0x120>)
 80010e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 80010f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 8001100:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001104:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 8001108:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800110c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 8001122:	f000 ffdd 	bl	80020e0 <HAL_DMA_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 800112c:	f7ff ff56 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 8001134:	639a      	str	r2, [r3, #56]	@ 0x38
 8001136:	4a07      	ldr	r2, [pc, #28]	@ (8001154 <HAL_ADC_MspInit+0x11c>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	@ 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40012000 	.word	0x40012000
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	200000d0 	.word	0x200000d0
 8001158:	40026410 	.word	0x40026410

0800115c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a19      	ldr	r2, [pc, #100]	@ (80011e0 <HAL_I2C_MspInit+0x84>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d12b      	bne.n	80011d6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <HAL_I2C_MspInit+0x88>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <HAL_I2C_MspInit+0x88>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	@ 0x30
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_I2C_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800119a:	23c0      	movs	r3, #192	@ 0xc0
 800119c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119e:	2312      	movs	r3, #18
 80011a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011aa:	2304      	movs	r3, #4
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <HAL_I2C_MspInit+0x8c>)
 80011b6:	f001 fb03 	bl	80027c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <HAL_I2C_MspInit+0x88>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <HAL_I2C_MspInit+0x88>)
 80011c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_I2C_MspInit+0x88>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	@ 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40005400 	.word	0x40005400
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020400 	.word	0x40020400

080011ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	@ 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a33      	ldr	r2, [pc, #204]	@ (80012d8 <HAL_UART_MspInit+0xec>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d12d      	bne.n	800126a <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
 8001212:	4b32      	ldr	r3, [pc, #200]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a31      	ldr	r2, [pc, #196]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b2f      	ldr	r3, [pc, #188]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	4b2b      	ldr	r3, [pc, #172]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a2a      	ldr	r2, [pc, #168]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b28      	ldr	r3, [pc, #160]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001246:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001258:	2307      	movs	r3, #7
 800125a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	481f      	ldr	r0, [pc, #124]	@ (80012e0 <HAL_UART_MspInit+0xf4>)
 8001264:	f001 faac 	bl	80027c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001268:	e031      	b.n	80012ce <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a1d      	ldr	r2, [pc, #116]	@ (80012e4 <HAL_UART_MspInit+0xf8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d12c      	bne.n	80012ce <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	4a17      	ldr	r2, [pc, #92]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 800127e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001282:	6413      	str	r3, [r2, #64]	@ 0x40
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a0:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <HAL_UART_MspInit+0xf0>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012be:	2307      	movs	r3, #7
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <HAL_UART_MspInit+0xfc>)
 80012ca:	f001 fa79 	bl	80027c0 <HAL_GPIO_Init>
}
 80012ce:	bf00      	nop
 80012d0:	3730      	adds	r7, #48	@ 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40011000 	.word	0x40011000
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40004800 	.word	0x40004800
 80012e8:	40020400 	.word	0x40020400

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <NMI_Handler+0x4>

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <MemManage_Handler+0x4>

08001304 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <UsageFault_Handler+0x4>

08001314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001342:	f000 f961 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <DMA2_Stream0_IRQHandler+0x10>)
 8001352:	f000 ffcb 	bl	80022ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200000d0 	.word	0x200000d0

08001360 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return 1;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_kill>:

int _kill(int pid, int sig)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800137a:	f003 fbcd 	bl	8004b18 <__errno>
 800137e:	4603      	mov	r3, r0
 8001380:	2216      	movs	r2, #22
 8001382:	601a      	str	r2, [r3, #0]
  return -1;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_exit>:

void _exit (int status)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001398:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffe7 	bl	8001370 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013a2:	bf00      	nop
 80013a4:	e7fd      	b.n	80013a2 <_exit+0x12>

080013a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e00a      	b.n	80013ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b8:	f3af 8000 	nop.w
 80013bc:	4601      	mov	r1, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	60ba      	str	r2, [r7, #8]
 80013c4:	b2ca      	uxtb	r2, r1
 80013c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3301      	adds	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dbf0      	blt.n	80013b8 <_read+0x12>
  }

  return len;
 80013d6:	687b      	ldr	r3, [r7, #4]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e009      	b.n	8001406 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	60ba      	str	r2, [r7, #8]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	dbf1      	blt.n	80013f2 <_write+0x12>
  }
  return len;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_close>:

int _close(int file)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001440:	605a      	str	r2, [r3, #4]
  return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_isatty>:

int _isatty(int file)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f003 fb32 	bl	8004b18 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20020000 	.word	0x20020000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	2000023c 	.word	0x2000023c
 80014e8:	20000390 	.word	0x20000390

080014ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <SystemInit+0x20>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <SystemInit+0x20>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001510:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001548 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001514:	f7ff ffea 	bl	80014ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001518:	480c      	ldr	r0, [pc, #48]	@ (800154c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800151a:	490d      	ldr	r1, [pc, #52]	@ (8001550 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800151c:	4a0d      	ldr	r2, [pc, #52]	@ (8001554 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001530:	4c0a      	ldr	r4, [pc, #40]	@ (800155c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f003 faf1 	bl	8004b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001542:	f7ff f985 	bl	8000850 <main>
  bx  lr    
 8001546:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001548:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001550:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001554:	08005d5c 	.word	0x08005d5c
  ldr r2, =_sbss
 8001558:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800155c:	20000390 	.word	0x20000390

08001560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC_IRQHandler>
	...

08001564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001568:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <HAL_Init+0x40>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <HAL_Init+0x40>)
 800156e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001572:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <HAL_Init+0x40>)
 800157a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800157e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a07      	ldr	r2, [pc, #28]	@ (80015a4 <HAL_Init+0x40>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158c:	2003      	movs	r0, #3
 800158e:	f000 fd65 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001592:	2000      	movs	r0, #0
 8001594:	f000 f808 	bl	80015a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001598:	f7ff fd26 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023c00 	.word	0x40023c00

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_InitTick+0x54>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <HAL_InitTick+0x58>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015be:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f000 fd7d 	bl	80020c6 <HAL_SYSTICK_Config>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00e      	b.n	80015f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d80a      	bhi.n	80015f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015e4:	f000 fd45 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e8:	4a06      	ldr	r2, [pc, #24]	@ (8001604 <HAL_InitTick+0x5c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000008 	.word	0x20000008
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_IncTick+0x20>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_IncTick+0x24>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a04      	ldr	r2, [pc, #16]	@ (800162c <HAL_IncTick+0x24>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20000008 	.word	0x20000008
 800162c:	20000240 	.word	0x20000240

08001630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <HAL_GetTick+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000240 	.word	0x20000240

08001648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff ffee 	bl	8001630 <HAL_GetTick>
 8001654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001660:	d005      	beq.n	800166e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_Delay+0x44>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800166e:	bf00      	nop
 8001670:	f7ff ffde 	bl	8001630 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d8f7      	bhi.n	8001670 <HAL_Delay+0x28>
  {
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008

08001690 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e033      	b.n	800170e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fcc2 	bl	8001038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016d6:	f023 0302 	bic.w	r3, r3, #2
 80016da:	f043 0202 	orr.w	r2, r3, #2
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fa6c 	bl	8001bc0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f023 0303 	bic.w	r3, r3, #3
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80016fe:	e001      	b.n	8001704 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_ADC_Start_DMA+0x22>
 8001736:	2302      	movs	r3, #2
 8001738:	e0eb      	b.n	8001912 <HAL_ADC_Start_DMA+0x1fa>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b01      	cmp	r3, #1
 800174e:	d018      	beq.n	8001782 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001760:	4b6e      	ldr	r3, [pc, #440]	@ (800191c <HAL_ADC_Start_DMA+0x204>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6e      	ldr	r2, [pc, #440]	@ (8001920 <HAL_ADC_Start_DMA+0x208>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	0c9a      	lsrs	r2, r3, #18
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001774:	e002      	b.n	800177c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3b01      	subs	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001790:	d107      	bne.n	80017a2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017a0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	f040 80a3 	bne.w	80018f8 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017f0:	d106      	bne.n	8001800 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	f023 0206 	bic.w	r2, r3, #6
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80017fe:	e002      	b.n	8001806 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800180e:	4b45      	ldr	r3, [pc, #276]	@ (8001924 <HAL_ADC_Start_DMA+0x20c>)
 8001810:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001816:	4a44      	ldr	r2, [pc, #272]	@ (8001928 <HAL_ADC_Start_DMA+0x210>)
 8001818:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181e:	4a43      	ldr	r2, [pc, #268]	@ (800192c <HAL_ADC_Start_DMA+0x214>)
 8001820:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001826:	4a42      	ldr	r2, [pc, #264]	@ (8001930 <HAL_ADC_Start_DMA+0x218>)
 8001828:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001832:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001842:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001852:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	334c      	adds	r3, #76	@ 0x4c
 800185e:	4619      	mov	r1, r3
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f000 fcea 	bl	800223c <HAL_DMA_Start_IT>
 8001868:	4603      	mov	r3, r0
 800186a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	2b00      	cmp	r3, #0
 8001876:	d12a      	bne.n	80018ce <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a2d      	ldr	r2, [pc, #180]	@ (8001934 <HAL_ADC_Start_DMA+0x21c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d015      	beq.n	80018ae <HAL_ADC_Start_DMA+0x196>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a2c      	ldr	r2, [pc, #176]	@ (8001938 <HAL_ADC_Start_DMA+0x220>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d105      	bne.n	8001898 <HAL_ADC_Start_DMA+0x180>
 800188c:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <HAL_ADC_Start_DMA+0x20c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00a      	beq.n	80018ae <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a27      	ldr	r2, [pc, #156]	@ (800193c <HAL_ADC_Start_DMA+0x224>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d136      	bne.n	8001910 <HAL_ADC_Start_DMA+0x1f8>
 80018a2:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <HAL_ADC_Start_DMA+0x20c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d130      	bne.n	8001910 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d129      	bne.n	8001910 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	e020      	b.n	8001910 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a18      	ldr	r2, [pc, #96]	@ (8001934 <HAL_ADC_Start_DMA+0x21c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d11b      	bne.n	8001910 <HAL_ADC_Start_DMA+0x1f8>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d114      	bne.n	8001910 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	e00b      	b.n	8001910 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	f043 0210 	orr.w	r2, r3, #16
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001910:	7ffb      	ldrb	r3, [r7, #31]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000000 	.word	0x20000000
 8001920:	431bde83 	.word	0x431bde83
 8001924:	40012300 	.word	0x40012300
 8001928:	08001db9 	.word	0x08001db9
 800192c:	08001e73 	.word	0x08001e73
 8001930:	08001e8f 	.word	0x08001e8f
 8001934:	40012000 	.word	0x40012000
 8001938:	40012100 	.word	0x40012100
 800193c:	40012200 	.word	0x40012200

08001940 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1c>
 8001994:	2302      	movs	r3, #2
 8001996:	e105      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x228>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b09      	cmp	r3, #9
 80019a6:	d925      	bls.n	80019f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68d9      	ldr	r1, [r3, #12]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	3b1e      	subs	r3, #30
 80019be:	2207      	movs	r2, #7
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43da      	mvns	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	400a      	ands	r2, r1
 80019cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68d9      	ldr	r1, [r3, #12]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	4603      	mov	r3, r0
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4403      	add	r3, r0
 80019e6:	3b1e      	subs	r3, #30
 80019e8:	409a      	lsls	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	e022      	b.n	8001a3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6919      	ldr	r1, [r3, #16]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	2207      	movs	r2, #7
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	400a      	ands	r2, r1
 8001a16:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6919      	ldr	r1, [r3, #16]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4403      	add	r3, r0
 8001a30:	409a      	lsls	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d824      	bhi.n	8001a8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b05      	subs	r3, #5
 8001a54:	221f      	movs	r2, #31
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	400a      	ands	r2, r1
 8001a62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3b05      	subs	r3, #5
 8001a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a8a:	e04c      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b0c      	cmp	r3, #12
 8001a92:	d824      	bhi.n	8001ade <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b23      	subs	r3, #35	@ 0x23
 8001aa6:	221f      	movs	r2, #31
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43da      	mvns	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	3b23      	subs	r3, #35	@ 0x23
 8001ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	631a      	str	r2, [r3, #48]	@ 0x30
 8001adc:	e023      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	3b41      	subs	r3, #65	@ 0x41
 8001af0:	221f      	movs	r2, #31
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	400a      	ands	r2, r1
 8001afe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b41      	subs	r3, #65	@ 0x41
 8001b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b26:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x234>)
 8001b28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a21      	ldr	r2, [pc, #132]	@ (8001bb4 <HAL_ADC_ConfigChannel+0x238>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d109      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1cc>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b12      	cmp	r3, #18
 8001b3a:	d105      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	@ (8001bb4 <HAL_ADC_ConfigChannel+0x238>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d123      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x21e>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d003      	beq.n	8001b62 <HAL_ADC_ConfigChannel+0x1e6>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b11      	cmp	r3, #17
 8001b60:	d11b      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b10      	cmp	r3, #16
 8001b74:	d111      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_ADC_ConfigChannel+0x23c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a10      	ldr	r2, [pc, #64]	@ (8001bbc <HAL_ADC_ConfigChannel+0x240>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	0c9a      	lsrs	r2, r3, #18
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b8c:	e002      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f9      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40012300 	.word	0x40012300
 8001bb4:	40012000 	.word	0x40012000
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	431bde83 	.word	0x431bde83

08001bc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc8:	4b79      	ldr	r3, [pc, #484]	@ (8001db0 <ADC_Init+0x1f0>)
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	021a      	lsls	r2, r3, #8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6899      	ldr	r1, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c52:	4a58      	ldr	r2, [pc, #352]	@ (8001db4 <ADC_Init+0x1f4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d022      	beq.n	8001c9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6899      	ldr	r1, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e00f      	b.n	8001cbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cbc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0202 	bic.w	r2, r2, #2
 8001ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e1b      	ldrb	r3, [r3, #24]
 8001cd8:	005a      	lsls	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01b      	beq.n	8001d24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cfa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6859      	ldr	r1, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	3b01      	subs	r3, #1
 8001d18:	035a      	lsls	r2, r3, #13
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	e007      	b.n	8001d34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d32:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	051a      	lsls	r2, r3, #20
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6899      	ldr	r1, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d76:	025a      	lsls	r2, r3, #9
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6899      	ldr	r1, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	029a      	lsls	r2, r3, #10
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	609a      	str	r2, [r3, #8]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40012300 	.word	0x40012300
 8001db4:	0f000001 	.word	0x0f000001

08001db8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d13c      	bne.n	8001e4c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d12b      	bne.n	8001e44 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d127      	bne.n	8001e44 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d119      	bne.n	8001e44 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0220 	bic.w	r2, r2, #32
 8001e1e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff fd7b 	bl	8001940 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e4a:	e00e      	b.n	8001e6a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7ff fd85 	bl	8001968 <HAL_ADC_ErrorCallback>
}
 8001e5e:	e004      	b.n	8001e6a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e7e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f7ff fd67 	bl	8001954 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b084      	sub	sp, #16
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e9a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2240      	movs	r2, #64	@ 0x40
 8001ea0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	f043 0204 	orr.w	r2, r3, #4
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7ff fd5a 	bl	8001968 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	@ (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	@ (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	@ (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	@ 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff29 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff3e 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff8e 	bl	8001fb0 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5d 	bl	8001f5c <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff31 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa2 	bl	8002018 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff faa0 	bl	8001630 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e099      	b.n	8002230 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211c:	e00f      	b.n	800213e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800211e:	f7ff fa87 	bl	8001630 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b05      	cmp	r3, #5
 800212a:	d908      	bls.n	800213e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2203      	movs	r2, #3
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e078      	b.n	8002230 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e8      	bne.n	800211e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4b38      	ldr	r3, [pc, #224]	@ (8002238 <HAL_DMA_Init+0x158>)
 8002158:	4013      	ands	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800216a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	2b04      	cmp	r3, #4
 8002196:	d107      	bne.n	80021a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a0:	4313      	orrs	r3, r2
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f023 0307 	bic.w	r3, r3, #7
 80021be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d117      	bne.n	8002202 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00e      	beq.n	8002202 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fa6f 	bl	80026c8 <DMA_CheckFifoParam>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d008      	beq.n	8002202 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2240      	movs	r2, #64	@ 0x40
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021fe:	2301      	movs	r3, #1
 8002200:	e016      	b.n	8002230 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fa26 	bl	800265c <DMA_CalcBaseAndBitshift>
 8002210:	4603      	mov	r3, r0
 8002212:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	223f      	movs	r2, #63	@ 0x3f
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	f010803f 	.word	0xf010803f

0800223c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_DMA_Start_IT+0x26>
 800225e:	2302      	movs	r3, #2
 8002260:	e040      	b.n	80022e4 <HAL_DMA_Start_IT+0xa8>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d12f      	bne.n	80022d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2202      	movs	r2, #2
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f9b8 	bl	8002600 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002294:	223f      	movs	r2, #63	@ 0x3f
 8002296:	409a      	lsls	r2, r3
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0216 	orr.w	r2, r2, #22
 80022aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0208 	orr.w	r2, r2, #8
 80022c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e005      	b.n	80022e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022de:	2302      	movs	r3, #2
 80022e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022f8:	4b8e      	ldr	r3, [pc, #568]	@ (8002534 <HAL_DMA_IRQHandler+0x248>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a8e      	ldr	r2, [pc, #568]	@ (8002538 <HAL_DMA_IRQHandler+0x24c>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0a9b      	lsrs	r3, r3, #10
 8002304:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002316:	2208      	movs	r2, #8
 8002318:	409a      	lsls	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4013      	ands	r3, r2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01a      	beq.n	8002358 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d013      	beq.n	8002358 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0204 	bic.w	r2, r2, #4
 800233e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002344:	2208      	movs	r2, #8
 8002346:	409a      	lsls	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235c:	2201      	movs	r2, #1
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d012      	beq.n	800238e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237a:	2201      	movs	r2, #1
 800237c:	409a      	lsls	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002386:	f043 0202 	orr.w	r2, r3, #2
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002392:	2204      	movs	r2, #4
 8002394:	409a      	lsls	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d012      	beq.n	80023c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00b      	beq.n	80023c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b0:	2204      	movs	r2, #4
 80023b2:	409a      	lsls	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	f043 0204 	orr.w	r2, r3, #4
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c8:	2210      	movs	r2, #16
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d043      	beq.n	800245c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d03c      	beq.n	800245c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e6:	2210      	movs	r2, #16
 80023e8:	409a      	lsls	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d018      	beq.n	800242e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d108      	bne.n	800241c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d024      	beq.n	800245c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	4798      	blx	r3
 800241a:	e01f      	b.n	800245c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01b      	beq.n	800245c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
 800242c:	e016      	b.n	800245c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0208 	bic.w	r2, r2, #8
 800244a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002460:	2220      	movs	r2, #32
 8002462:	409a      	lsls	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 808f 	beq.w	800258c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8087 	beq.w	800258c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002482:	2220      	movs	r2, #32
 8002484:	409a      	lsls	r2, r3
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b05      	cmp	r3, #5
 8002494:	d136      	bne.n	8002504 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0216 	bic.w	r2, r2, #22
 80024a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <HAL_DMA_IRQHandler+0x1da>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024da:	223f      	movs	r2, #63	@ 0x3f
 80024dc:	409a      	lsls	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d07e      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
        }
        return;
 8002502:	e079      	b.n	80025f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01d      	beq.n	800254e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10d      	bne.n	800253c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002524:	2b00      	cmp	r3, #0
 8002526:	d031      	beq.n	800258c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	4798      	blx	r3
 8002530:	e02c      	b.n	800258c <HAL_DMA_IRQHandler+0x2a0>
 8002532:	bf00      	nop
 8002534:	20000000 	.word	0x20000000
 8002538:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d023      	beq.n	800258c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	4798      	blx	r3
 800254c:	e01e      	b.n	800258c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10f      	bne.n	800257c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0210 	bic.w	r2, r2, #16
 800256a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002590:	2b00      	cmp	r3, #0
 8002592:	d032      	beq.n	80025fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d022      	beq.n	80025e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2205      	movs	r2, #5
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	3301      	adds	r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d307      	bcc.n	80025d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f2      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x2cc>
 80025d2:	e000      	b.n	80025d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
 80025f6:	e000      	b.n	80025fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80025f8:	bf00      	nop
    }
  }
}
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800261c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b40      	cmp	r3, #64	@ 0x40
 800262c:	d108      	bne.n	8002640 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800263e:	e007      	b.n	8002650 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	60da      	str	r2, [r3, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	3b10      	subs	r3, #16
 800266c:	4a14      	ldr	r2, [pc, #80]	@ (80026c0 <DMA_CalcBaseAndBitshift+0x64>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002676:	4a13      	ldr	r2, [pc, #76]	@ (80026c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4413      	add	r3, r2
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d909      	bls.n	800269e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002692:	f023 0303 	bic.w	r3, r3, #3
 8002696:	1d1a      	adds	r2, r3, #4
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	659a      	str	r2, [r3, #88]	@ 0x58
 800269c:	e007      	b.n	80026ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026a6:	f023 0303 	bic.w	r3, r3, #3
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	aaaaaaab 	.word	0xaaaaaaab
 80026c4:	08005c64 	.word	0x08005c64

080026c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d11f      	bne.n	8002722 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d856      	bhi.n	8002796 <DMA_CheckFifoParam+0xce>
 80026e8:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <DMA_CheckFifoParam+0x28>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002701 	.word	0x08002701
 80026f4:	08002713 	.word	0x08002713
 80026f8:	08002701 	.word	0x08002701
 80026fc:	08002797 	.word	0x08002797
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002704:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d046      	beq.n	800279a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002710:	e043      	b.n	800279a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002716:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800271a:	d140      	bne.n	800279e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002720:	e03d      	b.n	800279e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800272a:	d121      	bne.n	8002770 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d837      	bhi.n	80027a2 <DMA_CheckFifoParam+0xda>
 8002732:	a201      	add	r2, pc, #4	@ (adr r2, 8002738 <DMA_CheckFifoParam+0x70>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	08002749 	.word	0x08002749
 800273c:	0800274f 	.word	0x0800274f
 8002740:	08002749 	.word	0x08002749
 8002744:	08002761 	.word	0x08002761
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
      break;
 800274c:	e030      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d025      	beq.n	80027a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275e:	e022      	b.n	80027a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002768:	d11f      	bne.n	80027aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800276e:	e01c      	b.n	80027aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d903      	bls.n	800277e <DMA_CheckFifoParam+0xb6>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d003      	beq.n	8002784 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800277c:	e018      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	73fb      	strb	r3, [r7, #15]
      break;
 8002782:	e015      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00e      	beq.n	80027ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	e00b      	b.n	80027ae <DMA_CheckFifoParam+0xe6>
      break;
 8002796:	bf00      	nop
 8002798:	e00a      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;
 800279a:	bf00      	nop
 800279c:	e008      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;
 800279e:	bf00      	nop
 80027a0:	e006      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;
 80027a2:	bf00      	nop
 80027a4:	e004      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;
 80027a6:	bf00      	nop
 80027a8:	e002      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80027aa:	bf00      	nop
 80027ac:	e000      	b.n	80027b0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ae:	bf00      	nop
    }
  } 
  
  return status; 
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	@ 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e16b      	b.n	8002ab4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f040 815a 	bne.w	8002aae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d005      	beq.n	8002812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280e:	2b02      	cmp	r3, #2
 8002810:	d130      	bne.n	8002874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 0201 	and.w	r2, r3, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b03      	cmp	r3, #3
 800287e:	d017      	beq.n	80028b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d123      	bne.n	8002904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	08da      	lsrs	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3208      	adds	r2, #8
 80028c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	220f      	movs	r2, #15
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	08da      	lsrs	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3208      	adds	r2, #8
 80028fe:	69b9      	ldr	r1, [r7, #24]
 8002900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0203 	and.w	r2, r3, #3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80b4 	beq.w	8002aae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b60      	ldr	r3, [pc, #384]	@ (8002acc <HAL_GPIO_Init+0x30c>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	4a5f      	ldr	r2, [pc, #380]	@ (8002acc <HAL_GPIO_Init+0x30c>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002954:	6453      	str	r3, [r2, #68]	@ 0x44
 8002956:	4b5d      	ldr	r3, [pc, #372]	@ (8002acc <HAL_GPIO_Init+0x30c>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002962:	4a5b      	ldr	r2, [pc, #364]	@ (8002ad0 <HAL_GPIO_Init+0x310>)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	220f      	movs	r2, #15
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a52      	ldr	r2, [pc, #328]	@ (8002ad4 <HAL_GPIO_Init+0x314>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d02b      	beq.n	80029e6 <HAL_GPIO_Init+0x226>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a51      	ldr	r2, [pc, #324]	@ (8002ad8 <HAL_GPIO_Init+0x318>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d025      	beq.n	80029e2 <HAL_GPIO_Init+0x222>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a50      	ldr	r2, [pc, #320]	@ (8002adc <HAL_GPIO_Init+0x31c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01f      	beq.n	80029de <HAL_GPIO_Init+0x21e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ae0 <HAL_GPIO_Init+0x320>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d019      	beq.n	80029da <HAL_GPIO_Init+0x21a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4e      	ldr	r2, [pc, #312]	@ (8002ae4 <HAL_GPIO_Init+0x324>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0x216>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ae8 <HAL_GPIO_Init+0x328>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00d      	beq.n	80029d2 <HAL_GPIO_Init+0x212>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a4c      	ldr	r2, [pc, #304]	@ (8002aec <HAL_GPIO_Init+0x32c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <HAL_GPIO_Init+0x20e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a4b      	ldr	r2, [pc, #300]	@ (8002af0 <HAL_GPIO_Init+0x330>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_GPIO_Init+0x20a>
 80029c6:	2307      	movs	r3, #7
 80029c8:	e00e      	b.n	80029e8 <HAL_GPIO_Init+0x228>
 80029ca:	2308      	movs	r3, #8
 80029cc:	e00c      	b.n	80029e8 <HAL_GPIO_Init+0x228>
 80029ce:	2306      	movs	r3, #6
 80029d0:	e00a      	b.n	80029e8 <HAL_GPIO_Init+0x228>
 80029d2:	2305      	movs	r3, #5
 80029d4:	e008      	b.n	80029e8 <HAL_GPIO_Init+0x228>
 80029d6:	2304      	movs	r3, #4
 80029d8:	e006      	b.n	80029e8 <HAL_GPIO_Init+0x228>
 80029da:	2303      	movs	r3, #3
 80029dc:	e004      	b.n	80029e8 <HAL_GPIO_Init+0x228>
 80029de:	2302      	movs	r3, #2
 80029e0:	e002      	b.n	80029e8 <HAL_GPIO_Init+0x228>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_GPIO_Init+0x228>
 80029e6:	2300      	movs	r3, #0
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	f002 0203 	and.w	r2, r2, #3
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	4093      	lsls	r3, r2
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f8:	4935      	ldr	r1, [pc, #212]	@ (8002ad0 <HAL_GPIO_Init+0x310>)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	3302      	adds	r3, #2
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a06:	4b3b      	ldr	r3, [pc, #236]	@ (8002af4 <HAL_GPIO_Init+0x334>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a2a:	4a32      	ldr	r2, [pc, #200]	@ (8002af4 <HAL_GPIO_Init+0x334>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a30:	4b30      	ldr	r3, [pc, #192]	@ (8002af4 <HAL_GPIO_Init+0x334>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a54:	4a27      	ldr	r2, [pc, #156]	@ (8002af4 <HAL_GPIO_Init+0x334>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a5a:	4b26      	ldr	r3, [pc, #152]	@ (8002af4 <HAL_GPIO_Init+0x334>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002af4 <HAL_GPIO_Init+0x334>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a84:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <HAL_GPIO_Init+0x334>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aa8:	4a12      	ldr	r2, [pc, #72]	@ (8002af4 <HAL_GPIO_Init+0x334>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	f67f ae90 	bls.w	80027dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002abc:	bf00      	nop
 8002abe:	bf00      	nop
 8002ac0:	3724      	adds	r7, #36	@ 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40013800 	.word	0x40013800
 8002ad4:	40020000 	.word	0x40020000
 8002ad8:	40020400 	.word	0x40020400
 8002adc:	40020800 	.word	0x40020800
 8002ae0:	40020c00 	.word	0x40020c00
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40021400 	.word	0x40021400
 8002aec:	40021800 	.word	0x40021800
 8002af0:	40021c00 	.word	0x40021c00
 8002af4:	40013c00 	.word	0x40013c00

08002af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
 8002b04:	4613      	mov	r3, r2
 8002b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b08:	787b      	ldrb	r3, [r7, #1]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b14:	e003      	b.n	8002b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b16:	887b      	ldrh	r3, [r7, #2]
 8002b18:	041a      	lsls	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	619a      	str	r2, [r3, #24]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e12b      	b.n	8002d96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe fb02 	bl	800115c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2224      	movs	r2, #36	@ 0x24
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b90:	f001 f8da 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8002b94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4a81      	ldr	r2, [pc, #516]	@ (8002da0 <HAL_I2C_Init+0x274>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d807      	bhi.n	8002bb0 <HAL_I2C_Init+0x84>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a80      	ldr	r2, [pc, #512]	@ (8002da4 <HAL_I2C_Init+0x278>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	bf94      	ite	ls
 8002ba8:	2301      	movls	r3, #1
 8002baa:	2300      	movhi	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	e006      	b.n	8002bbe <HAL_I2C_Init+0x92>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a7d      	ldr	r2, [pc, #500]	@ (8002da8 <HAL_I2C_Init+0x27c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	bf94      	ite	ls
 8002bb8:	2301      	movls	r3, #1
 8002bba:	2300      	movhi	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0e7      	b.n	8002d96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a78      	ldr	r2, [pc, #480]	@ (8002dac <HAL_I2C_Init+0x280>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0c9b      	lsrs	r3, r3, #18
 8002bd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a6a      	ldr	r2, [pc, #424]	@ (8002da0 <HAL_I2C_Init+0x274>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d802      	bhi.n	8002c00 <HAL_I2C_Init+0xd4>
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	e009      	b.n	8002c14 <HAL_I2C_Init+0xe8>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	4a69      	ldr	r2, [pc, #420]	@ (8002db0 <HAL_I2C_Init+0x284>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	3301      	adds	r3, #1
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	495c      	ldr	r1, [pc, #368]	@ (8002da0 <HAL_I2C_Init+0x274>)
 8002c30:	428b      	cmp	r3, r1
 8002c32:	d819      	bhi.n	8002c68 <HAL_I2C_Init+0x13c>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e59      	subs	r1, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c42:	1c59      	adds	r1, r3, #1
 8002c44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c48:	400b      	ands	r3, r1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_I2C_Init+0x138>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1e59      	subs	r1, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c62:	e051      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002c64:	2304      	movs	r3, #4
 8002c66:	e04f      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d111      	bne.n	8002c94 <HAL_I2C_Init+0x168>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e58      	subs	r0, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	440b      	add	r3, r1
 8002c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e012      	b.n	8002cba <HAL_I2C_Init+0x18e>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1e58      	subs	r0, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	0099      	lsls	r1, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Init+0x196>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e022      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_I2C_Init+0x1bc>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1e58      	subs	r0, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	440b      	add	r3, r1
 8002cd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce6:	e00f      	b.n	8002d08 <HAL_I2C_Init+0x1dc>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	1e58      	subs	r0, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	0099      	lsls	r1, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	6809      	ldr	r1, [r1, #0]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6911      	ldr	r1, [r2, #16]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68d2      	ldr	r2, [r2, #12]
 8002d42:	4311      	orrs	r1, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	000186a0 	.word	0x000186a0
 8002da4:	001e847f 	.word	0x001e847f
 8002da8:	003d08ff 	.word	0x003d08ff
 8002dac:	431bde83 	.word	0x431bde83
 8002db0:	10624dd3 	.word	0x10624dd3

08002db4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	817b      	strh	r3, [r7, #10]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7fe fc32 	bl	8001630 <HAL_GetTick>
 8002dcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	f040 80e0 	bne.w	8002f9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2319      	movs	r3, #25
 8002de2:	2201      	movs	r2, #1
 8002de4:	4970      	ldr	r1, [pc, #448]	@ (8002fa8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f964 	bl	80030b4 <I2C_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
 8002df4:	e0d3      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_I2C_Master_Transmit+0x50>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e0cc      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d007      	beq.n	8002e2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2221      	movs	r2, #33	@ 0x21
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2210      	movs	r2, #16
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	893a      	ldrh	r2, [r7, #8]
 8002e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a50      	ldr	r2, [pc, #320]	@ (8002fac <HAL_I2C_Master_Transmit+0x1f8>)
 8002e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	6a3a      	ldr	r2, [r7, #32]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 f89c 	bl	8002fb0 <I2C_MasterRequestWrite>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e08d      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e98:	e066      	b.n	8002f68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	6a39      	ldr	r1, [r7, #32]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fa22 	bl	80032e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d107      	bne.n	8002ec2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06b      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	781a      	ldrb	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d11b      	bne.n	8002f3c <HAL_I2C_Master_Transmit+0x188>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d017      	beq.n	8002f3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	6a39      	ldr	r1, [r7, #32]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fa19 	bl	8003378 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00d      	beq.n	8002f68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d107      	bne.n	8002f64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e01a      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d194      	bne.n	8002e9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	00100002 	.word	0x00100002
 8002fac:	ffff0000 	.word	0xffff0000

08002fb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d006      	beq.n	8002fda <I2C_MasterRequestWrite+0x2a>
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d003      	beq.n	8002fda <I2C_MasterRequestWrite+0x2a>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fd8:	d108      	bne.n	8002fec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	e00b      	b.n	8003004 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff0:	2b12      	cmp	r3, #18
 8002ff2:	d107      	bne.n	8003004 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003002:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f84f 	bl	80030b4 <I2C_WaitOnFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00d      	beq.n	8003038 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800302a:	d103      	bne.n	8003034 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e035      	b.n	80030a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003040:	d108      	bne.n	8003054 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003042:	897b      	ldrh	r3, [r7, #10]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003050:	611a      	str	r2, [r3, #16]
 8003052:	e01b      	b.n	800308c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003054:	897b      	ldrh	r3, [r7, #10]
 8003056:	11db      	asrs	r3, r3, #7
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f003 0306 	and.w	r3, r3, #6
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f063 030f 	orn	r3, r3, #15
 8003064:	b2da      	uxtb	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	490e      	ldr	r1, [pc, #56]	@ (80030ac <I2C_MasterRequestWrite+0xfc>)
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f898 	bl	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e010      	b.n	80030a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003082:	897b      	ldrh	r3, [r7, #10]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4907      	ldr	r1, [pc, #28]	@ (80030b0 <I2C_MasterRequestWrite+0x100>)
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f888 	bl	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	00010008 	.word	0x00010008
 80030b0:	00010002 	.word	0x00010002

080030b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c4:	e048      	b.n	8003158 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030cc:	d044      	beq.n	8003158 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fe faaf 	bl	8001630 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d139      	bne.n	8003158 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	0c1b      	lsrs	r3, r3, #16
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d10d      	bne.n	800310a <I2C_WaitOnFlagUntilTimeout+0x56>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	43da      	mvns	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4013      	ands	r3, r2
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	e00c      	b.n	8003124 <I2C_WaitOnFlagUntilTimeout+0x70>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	43da      	mvns	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	4013      	ands	r3, r2
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	429a      	cmp	r2, r3
 8003128:	d116      	bne.n	8003158 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e023      	b.n	80031a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	0c1b      	lsrs	r3, r3, #16
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d10d      	bne.n	800317e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	43da      	mvns	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	e00c      	b.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	43da      	mvns	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4013      	ands	r3, r2
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	429a      	cmp	r2, r3
 800319c:	d093      	beq.n	80030c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031b6:	e071      	b.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c6:	d123      	bne.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	f043 0204 	orr.w	r2, r3, #4
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e067      	b.n	80032e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003216:	d041      	beq.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003218:	f7fe fa0a 	bl	8001630 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	429a      	cmp	r2, r3
 8003226:	d302      	bcc.n	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d136      	bne.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d10c      	bne.n	8003252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4013      	ands	r3, r2
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf14      	ite	ne
 800324a:	2301      	movne	r3, #1
 800324c:	2300      	moveq	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e00b      	b.n	800326a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	43da      	mvns	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4013      	ands	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e021      	b.n	80032e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	0c1b      	lsrs	r3, r3, #16
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d10c      	bne.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e00b      	b.n	80032d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	43da      	mvns	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4013      	ands	r3, r2
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bf14      	ite	ne
 80032d2:	2301      	movne	r3, #1
 80032d4:	2300      	moveq	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f47f af6d 	bne.w	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f4:	e034      	b.n	8003360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f886 	bl	8003408 <I2C_IsAcknowledgeFailed>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e034      	b.n	8003370 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800330c:	d028      	beq.n	8003360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800330e:	f7fe f98f 	bl	8001630 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11d      	bne.n	8003360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332e:	2b80      	cmp	r3, #128	@ 0x80
 8003330:	d016      	beq.n	8003360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e007      	b.n	8003370 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336a:	2b80      	cmp	r3, #128	@ 0x80
 800336c:	d1c3      	bne.n	80032f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003384:	e034      	b.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f83e 	bl	8003408 <I2C_IsAcknowledgeFailed>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e034      	b.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800339c:	d028      	beq.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7fe f947 	bl	8001630 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11d      	bne.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d016      	beq.n	80033f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	f043 0220 	orr.w	r2, r3, #32
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e007      	b.n	8003400 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d1c3      	bne.n	8003386 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341e:	d11b      	bne.n	8003458 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003428:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e267      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d075      	beq.n	8003572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003486:	4b88      	ldr	r3, [pc, #544]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b04      	cmp	r3, #4
 8003490:	d00c      	beq.n	80034ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003492:	4b85      	ldr	r3, [pc, #532]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800349a:	2b08      	cmp	r3, #8
 800349c:	d112      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349e:	4b82      	ldr	r3, [pc, #520]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	4b7e      	ldr	r3, [pc, #504]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d05b      	beq.n	8003570 <HAL_RCC_OscConfig+0x108>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d157      	bne.n	8003570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e242      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034cc:	d106      	bne.n	80034dc <HAL_RCC_OscConfig+0x74>
 80034ce:	4b76      	ldr	r3, [pc, #472]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a75      	ldr	r2, [pc, #468]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e01d      	b.n	8003518 <HAL_RCC_OscConfig+0xb0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x98>
 80034e6:	4b70      	ldr	r3, [pc, #448]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6f      	ldr	r2, [pc, #444]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b6d      	ldr	r3, [pc, #436]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a6c      	ldr	r2, [pc, #432]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0xb0>
 8003500:	4b69      	ldr	r3, [pc, #420]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a68      	ldr	r2, [pc, #416]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b66      	ldr	r3, [pc, #408]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a65      	ldr	r2, [pc, #404]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d013      	beq.n	8003548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003520:	f7fe f886 	bl	8001630 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003528:	f7fe f882 	bl	8001630 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	@ 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e207      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b5b      	ldr	r3, [pc, #364]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0xc0>
 8003546:	e014      	b.n	8003572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe f872 	bl	8001630 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003550:	f7fe f86e 	bl	8001630 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	@ 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e1f3      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	4b51      	ldr	r3, [pc, #324]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0xe8>
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d063      	beq.n	8003646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800357e:	4b4a      	ldr	r3, [pc, #296]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358a:	4b47      	ldr	r3, [pc, #284]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003592:	2b08      	cmp	r3, #8
 8003594:	d11c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b44      	ldr	r3, [pc, #272]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d116      	bne.n	80035d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a2:	4b41      	ldr	r3, [pc, #260]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_RCC_OscConfig+0x152>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e1c7      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ba:	4b3b      	ldr	r3, [pc, #236]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4937      	ldr	r1, [pc, #220]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	e03a      	b.n	8003646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d8:	4b34      	ldr	r3, [pc, #208]	@ (80036ac <HAL_RCC_OscConfig+0x244>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fe f827 	bl	8001630 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e6:	f7fe f823 	bl	8001630 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e1a8      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	4b2b      	ldr	r3, [pc, #172]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003604:	4b28      	ldr	r3, [pc, #160]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4925      	ldr	r1, [pc, #148]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]
 8003618:	e015      	b.n	8003646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361a:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <HAL_RCC_OscConfig+0x244>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe f806 	bl	8001630 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003628:	f7fe f802 	bl	8001630 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e187      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	4b1b      	ldr	r3, [pc, #108]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d036      	beq.n	80036c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365a:	4b15      	ldr	r3, [pc, #84]	@ (80036b0 <HAL_RCC_OscConfig+0x248>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fd ffe6 	bl	8001630 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003668:	f7fd ffe2 	bl	8001630 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e167      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <HAL_RCC_OscConfig+0x240>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x200>
 8003686:	e01b      	b.n	80036c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003688:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <HAL_RCC_OscConfig+0x248>)
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7fd ffcf 	bl	8001630 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003694:	e00e      	b.n	80036b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003696:	f7fd ffcb 	bl	8001630 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d907      	bls.n	80036b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e150      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
 80036a8:	40023800 	.word	0x40023800
 80036ac:	42470000 	.word	0x42470000
 80036b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	4b88      	ldr	r3, [pc, #544]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ea      	bne.n	8003696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8097 	beq.w	80037fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d2:	4b81      	ldr	r3, [pc, #516]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	4b7d      	ldr	r3, [pc, #500]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	4a7c      	ldr	r2, [pc, #496]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80036ee:	4b7a      	ldr	r3, [pc, #488]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fe:	4b77      	ldr	r3, [pc, #476]	@ (80038dc <HAL_RCC_OscConfig+0x474>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d118      	bne.n	800373c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370a:	4b74      	ldr	r3, [pc, #464]	@ (80038dc <HAL_RCC_OscConfig+0x474>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a73      	ldr	r2, [pc, #460]	@ (80038dc <HAL_RCC_OscConfig+0x474>)
 8003710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003716:	f7fd ff8b 	bl	8001630 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800371e:	f7fd ff87 	bl	8001630 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e10c      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003730:	4b6a      	ldr	r3, [pc, #424]	@ (80038dc <HAL_RCC_OscConfig+0x474>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d106      	bne.n	8003752 <HAL_RCC_OscConfig+0x2ea>
 8003744:	4b64      	ldr	r3, [pc, #400]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	4a63      	ldr	r2, [pc, #396]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003750:	e01c      	b.n	800378c <HAL_RCC_OscConfig+0x324>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b05      	cmp	r3, #5
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0x30c>
 800375a:	4b5f      	ldr	r3, [pc, #380]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375e:	4a5e      	ldr	r2, [pc, #376]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003760:	f043 0304 	orr.w	r3, r3, #4
 8003764:	6713      	str	r3, [r2, #112]	@ 0x70
 8003766:	4b5c      	ldr	r3, [pc, #368]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376a:	4a5b      	ldr	r2, [pc, #364]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6713      	str	r3, [r2, #112]	@ 0x70
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0x324>
 8003774:	4b58      	ldr	r3, [pc, #352]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003778:	4a57      	ldr	r2, [pc, #348]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 800377a:	f023 0301 	bic.w	r3, r3, #1
 800377e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003780:	4b55      	ldr	r3, [pc, #340]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003784:	4a54      	ldr	r2, [pc, #336]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003786:	f023 0304 	bic.w	r3, r3, #4
 800378a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d015      	beq.n	80037c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fd ff4c 	bl	8001630 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379c:	f7fd ff48 	bl	8001630 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e0cb      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b2:	4b49      	ldr	r3, [pc, #292]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0ee      	beq.n	800379c <HAL_RCC_OscConfig+0x334>
 80037be:	e014      	b.n	80037ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c0:	f7fd ff36 	bl	8001630 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c6:	e00a      	b.n	80037de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c8:	f7fd ff32 	bl	8001630 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0b5      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037de:	4b3e      	ldr	r3, [pc, #248]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ee      	bne.n	80037c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d105      	bne.n	80037fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f0:	4b39      	ldr	r3, [pc, #228]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	4a38      	ldr	r2, [pc, #224]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80a1 	beq.w	8003948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003806:	4b34      	ldr	r3, [pc, #208]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b08      	cmp	r3, #8
 8003810:	d05c      	beq.n	80038cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d141      	bne.n	800389e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b31      	ldr	r3, [pc, #196]	@ (80038e0 <HAL_RCC_OscConfig+0x478>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fd ff06 	bl	8001630 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003828:	f7fd ff02 	bl	8001630 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e087      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	4b27      	ldr	r3, [pc, #156]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69da      	ldr	r2, [r3, #28]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	019b      	lsls	r3, r3, #6
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	3b01      	subs	r3, #1
 8003860:	041b      	lsls	r3, r3, #16
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	491b      	ldr	r1, [pc, #108]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003870:	4b1b      	ldr	r3, [pc, #108]	@ (80038e0 <HAL_RCC_OscConfig+0x478>)
 8003872:	2201      	movs	r2, #1
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7fd fedb 	bl	8001630 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387e:	f7fd fed7 	bl	8001630 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e05c      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003890:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0f0      	beq.n	800387e <HAL_RCC_OscConfig+0x416>
 800389c:	e054      	b.n	8003948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389e:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_RCC_OscConfig+0x478>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fd fec4 	bl	8001630 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fd fec0 	bl	8001630 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e045      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <HAL_RCC_OscConfig+0x470>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x444>
 80038ca:	e03d      	b.n	8003948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d107      	bne.n	80038e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e038      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40007000 	.word	0x40007000
 80038e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <HAL_RCC_OscConfig+0x4ec>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d028      	beq.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d121      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d11a      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003914:	4013      	ands	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800391a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800391c:	4293      	cmp	r3, r2
 800391e:	d111      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	3b01      	subs	r3, #1
 800392e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0cc      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800396c:	4b68      	ldr	r3, [pc, #416]	@ (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d90c      	bls.n	8003994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b65      	ldr	r3, [pc, #404]	@ (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b63      	ldr	r3, [pc, #396]	@ (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0b8      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039ac:	4b59      	ldr	r3, [pc, #356]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4a58      	ldr	r2, [pc, #352]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c4:	4b53      	ldr	r3, [pc, #332]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a52      	ldr	r2, [pc, #328]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d0:	4b50      	ldr	r3, [pc, #320]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	494d      	ldr	r1, [pc, #308]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d044      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f6:	4b47      	ldr	r3, [pc, #284]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d119      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e07f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a16:	4b3f      	ldr	r3, [pc, #252]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e06f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a26:	4b3b      	ldr	r3, [pc, #236]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e067      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a36:	4b37      	ldr	r3, [pc, #220]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f023 0203 	bic.w	r2, r3, #3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4934      	ldr	r1, [pc, #208]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a48:	f7fd fdf2 	bl	8001630 <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a50:	f7fd fdee 	bl	8001630 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e04f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a66:	4b2b      	ldr	r3, [pc, #172]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 020c 	and.w	r2, r3, #12
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d1eb      	bne.n	8003a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a78:	4b25      	ldr	r3, [pc, #148]	@ (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d20c      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	4b22      	ldr	r3, [pc, #136]	@ (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e032      	b.n	8003b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aac:	4b19      	ldr	r3, [pc, #100]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	4916      	ldr	r1, [pc, #88]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aca:	4b12      	ldr	r3, [pc, #72]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	490e      	ldr	r1, [pc, #56]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ade:	f000 f821 	bl	8003b24 <HAL_RCC_GetSysClockFreq>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	490a      	ldr	r1, [pc, #40]	@ (8003b18 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	5ccb      	ldrb	r3, [r1, r3]
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	4a09      	ldr	r2, [pc, #36]	@ (8003b1c <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003afa:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fd52 	bl	80015a8 <HAL_InitTick>

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023c00 	.word	0x40023c00
 8003b14:	40023800 	.word	0x40023800
 8003b18:	08005c4c 	.word	0x08005c4c
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	20000004 	.word	0x20000004

08003b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b28:	b094      	sub	sp, #80	@ 0x50
 8003b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b3c:	4b79      	ldr	r3, [pc, #484]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d00d      	beq.n	8003b64 <HAL_RCC_GetSysClockFreq+0x40>
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	f200 80e1 	bhi.w	8003d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x34>
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d003      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b56:	e0db      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b58:	4b73      	ldr	r3, [pc, #460]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b5c:	e0db      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b5e:	4b73      	ldr	r3, [pc, #460]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b62:	e0d8      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b64:	4b6f      	ldr	r3, [pc, #444]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d063      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	099b      	lsrs	r3, r3, #6
 8003b80:	2200      	movs	r2, #0
 8003b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b8e:	2300      	movs	r3, #0
 8003b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b96:	4622      	mov	r2, r4
 8003b98:	462b      	mov	r3, r5
 8003b9a:	f04f 0000 	mov.w	r0, #0
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	0159      	lsls	r1, r3, #5
 8003ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba8:	0150      	lsls	r0, r2, #5
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4621      	mov	r1, r4
 8003bb0:	1a51      	subs	r1, r2, r1
 8003bb2:	6139      	str	r1, [r7, #16]
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bc8:	4659      	mov	r1, fp
 8003bca:	018b      	lsls	r3, r1, #6
 8003bcc:	4651      	mov	r1, sl
 8003bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bd2:	4651      	mov	r1, sl
 8003bd4:	018a      	lsls	r2, r1, #6
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bdc:	4659      	mov	r1, fp
 8003bde:	eb63 0901 	sbc.w	r9, r3, r1
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bf6:	4690      	mov	r8, r2
 8003bf8:	4699      	mov	r9, r3
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	eb18 0303 	adds.w	r3, r8, r3
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	462b      	mov	r3, r5
 8003c04:	eb49 0303 	adc.w	r3, r9, r3
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c16:	4629      	mov	r1, r5
 8003c18:	024b      	lsls	r3, r1, #9
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c20:	4621      	mov	r1, r4
 8003c22:	024a      	lsls	r2, r1, #9
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c34:	f7fc fb24 	bl	8000280 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c40:	e058      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c42:	4b38      	ldr	r3, [pc, #224]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	2200      	movs	r2, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	2300      	movs	r3, #0
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	f04f 0000 	mov.w	r0, #0
 8003c64:	f04f 0100 	mov.w	r1, #0
 8003c68:	0159      	lsls	r1, r3, #5
 8003c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6e:	0150      	lsls	r0, r2, #5
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4641      	mov	r1, r8
 8003c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c94:	ebb2 040a 	subs.w	r4, r2, sl
 8003c98:	eb63 050b 	sbc.w	r5, r3, fp
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	00eb      	lsls	r3, r5, #3
 8003ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003caa:	00e2      	lsls	r2, r4, #3
 8003cac:	4614      	mov	r4, r2
 8003cae:	461d      	mov	r5, r3
 8003cb0:	4643      	mov	r3, r8
 8003cb2:	18e3      	adds	r3, r4, r3
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	eb45 0303 	adc.w	r3, r5, r3
 8003cbc:	607b      	str	r3, [r7, #4]
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cca:	4629      	mov	r1, r5
 8003ccc:	028b      	lsls	r3, r1, #10
 8003cce:	4621      	mov	r1, r4
 8003cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	028a      	lsls	r2, r1, #10
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4619      	mov	r1, r3
 8003cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cde:	2200      	movs	r2, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	61fa      	str	r2, [r7, #28]
 8003ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce8:	f7fc faca 	bl	8000280 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d0e:	e002      	b.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d10:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3750      	adds	r7, #80	@ 0x50
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	00f42400 	.word	0x00f42400
 8003d2c:	007a1200 	.word	0x007a1200

08003d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b03      	ldr	r3, [pc, #12]	@ (8003d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000000 	.word	0x20000000

08003d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d4c:	f7ff fff0 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4903      	ldr	r1, [pc, #12]	@ (8003d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	08005c5c 	.word	0x08005c5c

08003d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d74:	f7ff ffdc 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b05      	ldr	r3, [pc, #20]	@ (8003d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	0b5b      	lsrs	r3, r3, #13
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4903      	ldr	r1, [pc, #12]	@ (8003d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40023800 	.word	0x40023800
 8003d94:	08005c5c 	.word	0x08005c5c

08003d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e042      	b.n	8003e30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fd fa14 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2224      	movs	r2, #36	@ 0x24
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fa09 	bl	80041f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	@ 0x28
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d175      	bne.n	8003f44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_UART_Transmit+0x2c>
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e06e      	b.n	8003f46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2221      	movs	r2, #33	@ 0x21
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e76:	f7fd fbdb 	bl	8001630 <HAL_GetTick>
 8003e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	88fa      	ldrh	r2, [r7, #6]
 8003e80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	88fa      	ldrh	r2, [r7, #6]
 8003e86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e90:	d108      	bne.n	8003ea4 <HAL_UART_Transmit+0x6c>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	e003      	b.n	8003eac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eac:	e02e      	b.n	8003f0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2180      	movs	r1, #128	@ 0x80
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f8df 	bl	800407c <UART_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e03a      	b.n	8003f46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10b      	bne.n	8003eee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	3302      	adds	r3, #2
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e007      	b.n	8003efe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	3301      	adds	r3, #1
 8003efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1cb      	bne.n	8003eae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2140      	movs	r1, #64	@ 0x40
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f8ab 	bl	800407c <UART_WaitOnFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e006      	b.n	8003f46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
  }
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b08a      	sub	sp, #40	@ 0x28
 8003f52:	af02      	add	r7, sp, #8
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	f040 8081 	bne.w	8004072 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_UART_Receive+0x2e>
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e079      	b.n	8004074 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2222      	movs	r2, #34	@ 0x22
 8003f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f94:	f7fd fb4c 	bl	8001630 <HAL_GetTick>
 8003f98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	88fa      	ldrh	r2, [r7, #6]
 8003f9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fae:	d108      	bne.n	8003fc2 <HAL_UART_Receive+0x74>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d104      	bne.n	8003fc2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	e003      	b.n	8003fca <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003fca:	e047      	b.n	800405c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2120      	movs	r1, #32
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f850 	bl	800407c <UART_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e042      	b.n	8004074 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10c      	bne.n	800400e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004000:	b29a      	uxth	r2, r3
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	3302      	adds	r3, #2
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	e01f      	b.n	800404e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004016:	d007      	beq.n	8004028 <HAL_UART_Receive+0xda>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_UART_Receive+0xe8>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	e008      	b.n	8004048 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004042:	b2da      	uxtb	r2, r3
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	3301      	adds	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1b2      	bne.n	8003fcc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	e000      	b.n	8004074 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004072:	2302      	movs	r3, #2
  }
}
 8004074:	4618      	mov	r0, r3
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408c:	e03b      	b.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004094:	d037      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004096:	f7fd facb 	bl	8001630 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <UART_WaitOnFlagUntilTimeout+0x30>
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e03a      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d023      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b80      	cmp	r3, #128	@ 0x80
 80040c2:	d020      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b40      	cmp	r3, #64	@ 0x40
 80040c8:	d01d      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d116      	bne.n	8004106 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f81d 	bl	800412e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2208      	movs	r2, #8
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e00f      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	429a      	cmp	r2, r3
 8004114:	bf0c      	ite	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	2300      	movne	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	429a      	cmp	r2, r3
 8004122:	d0b4      	beq.n	800408e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800412e:	b480      	push	{r7}
 8004130:	b095      	sub	sp, #84	@ 0x54
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800414c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	330c      	adds	r3, #12
 8004154:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004156:	643a      	str	r2, [r7, #64]	@ 0x40
 8004158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800415c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e5      	bne.n	8004136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	61fb      	str	r3, [r7, #28]
   return(result);
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3314      	adds	r3, #20
 8004188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800418a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800418c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e5      	bne.n	800416a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d119      	bne.n	80041da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	e853 3f00 	ldrex	r3, [r3]
 80041b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f023 0310 	bic.w	r3, r3, #16
 80041bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	330c      	adds	r3, #12
 80041c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041c6:	61ba      	str	r2, [r7, #24]
 80041c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6979      	ldr	r1, [r7, #20]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	613b      	str	r3, [r7, #16]
   return(result);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e5      	bne.n	80041a6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041e8:	bf00      	nop
 80041ea:	3754      	adds	r7, #84	@ 0x54
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f8:	b0c0      	sub	sp, #256	@ 0x100
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004210:	68d9      	ldr	r1, [r3, #12]
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	ea40 0301 	orr.w	r3, r0, r1
 800421c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	431a      	orrs	r2, r3
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	431a      	orrs	r2, r3
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800424c:	f021 010c 	bic.w	r1, r1, #12
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800425a:	430b      	orrs	r3, r1
 800425c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426e:	6999      	ldr	r1, [r3, #24]
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	ea40 0301 	orr.w	r3, r0, r1
 800427a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b8f      	ldr	r3, [pc, #572]	@ (80044c0 <UART_SetConfig+0x2cc>)
 8004284:	429a      	cmp	r2, r3
 8004286:	d005      	beq.n	8004294 <UART_SetConfig+0xa0>
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b8d      	ldr	r3, [pc, #564]	@ (80044c4 <UART_SetConfig+0x2d0>)
 8004290:	429a      	cmp	r2, r3
 8004292:	d104      	bne.n	800429e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004294:	f7ff fd6c 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 8004298:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800429c:	e003      	b.n	80042a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800429e:	f7ff fd53 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 80042a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042b0:	f040 810c 	bne.w	80044cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042c6:	4622      	mov	r2, r4
 80042c8:	462b      	mov	r3, r5
 80042ca:	1891      	adds	r1, r2, r2
 80042cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042ce:	415b      	adcs	r3, r3
 80042d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042d6:	4621      	mov	r1, r4
 80042d8:	eb12 0801 	adds.w	r8, r2, r1
 80042dc:	4629      	mov	r1, r5
 80042de:	eb43 0901 	adc.w	r9, r3, r1
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042f6:	4690      	mov	r8, r2
 80042f8:	4699      	mov	r9, r3
 80042fa:	4623      	mov	r3, r4
 80042fc:	eb18 0303 	adds.w	r3, r8, r3
 8004300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004304:	462b      	mov	r3, r5
 8004306:	eb49 0303 	adc.w	r3, r9, r3
 800430a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800431a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800431e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004322:	460b      	mov	r3, r1
 8004324:	18db      	adds	r3, r3, r3
 8004326:	653b      	str	r3, [r7, #80]	@ 0x50
 8004328:	4613      	mov	r3, r2
 800432a:	eb42 0303 	adc.w	r3, r2, r3
 800432e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004338:	f7fb ffa2 	bl	8000280 <__aeabi_uldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4b61      	ldr	r3, [pc, #388]	@ (80044c8 <UART_SetConfig+0x2d4>)
 8004342:	fba3 2302 	umull	r2, r3, r3, r2
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	011c      	lsls	r4, r3, #4
 800434a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004354:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800435c:	4642      	mov	r2, r8
 800435e:	464b      	mov	r3, r9
 8004360:	1891      	adds	r1, r2, r2
 8004362:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004364:	415b      	adcs	r3, r3
 8004366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800436c:	4641      	mov	r1, r8
 800436e:	eb12 0a01 	adds.w	sl, r2, r1
 8004372:	4649      	mov	r1, r9
 8004374:	eb43 0b01 	adc.w	fp, r3, r1
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800438c:	4692      	mov	sl, r2
 800438e:	469b      	mov	fp, r3
 8004390:	4643      	mov	r3, r8
 8004392:	eb1a 0303 	adds.w	r3, sl, r3
 8004396:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800439a:	464b      	mov	r3, r9
 800439c:	eb4b 0303 	adc.w	r3, fp, r3
 80043a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043b8:	460b      	mov	r3, r1
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043be:	4613      	mov	r3, r2
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043ce:	f7fb ff57 	bl	8000280 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	4b3b      	ldr	r3, [pc, #236]	@ (80044c8 <UART_SetConfig+0x2d4>)
 80043da:	fba3 2301 	umull	r2, r3, r3, r1
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2264      	movs	r2, #100	@ 0x64
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	1acb      	subs	r3, r1, r3
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043ee:	4b36      	ldr	r3, [pc, #216]	@ (80044c8 <UART_SetConfig+0x2d4>)
 80043f0:	fba3 2302 	umull	r2, r3, r3, r2
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043fc:	441c      	add	r4, r3
 80043fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004402:	2200      	movs	r2, #0
 8004404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004408:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800440c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004410:	4642      	mov	r2, r8
 8004412:	464b      	mov	r3, r9
 8004414:	1891      	adds	r1, r2, r2
 8004416:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004418:	415b      	adcs	r3, r3
 800441a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800441c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004420:	4641      	mov	r1, r8
 8004422:	1851      	adds	r1, r2, r1
 8004424:	6339      	str	r1, [r7, #48]	@ 0x30
 8004426:	4649      	mov	r1, r9
 8004428:	414b      	adcs	r3, r1
 800442a:	637b      	str	r3, [r7, #52]	@ 0x34
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004438:	4659      	mov	r1, fp
 800443a:	00cb      	lsls	r3, r1, #3
 800443c:	4651      	mov	r1, sl
 800443e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004442:	4651      	mov	r1, sl
 8004444:	00ca      	lsls	r2, r1, #3
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	4603      	mov	r3, r0
 800444c:	4642      	mov	r2, r8
 800444e:	189b      	adds	r3, r3, r2
 8004450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004454:	464b      	mov	r3, r9
 8004456:	460a      	mov	r2, r1
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800446c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004474:	460b      	mov	r3, r1
 8004476:	18db      	adds	r3, r3, r3
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800447a:	4613      	mov	r3, r2
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800448a:	f7fb fef9 	bl	8000280 <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4b0d      	ldr	r3, [pc, #52]	@ (80044c8 <UART_SetConfig+0x2d4>)
 8004494:	fba3 1302 	umull	r1, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2164      	movs	r1, #100	@ 0x64
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	3332      	adds	r3, #50	@ 0x32
 80044a6:	4a08      	ldr	r2, [pc, #32]	@ (80044c8 <UART_SetConfig+0x2d4>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f003 0207 	and.w	r2, r3, #7
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4422      	add	r2, r4
 80044ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044bc:	e106      	b.n	80046cc <UART_SetConfig+0x4d8>
 80044be:	bf00      	nop
 80044c0:	40011000 	.word	0x40011000
 80044c4:	40011400 	.word	0x40011400
 80044c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044de:	4642      	mov	r2, r8
 80044e0:	464b      	mov	r3, r9
 80044e2:	1891      	adds	r1, r2, r2
 80044e4:	6239      	str	r1, [r7, #32]
 80044e6:	415b      	adcs	r3, r3
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044ee:	4641      	mov	r1, r8
 80044f0:	1854      	adds	r4, r2, r1
 80044f2:	4649      	mov	r1, r9
 80044f4:	eb43 0501 	adc.w	r5, r3, r1
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	00eb      	lsls	r3, r5, #3
 8004502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004506:	00e2      	lsls	r2, r4, #3
 8004508:	4614      	mov	r4, r2
 800450a:	461d      	mov	r5, r3
 800450c:	4643      	mov	r3, r8
 800450e:	18e3      	adds	r3, r4, r3
 8004510:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004514:	464b      	mov	r3, r9
 8004516:	eb45 0303 	adc.w	r3, r5, r3
 800451a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800452a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800453a:	4629      	mov	r1, r5
 800453c:	008b      	lsls	r3, r1, #2
 800453e:	4621      	mov	r1, r4
 8004540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004544:	4621      	mov	r1, r4
 8004546:	008a      	lsls	r2, r1, #2
 8004548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800454c:	f7fb fe98 	bl	8000280 <__aeabi_uldivmod>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4b60      	ldr	r3, [pc, #384]	@ (80046d8 <UART_SetConfig+0x4e4>)
 8004556:	fba3 2302 	umull	r2, r3, r3, r2
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	011c      	lsls	r4, r3, #4
 800455e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004562:	2200      	movs	r2, #0
 8004564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004568:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800456c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	1891      	adds	r1, r2, r2
 8004576:	61b9      	str	r1, [r7, #24]
 8004578:	415b      	adcs	r3, r3
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004580:	4641      	mov	r1, r8
 8004582:	1851      	adds	r1, r2, r1
 8004584:	6139      	str	r1, [r7, #16]
 8004586:	4649      	mov	r1, r9
 8004588:	414b      	adcs	r3, r1
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004598:	4659      	mov	r1, fp
 800459a:	00cb      	lsls	r3, r1, #3
 800459c:	4651      	mov	r1, sl
 800459e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a2:	4651      	mov	r1, sl
 80045a4:	00ca      	lsls	r2, r1, #3
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	4642      	mov	r2, r8
 80045ae:	189b      	adds	r3, r3, r2
 80045b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045b4:	464b      	mov	r3, r9
 80045b6:	460a      	mov	r2, r1
 80045b8:	eb42 0303 	adc.w	r3, r2, r3
 80045bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045d8:	4649      	mov	r1, r9
 80045da:	008b      	lsls	r3, r1, #2
 80045dc:	4641      	mov	r1, r8
 80045de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e2:	4641      	mov	r1, r8
 80045e4:	008a      	lsls	r2, r1, #2
 80045e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045ea:	f7fb fe49 	bl	8000280 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	4b38      	ldr	r3, [pc, #224]	@ (80046d8 <UART_SetConfig+0x4e4>)
 80045f6:	fba3 2301 	umull	r2, r3, r3, r1
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2264      	movs	r2, #100	@ 0x64
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	1acb      	subs	r3, r1, r3
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	3332      	adds	r3, #50	@ 0x32
 8004608:	4a33      	ldr	r2, [pc, #204]	@ (80046d8 <UART_SetConfig+0x4e4>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004614:	441c      	add	r4, r3
 8004616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800461a:	2200      	movs	r2, #0
 800461c:	673b      	str	r3, [r7, #112]	@ 0x70
 800461e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004620:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004624:	4642      	mov	r2, r8
 8004626:	464b      	mov	r3, r9
 8004628:	1891      	adds	r1, r2, r2
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	415b      	adcs	r3, r3
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004634:	4641      	mov	r1, r8
 8004636:	1851      	adds	r1, r2, r1
 8004638:	6039      	str	r1, [r7, #0]
 800463a:	4649      	mov	r1, r9
 800463c:	414b      	adcs	r3, r1
 800463e:	607b      	str	r3, [r7, #4]
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800464c:	4659      	mov	r1, fp
 800464e:	00cb      	lsls	r3, r1, #3
 8004650:	4651      	mov	r1, sl
 8004652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004656:	4651      	mov	r1, sl
 8004658:	00ca      	lsls	r2, r1, #3
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	4603      	mov	r3, r0
 8004660:	4642      	mov	r2, r8
 8004662:	189b      	adds	r3, r3, r2
 8004664:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004666:	464b      	mov	r3, r9
 8004668:	460a      	mov	r2, r1
 800466a:	eb42 0303 	adc.w	r3, r2, r3
 800466e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	663b      	str	r3, [r7, #96]	@ 0x60
 800467a:	667a      	str	r2, [r7, #100]	@ 0x64
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004688:	4649      	mov	r1, r9
 800468a:	008b      	lsls	r3, r1, #2
 800468c:	4641      	mov	r1, r8
 800468e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004692:	4641      	mov	r1, r8
 8004694:	008a      	lsls	r2, r1, #2
 8004696:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800469a:	f7fb fdf1 	bl	8000280 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <UART_SetConfig+0x4e4>)
 80046a4:	fba3 1302 	umull	r1, r3, r3, r2
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	2164      	movs	r1, #100	@ 0x64
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	3332      	adds	r3, #50	@ 0x32
 80046b6:	4a08      	ldr	r2, [pc, #32]	@ (80046d8 <UART_SetConfig+0x4e4>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	f003 020f 	and.w	r2, r3, #15
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4422      	add	r2, r4
 80046ca:	609a      	str	r2, [r3, #8]
}
 80046cc:	bf00      	nop
 80046ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046d2:	46bd      	mov	sp, r7
 80046d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046d8:	51eb851f 	.word	0x51eb851f

080046dc <std>:
 80046dc:	2300      	movs	r3, #0
 80046de:	b510      	push	{r4, lr}
 80046e0:	4604      	mov	r4, r0
 80046e2:	e9c0 3300 	strd	r3, r3, [r0]
 80046e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046ea:	6083      	str	r3, [r0, #8]
 80046ec:	8181      	strh	r1, [r0, #12]
 80046ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80046f0:	81c2      	strh	r2, [r0, #14]
 80046f2:	6183      	str	r3, [r0, #24]
 80046f4:	4619      	mov	r1, r3
 80046f6:	2208      	movs	r2, #8
 80046f8:	305c      	adds	r0, #92	@ 0x5c
 80046fa:	f000 f94c 	bl	8004996 <memset>
 80046fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004734 <std+0x58>)
 8004700:	6263      	str	r3, [r4, #36]	@ 0x24
 8004702:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <std+0x5c>)
 8004704:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004706:	4b0d      	ldr	r3, [pc, #52]	@ (800473c <std+0x60>)
 8004708:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800470a:	4b0d      	ldr	r3, [pc, #52]	@ (8004740 <std+0x64>)
 800470c:	6323      	str	r3, [r4, #48]	@ 0x30
 800470e:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <std+0x68>)
 8004710:	6224      	str	r4, [r4, #32]
 8004712:	429c      	cmp	r4, r3
 8004714:	d006      	beq.n	8004724 <std+0x48>
 8004716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800471a:	4294      	cmp	r4, r2
 800471c:	d002      	beq.n	8004724 <std+0x48>
 800471e:	33d0      	adds	r3, #208	@ 0xd0
 8004720:	429c      	cmp	r4, r3
 8004722:	d105      	bne.n	8004730 <std+0x54>
 8004724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472c:	f000 ba1e 	b.w	8004b6c <__retarget_lock_init_recursive>
 8004730:	bd10      	pop	{r4, pc}
 8004732:	bf00      	nop
 8004734:	08004911 	.word	0x08004911
 8004738:	08004933 	.word	0x08004933
 800473c:	0800496b 	.word	0x0800496b
 8004740:	0800498f 	.word	0x0800498f
 8004744:	20000244 	.word	0x20000244

08004748 <stdio_exit_handler>:
 8004748:	4a02      	ldr	r2, [pc, #8]	@ (8004754 <stdio_exit_handler+0xc>)
 800474a:	4903      	ldr	r1, [pc, #12]	@ (8004758 <stdio_exit_handler+0x10>)
 800474c:	4803      	ldr	r0, [pc, #12]	@ (800475c <stdio_exit_handler+0x14>)
 800474e:	f000 b869 	b.w	8004824 <_fwalk_sglue>
 8004752:	bf00      	nop
 8004754:	2000000c 	.word	0x2000000c
 8004758:	08005491 	.word	0x08005491
 800475c:	2000001c 	.word	0x2000001c

08004760 <cleanup_stdio>:
 8004760:	6841      	ldr	r1, [r0, #4]
 8004762:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <cleanup_stdio+0x34>)
 8004764:	4299      	cmp	r1, r3
 8004766:	b510      	push	{r4, lr}
 8004768:	4604      	mov	r4, r0
 800476a:	d001      	beq.n	8004770 <cleanup_stdio+0x10>
 800476c:	f000 fe90 	bl	8005490 <_fflush_r>
 8004770:	68a1      	ldr	r1, [r4, #8]
 8004772:	4b09      	ldr	r3, [pc, #36]	@ (8004798 <cleanup_stdio+0x38>)
 8004774:	4299      	cmp	r1, r3
 8004776:	d002      	beq.n	800477e <cleanup_stdio+0x1e>
 8004778:	4620      	mov	r0, r4
 800477a:	f000 fe89 	bl	8005490 <_fflush_r>
 800477e:	68e1      	ldr	r1, [r4, #12]
 8004780:	4b06      	ldr	r3, [pc, #24]	@ (800479c <cleanup_stdio+0x3c>)
 8004782:	4299      	cmp	r1, r3
 8004784:	d004      	beq.n	8004790 <cleanup_stdio+0x30>
 8004786:	4620      	mov	r0, r4
 8004788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800478c:	f000 be80 	b.w	8005490 <_fflush_r>
 8004790:	bd10      	pop	{r4, pc}
 8004792:	bf00      	nop
 8004794:	20000244 	.word	0x20000244
 8004798:	200002ac 	.word	0x200002ac
 800479c:	20000314 	.word	0x20000314

080047a0 <global_stdio_init.part.0>:
 80047a0:	b510      	push	{r4, lr}
 80047a2:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <global_stdio_init.part.0+0x30>)
 80047a4:	4c0b      	ldr	r4, [pc, #44]	@ (80047d4 <global_stdio_init.part.0+0x34>)
 80047a6:	4a0c      	ldr	r2, [pc, #48]	@ (80047d8 <global_stdio_init.part.0+0x38>)
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	4620      	mov	r0, r4
 80047ac:	2200      	movs	r2, #0
 80047ae:	2104      	movs	r1, #4
 80047b0:	f7ff ff94 	bl	80046dc <std>
 80047b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047b8:	2201      	movs	r2, #1
 80047ba:	2109      	movs	r1, #9
 80047bc:	f7ff ff8e 	bl	80046dc <std>
 80047c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047c4:	2202      	movs	r2, #2
 80047c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ca:	2112      	movs	r1, #18
 80047cc:	f7ff bf86 	b.w	80046dc <std>
 80047d0:	2000037c 	.word	0x2000037c
 80047d4:	20000244 	.word	0x20000244
 80047d8:	08004749 	.word	0x08004749

080047dc <__sfp_lock_acquire>:
 80047dc:	4801      	ldr	r0, [pc, #4]	@ (80047e4 <__sfp_lock_acquire+0x8>)
 80047de:	f000 b9c6 	b.w	8004b6e <__retarget_lock_acquire_recursive>
 80047e2:	bf00      	nop
 80047e4:	20000385 	.word	0x20000385

080047e8 <__sfp_lock_release>:
 80047e8:	4801      	ldr	r0, [pc, #4]	@ (80047f0 <__sfp_lock_release+0x8>)
 80047ea:	f000 b9c1 	b.w	8004b70 <__retarget_lock_release_recursive>
 80047ee:	bf00      	nop
 80047f0:	20000385 	.word	0x20000385

080047f4 <__sinit>:
 80047f4:	b510      	push	{r4, lr}
 80047f6:	4604      	mov	r4, r0
 80047f8:	f7ff fff0 	bl	80047dc <__sfp_lock_acquire>
 80047fc:	6a23      	ldr	r3, [r4, #32]
 80047fe:	b11b      	cbz	r3, 8004808 <__sinit+0x14>
 8004800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004804:	f7ff bff0 	b.w	80047e8 <__sfp_lock_release>
 8004808:	4b04      	ldr	r3, [pc, #16]	@ (800481c <__sinit+0x28>)
 800480a:	6223      	str	r3, [r4, #32]
 800480c:	4b04      	ldr	r3, [pc, #16]	@ (8004820 <__sinit+0x2c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f5      	bne.n	8004800 <__sinit+0xc>
 8004814:	f7ff ffc4 	bl	80047a0 <global_stdio_init.part.0>
 8004818:	e7f2      	b.n	8004800 <__sinit+0xc>
 800481a:	bf00      	nop
 800481c:	08004761 	.word	0x08004761
 8004820:	2000037c 	.word	0x2000037c

08004824 <_fwalk_sglue>:
 8004824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004828:	4607      	mov	r7, r0
 800482a:	4688      	mov	r8, r1
 800482c:	4614      	mov	r4, r2
 800482e:	2600      	movs	r6, #0
 8004830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004834:	f1b9 0901 	subs.w	r9, r9, #1
 8004838:	d505      	bpl.n	8004846 <_fwalk_sglue+0x22>
 800483a:	6824      	ldr	r4, [r4, #0]
 800483c:	2c00      	cmp	r4, #0
 800483e:	d1f7      	bne.n	8004830 <_fwalk_sglue+0xc>
 8004840:	4630      	mov	r0, r6
 8004842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004846:	89ab      	ldrh	r3, [r5, #12]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d907      	bls.n	800485c <_fwalk_sglue+0x38>
 800484c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004850:	3301      	adds	r3, #1
 8004852:	d003      	beq.n	800485c <_fwalk_sglue+0x38>
 8004854:	4629      	mov	r1, r5
 8004856:	4638      	mov	r0, r7
 8004858:	47c0      	blx	r8
 800485a:	4306      	orrs	r6, r0
 800485c:	3568      	adds	r5, #104	@ 0x68
 800485e:	e7e9      	b.n	8004834 <_fwalk_sglue+0x10>

08004860 <sniprintf>:
 8004860:	b40c      	push	{r2, r3}
 8004862:	b530      	push	{r4, r5, lr}
 8004864:	4b18      	ldr	r3, [pc, #96]	@ (80048c8 <sniprintf+0x68>)
 8004866:	1e0c      	subs	r4, r1, #0
 8004868:	681d      	ldr	r5, [r3, #0]
 800486a:	b09d      	sub	sp, #116	@ 0x74
 800486c:	da08      	bge.n	8004880 <sniprintf+0x20>
 800486e:	238b      	movs	r3, #139	@ 0x8b
 8004870:	602b      	str	r3, [r5, #0]
 8004872:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004876:	b01d      	add	sp, #116	@ 0x74
 8004878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800487c:	b002      	add	sp, #8
 800487e:	4770      	bx	lr
 8004880:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004884:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800488e:	bf14      	ite	ne
 8004890:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004894:	4623      	moveq	r3, r4
 8004896:	9304      	str	r3, [sp, #16]
 8004898:	9307      	str	r3, [sp, #28]
 800489a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800489e:	9002      	str	r0, [sp, #8]
 80048a0:	9006      	str	r0, [sp, #24]
 80048a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80048a6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80048a8:	ab21      	add	r3, sp, #132	@ 0x84
 80048aa:	a902      	add	r1, sp, #8
 80048ac:	4628      	mov	r0, r5
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	f000 fae2 	bl	8004e78 <_svfiprintf_r>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	bfbc      	itt	lt
 80048b8:	238b      	movlt	r3, #139	@ 0x8b
 80048ba:	602b      	strlt	r3, [r5, #0]
 80048bc:	2c00      	cmp	r4, #0
 80048be:	d0da      	beq.n	8004876 <sniprintf+0x16>
 80048c0:	9b02      	ldr	r3, [sp, #8]
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e7d6      	b.n	8004876 <sniprintf+0x16>
 80048c8:	20000018 	.word	0x20000018

080048cc <siprintf>:
 80048cc:	b40e      	push	{r1, r2, r3}
 80048ce:	b510      	push	{r4, lr}
 80048d0:	b09d      	sub	sp, #116	@ 0x74
 80048d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80048d4:	9002      	str	r0, [sp, #8]
 80048d6:	9006      	str	r0, [sp, #24]
 80048d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048dc:	480a      	ldr	r0, [pc, #40]	@ (8004908 <siprintf+0x3c>)
 80048de:	9107      	str	r1, [sp, #28]
 80048e0:	9104      	str	r1, [sp, #16]
 80048e2:	490a      	ldr	r1, [pc, #40]	@ (800490c <siprintf+0x40>)
 80048e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048e8:	9105      	str	r1, [sp, #20]
 80048ea:	2400      	movs	r4, #0
 80048ec:	a902      	add	r1, sp, #8
 80048ee:	6800      	ldr	r0, [r0, #0]
 80048f0:	9301      	str	r3, [sp, #4]
 80048f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80048f4:	f000 fac0 	bl	8004e78 <_svfiprintf_r>
 80048f8:	9b02      	ldr	r3, [sp, #8]
 80048fa:	701c      	strb	r4, [r3, #0]
 80048fc:	b01d      	add	sp, #116	@ 0x74
 80048fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004902:	b003      	add	sp, #12
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000018 	.word	0x20000018
 800490c:	ffff0208 	.word	0xffff0208

08004910 <__sread>:
 8004910:	b510      	push	{r4, lr}
 8004912:	460c      	mov	r4, r1
 8004914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004918:	f000 f8da 	bl	8004ad0 <_read_r>
 800491c:	2800      	cmp	r0, #0
 800491e:	bfab      	itete	ge
 8004920:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004922:	89a3      	ldrhlt	r3, [r4, #12]
 8004924:	181b      	addge	r3, r3, r0
 8004926:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800492a:	bfac      	ite	ge
 800492c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800492e:	81a3      	strhlt	r3, [r4, #12]
 8004930:	bd10      	pop	{r4, pc}

08004932 <__swrite>:
 8004932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004936:	461f      	mov	r7, r3
 8004938:	898b      	ldrh	r3, [r1, #12]
 800493a:	05db      	lsls	r3, r3, #23
 800493c:	4605      	mov	r5, r0
 800493e:	460c      	mov	r4, r1
 8004940:	4616      	mov	r6, r2
 8004942:	d505      	bpl.n	8004950 <__swrite+0x1e>
 8004944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004948:	2302      	movs	r3, #2
 800494a:	2200      	movs	r2, #0
 800494c:	f000 f8ae 	bl	8004aac <_lseek_r>
 8004950:	89a3      	ldrh	r3, [r4, #12]
 8004952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004956:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800495a:	81a3      	strh	r3, [r4, #12]
 800495c:	4632      	mov	r2, r6
 800495e:	463b      	mov	r3, r7
 8004960:	4628      	mov	r0, r5
 8004962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004966:	f000 b8c5 	b.w	8004af4 <_write_r>

0800496a <__sseek>:
 800496a:	b510      	push	{r4, lr}
 800496c:	460c      	mov	r4, r1
 800496e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004972:	f000 f89b 	bl	8004aac <_lseek_r>
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	bf15      	itete	ne
 800497c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800497e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004982:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004986:	81a3      	strheq	r3, [r4, #12]
 8004988:	bf18      	it	ne
 800498a:	81a3      	strhne	r3, [r4, #12]
 800498c:	bd10      	pop	{r4, pc}

0800498e <__sclose>:
 800498e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004992:	f000 b87b 	b.w	8004a8c <_close_r>

08004996 <memset>:
 8004996:	4402      	add	r2, r0
 8004998:	4603      	mov	r3, r0
 800499a:	4293      	cmp	r3, r2
 800499c:	d100      	bne.n	80049a0 <memset+0xa>
 800499e:	4770      	bx	lr
 80049a0:	f803 1b01 	strb.w	r1, [r3], #1
 80049a4:	e7f9      	b.n	800499a <memset+0x4>
	...

080049a8 <strtok>:
 80049a8:	4b16      	ldr	r3, [pc, #88]	@ (8004a04 <strtok+0x5c>)
 80049aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ae:	681f      	ldr	r7, [r3, #0]
 80049b0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80049b2:	4605      	mov	r5, r0
 80049b4:	460e      	mov	r6, r1
 80049b6:	b9ec      	cbnz	r4, 80049f4 <strtok+0x4c>
 80049b8:	2050      	movs	r0, #80	@ 0x50
 80049ba:	f000 f94b 	bl	8004c54 <malloc>
 80049be:	4602      	mov	r2, r0
 80049c0:	6478      	str	r0, [r7, #68]	@ 0x44
 80049c2:	b920      	cbnz	r0, 80049ce <strtok+0x26>
 80049c4:	4b10      	ldr	r3, [pc, #64]	@ (8004a08 <strtok+0x60>)
 80049c6:	4811      	ldr	r0, [pc, #68]	@ (8004a0c <strtok+0x64>)
 80049c8:	215b      	movs	r1, #91	@ 0x5b
 80049ca:	f000 f8db 	bl	8004b84 <__assert_func>
 80049ce:	e9c0 4400 	strd	r4, r4, [r0]
 80049d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80049d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80049da:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80049de:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80049e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80049e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80049ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80049ee:	6184      	str	r4, [r0, #24]
 80049f0:	7704      	strb	r4, [r0, #28]
 80049f2:	6244      	str	r4, [r0, #36]	@ 0x24
 80049f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049f6:	4631      	mov	r1, r6
 80049f8:	4628      	mov	r0, r5
 80049fa:	2301      	movs	r3, #1
 80049fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a00:	f000 b806 	b.w	8004a10 <__strtok_r>
 8004a04:	20000018 	.word	0x20000018
 8004a08:	08005c6c 	.word	0x08005c6c
 8004a0c:	08005c83 	.word	0x08005c83

08004a10 <__strtok_r>:
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	4604      	mov	r4, r0
 8004a14:	b908      	cbnz	r0, 8004a1a <__strtok_r+0xa>
 8004a16:	6814      	ldr	r4, [r2, #0]
 8004a18:	b144      	cbz	r4, 8004a2c <__strtok_r+0x1c>
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004a20:	460f      	mov	r7, r1
 8004a22:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004a26:	b91e      	cbnz	r6, 8004a30 <__strtok_r+0x20>
 8004a28:	b965      	cbnz	r5, 8004a44 <__strtok_r+0x34>
 8004a2a:	6015      	str	r5, [r2, #0]
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e005      	b.n	8004a3c <__strtok_r+0x2c>
 8004a30:	42b5      	cmp	r5, r6
 8004a32:	d1f6      	bne.n	8004a22 <__strtok_r+0x12>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f0      	bne.n	8004a1a <__strtok_r+0xa>
 8004a38:	6014      	str	r4, [r2, #0]
 8004a3a:	7003      	strb	r3, [r0, #0]
 8004a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a3e:	461c      	mov	r4, r3
 8004a40:	e00c      	b.n	8004a5c <__strtok_r+0x4c>
 8004a42:	b91d      	cbnz	r5, 8004a4c <__strtok_r+0x3c>
 8004a44:	4627      	mov	r7, r4
 8004a46:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004a4a:	460e      	mov	r6, r1
 8004a4c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004a50:	42ab      	cmp	r3, r5
 8004a52:	d1f6      	bne.n	8004a42 <__strtok_r+0x32>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f2      	beq.n	8004a3e <__strtok_r+0x2e>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	703b      	strb	r3, [r7, #0]
 8004a5c:	6014      	str	r4, [r2, #0]
 8004a5e:	e7ed      	b.n	8004a3c <__strtok_r+0x2c>

08004a60 <strstr>:
 8004a60:	780a      	ldrb	r2, [r1, #0]
 8004a62:	b570      	push	{r4, r5, r6, lr}
 8004a64:	b96a      	cbnz	r2, 8004a82 <strstr+0x22>
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d109      	bne.n	8004a80 <strstr+0x20>
 8004a6c:	460c      	mov	r4, r1
 8004a6e:	4605      	mov	r5, r0
 8004a70:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f6      	beq.n	8004a66 <strstr+0x6>
 8004a78:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004a7c:	429e      	cmp	r6, r3
 8004a7e:	d0f7      	beq.n	8004a70 <strstr+0x10>
 8004a80:	3001      	adds	r0, #1
 8004a82:	7803      	ldrb	r3, [r0, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ef      	bne.n	8004a68 <strstr+0x8>
 8004a88:	4618      	mov	r0, r3
 8004a8a:	e7ec      	b.n	8004a66 <strstr+0x6>

08004a8c <_close_r>:
 8004a8c:	b538      	push	{r3, r4, r5, lr}
 8004a8e:	4d06      	ldr	r5, [pc, #24]	@ (8004aa8 <_close_r+0x1c>)
 8004a90:	2300      	movs	r3, #0
 8004a92:	4604      	mov	r4, r0
 8004a94:	4608      	mov	r0, r1
 8004a96:	602b      	str	r3, [r5, #0]
 8004a98:	f7fc fcbe 	bl	8001418 <_close>
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	d102      	bne.n	8004aa6 <_close_r+0x1a>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	b103      	cbz	r3, 8004aa6 <_close_r+0x1a>
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}
 8004aa8:	20000380 	.word	0x20000380

08004aac <_lseek_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4d07      	ldr	r5, [pc, #28]	@ (8004acc <_lseek_r+0x20>)
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	4608      	mov	r0, r1
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	602a      	str	r2, [r5, #0]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f7fc fcd3 	bl	8001466 <_lseek>
 8004ac0:	1c43      	adds	r3, r0, #1
 8004ac2:	d102      	bne.n	8004aca <_lseek_r+0x1e>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	b103      	cbz	r3, 8004aca <_lseek_r+0x1e>
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	bd38      	pop	{r3, r4, r5, pc}
 8004acc:	20000380 	.word	0x20000380

08004ad0 <_read_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4d07      	ldr	r5, [pc, #28]	@ (8004af0 <_read_r+0x20>)
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	4608      	mov	r0, r1
 8004ad8:	4611      	mov	r1, r2
 8004ada:	2200      	movs	r2, #0
 8004adc:	602a      	str	r2, [r5, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f7fc fc61 	bl	80013a6 <_read>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d102      	bne.n	8004aee <_read_r+0x1e>
 8004ae8:	682b      	ldr	r3, [r5, #0]
 8004aea:	b103      	cbz	r3, 8004aee <_read_r+0x1e>
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	20000380 	.word	0x20000380

08004af4 <_write_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d07      	ldr	r5, [pc, #28]	@ (8004b14 <_write_r+0x20>)
 8004af8:	4604      	mov	r4, r0
 8004afa:	4608      	mov	r0, r1
 8004afc:	4611      	mov	r1, r2
 8004afe:	2200      	movs	r2, #0
 8004b00:	602a      	str	r2, [r5, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f7fc fc6c 	bl	80013e0 <_write>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_write_r+0x1e>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_write_r+0x1e>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	20000380 	.word	0x20000380

08004b18 <__errno>:
 8004b18:	4b01      	ldr	r3, [pc, #4]	@ (8004b20 <__errno+0x8>)
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000018 	.word	0x20000018

08004b24 <__libc_init_array>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	4d0d      	ldr	r5, [pc, #52]	@ (8004b5c <__libc_init_array+0x38>)
 8004b28:	4c0d      	ldr	r4, [pc, #52]	@ (8004b60 <__libc_init_array+0x3c>)
 8004b2a:	1b64      	subs	r4, r4, r5
 8004b2c:	10a4      	asrs	r4, r4, #2
 8004b2e:	2600      	movs	r6, #0
 8004b30:	42a6      	cmp	r6, r4
 8004b32:	d109      	bne.n	8004b48 <__libc_init_array+0x24>
 8004b34:	4d0b      	ldr	r5, [pc, #44]	@ (8004b64 <__libc_init_array+0x40>)
 8004b36:	4c0c      	ldr	r4, [pc, #48]	@ (8004b68 <__libc_init_array+0x44>)
 8004b38:	f000 fff6 	bl	8005b28 <_init>
 8004b3c:	1b64      	subs	r4, r4, r5
 8004b3e:	10a4      	asrs	r4, r4, #2
 8004b40:	2600      	movs	r6, #0
 8004b42:	42a6      	cmp	r6, r4
 8004b44:	d105      	bne.n	8004b52 <__libc_init_array+0x2e>
 8004b46:	bd70      	pop	{r4, r5, r6, pc}
 8004b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4c:	4798      	blx	r3
 8004b4e:	3601      	adds	r6, #1
 8004b50:	e7ee      	b.n	8004b30 <__libc_init_array+0xc>
 8004b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b56:	4798      	blx	r3
 8004b58:	3601      	adds	r6, #1
 8004b5a:	e7f2      	b.n	8004b42 <__libc_init_array+0x1e>
 8004b5c:	08005d54 	.word	0x08005d54
 8004b60:	08005d54 	.word	0x08005d54
 8004b64:	08005d54 	.word	0x08005d54
 8004b68:	08005d58 	.word	0x08005d58

08004b6c <__retarget_lock_init_recursive>:
 8004b6c:	4770      	bx	lr

08004b6e <__retarget_lock_acquire_recursive>:
 8004b6e:	4770      	bx	lr

08004b70 <__retarget_lock_release_recursive>:
 8004b70:	4770      	bx	lr

08004b72 <strcpy>:
 8004b72:	4603      	mov	r3, r0
 8004b74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b78:	f803 2b01 	strb.w	r2, [r3], #1
 8004b7c:	2a00      	cmp	r2, #0
 8004b7e:	d1f9      	bne.n	8004b74 <strcpy+0x2>
 8004b80:	4770      	bx	lr
	...

08004b84 <__assert_func>:
 8004b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b86:	4614      	mov	r4, r2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4b09      	ldr	r3, [pc, #36]	@ (8004bb0 <__assert_func+0x2c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4605      	mov	r5, r0
 8004b90:	68d8      	ldr	r0, [r3, #12]
 8004b92:	b14c      	cbz	r4, 8004ba8 <__assert_func+0x24>
 8004b94:	4b07      	ldr	r3, [pc, #28]	@ (8004bb4 <__assert_func+0x30>)
 8004b96:	9100      	str	r1, [sp, #0]
 8004b98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b9c:	4906      	ldr	r1, [pc, #24]	@ (8004bb8 <__assert_func+0x34>)
 8004b9e:	462b      	mov	r3, r5
 8004ba0:	f000 fc9e 	bl	80054e0 <fiprintf>
 8004ba4:	f000 fce6 	bl	8005574 <abort>
 8004ba8:	4b04      	ldr	r3, [pc, #16]	@ (8004bbc <__assert_func+0x38>)
 8004baa:	461c      	mov	r4, r3
 8004bac:	e7f3      	b.n	8004b96 <__assert_func+0x12>
 8004bae:	bf00      	nop
 8004bb0:	20000018 	.word	0x20000018
 8004bb4:	08005cdd 	.word	0x08005cdd
 8004bb8:	08005cea 	.word	0x08005cea
 8004bbc:	08005d18 	.word	0x08005d18

08004bc0 <_free_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	d041      	beq.n	8004c4c <_free_r+0x8c>
 8004bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bcc:	1f0c      	subs	r4, r1, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bfb8      	it	lt
 8004bd2:	18e4      	addlt	r4, r4, r3
 8004bd4:	f000 f8e8 	bl	8004da8 <__malloc_lock>
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c50 <_free_r+0x90>)
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	b933      	cbnz	r3, 8004bec <_free_r+0x2c>
 8004bde:	6063      	str	r3, [r4, #4]
 8004be0:	6014      	str	r4, [r2, #0]
 8004be2:	4628      	mov	r0, r5
 8004be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004be8:	f000 b8e4 	b.w	8004db4 <__malloc_unlock>
 8004bec:	42a3      	cmp	r3, r4
 8004bee:	d908      	bls.n	8004c02 <_free_r+0x42>
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	1821      	adds	r1, r4, r0
 8004bf4:	428b      	cmp	r3, r1
 8004bf6:	bf01      	itttt	eq
 8004bf8:	6819      	ldreq	r1, [r3, #0]
 8004bfa:	685b      	ldreq	r3, [r3, #4]
 8004bfc:	1809      	addeq	r1, r1, r0
 8004bfe:	6021      	streq	r1, [r4, #0]
 8004c00:	e7ed      	b.n	8004bde <_free_r+0x1e>
 8004c02:	461a      	mov	r2, r3
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	b10b      	cbz	r3, 8004c0c <_free_r+0x4c>
 8004c08:	42a3      	cmp	r3, r4
 8004c0a:	d9fa      	bls.n	8004c02 <_free_r+0x42>
 8004c0c:	6811      	ldr	r1, [r2, #0]
 8004c0e:	1850      	adds	r0, r2, r1
 8004c10:	42a0      	cmp	r0, r4
 8004c12:	d10b      	bne.n	8004c2c <_free_r+0x6c>
 8004c14:	6820      	ldr	r0, [r4, #0]
 8004c16:	4401      	add	r1, r0
 8004c18:	1850      	adds	r0, r2, r1
 8004c1a:	4283      	cmp	r3, r0
 8004c1c:	6011      	str	r1, [r2, #0]
 8004c1e:	d1e0      	bne.n	8004be2 <_free_r+0x22>
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	6053      	str	r3, [r2, #4]
 8004c26:	4408      	add	r0, r1
 8004c28:	6010      	str	r0, [r2, #0]
 8004c2a:	e7da      	b.n	8004be2 <_free_r+0x22>
 8004c2c:	d902      	bls.n	8004c34 <_free_r+0x74>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	602b      	str	r3, [r5, #0]
 8004c32:	e7d6      	b.n	8004be2 <_free_r+0x22>
 8004c34:	6820      	ldr	r0, [r4, #0]
 8004c36:	1821      	adds	r1, r4, r0
 8004c38:	428b      	cmp	r3, r1
 8004c3a:	bf04      	itt	eq
 8004c3c:	6819      	ldreq	r1, [r3, #0]
 8004c3e:	685b      	ldreq	r3, [r3, #4]
 8004c40:	6063      	str	r3, [r4, #4]
 8004c42:	bf04      	itt	eq
 8004c44:	1809      	addeq	r1, r1, r0
 8004c46:	6021      	streq	r1, [r4, #0]
 8004c48:	6054      	str	r4, [r2, #4]
 8004c4a:	e7ca      	b.n	8004be2 <_free_r+0x22>
 8004c4c:	bd38      	pop	{r3, r4, r5, pc}
 8004c4e:	bf00      	nop
 8004c50:	2000038c 	.word	0x2000038c

08004c54 <malloc>:
 8004c54:	4b02      	ldr	r3, [pc, #8]	@ (8004c60 <malloc+0xc>)
 8004c56:	4601      	mov	r1, r0
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	f000 b825 	b.w	8004ca8 <_malloc_r>
 8004c5e:	bf00      	nop
 8004c60:	20000018 	.word	0x20000018

08004c64 <sbrk_aligned>:
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	4e0f      	ldr	r6, [pc, #60]	@ (8004ca4 <sbrk_aligned+0x40>)
 8004c68:	460c      	mov	r4, r1
 8004c6a:	6831      	ldr	r1, [r6, #0]
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	b911      	cbnz	r1, 8004c76 <sbrk_aligned+0x12>
 8004c70:	f000 fc62 	bl	8005538 <_sbrk_r>
 8004c74:	6030      	str	r0, [r6, #0]
 8004c76:	4621      	mov	r1, r4
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f000 fc5d 	bl	8005538 <_sbrk_r>
 8004c7e:	1c43      	adds	r3, r0, #1
 8004c80:	d103      	bne.n	8004c8a <sbrk_aligned+0x26>
 8004c82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004c86:	4620      	mov	r0, r4
 8004c88:	bd70      	pop	{r4, r5, r6, pc}
 8004c8a:	1cc4      	adds	r4, r0, #3
 8004c8c:	f024 0403 	bic.w	r4, r4, #3
 8004c90:	42a0      	cmp	r0, r4
 8004c92:	d0f8      	beq.n	8004c86 <sbrk_aligned+0x22>
 8004c94:	1a21      	subs	r1, r4, r0
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 fc4e 	bl	8005538 <_sbrk_r>
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d1f2      	bne.n	8004c86 <sbrk_aligned+0x22>
 8004ca0:	e7ef      	b.n	8004c82 <sbrk_aligned+0x1e>
 8004ca2:	bf00      	nop
 8004ca4:	20000388 	.word	0x20000388

08004ca8 <_malloc_r>:
 8004ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cac:	1ccd      	adds	r5, r1, #3
 8004cae:	f025 0503 	bic.w	r5, r5, #3
 8004cb2:	3508      	adds	r5, #8
 8004cb4:	2d0c      	cmp	r5, #12
 8004cb6:	bf38      	it	cc
 8004cb8:	250c      	movcc	r5, #12
 8004cba:	2d00      	cmp	r5, #0
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	db01      	blt.n	8004cc4 <_malloc_r+0x1c>
 8004cc0:	42a9      	cmp	r1, r5
 8004cc2:	d904      	bls.n	8004cce <_malloc_r+0x26>
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	6033      	str	r3, [r6, #0]
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004da4 <_malloc_r+0xfc>
 8004cd2:	f000 f869 	bl	8004da8 <__malloc_lock>
 8004cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8004cda:	461c      	mov	r4, r3
 8004cdc:	bb44      	cbnz	r4, 8004d30 <_malloc_r+0x88>
 8004cde:	4629      	mov	r1, r5
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f7ff ffbf 	bl	8004c64 <sbrk_aligned>
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	4604      	mov	r4, r0
 8004cea:	d158      	bne.n	8004d9e <_malloc_r+0xf6>
 8004cec:	f8d8 4000 	ldr.w	r4, [r8]
 8004cf0:	4627      	mov	r7, r4
 8004cf2:	2f00      	cmp	r7, #0
 8004cf4:	d143      	bne.n	8004d7e <_malloc_r+0xd6>
 8004cf6:	2c00      	cmp	r4, #0
 8004cf8:	d04b      	beq.n	8004d92 <_malloc_r+0xea>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	4639      	mov	r1, r7
 8004cfe:	4630      	mov	r0, r6
 8004d00:	eb04 0903 	add.w	r9, r4, r3
 8004d04:	f000 fc18 	bl	8005538 <_sbrk_r>
 8004d08:	4581      	cmp	r9, r0
 8004d0a:	d142      	bne.n	8004d92 <_malloc_r+0xea>
 8004d0c:	6821      	ldr	r1, [r4, #0]
 8004d0e:	1a6d      	subs	r5, r5, r1
 8004d10:	4629      	mov	r1, r5
 8004d12:	4630      	mov	r0, r6
 8004d14:	f7ff ffa6 	bl	8004c64 <sbrk_aligned>
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d03a      	beq.n	8004d92 <_malloc_r+0xea>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	442b      	add	r3, r5
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	f8d8 3000 	ldr.w	r3, [r8]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	bb62      	cbnz	r2, 8004d84 <_malloc_r+0xdc>
 8004d2a:	f8c8 7000 	str.w	r7, [r8]
 8004d2e:	e00f      	b.n	8004d50 <_malloc_r+0xa8>
 8004d30:	6822      	ldr	r2, [r4, #0]
 8004d32:	1b52      	subs	r2, r2, r5
 8004d34:	d420      	bmi.n	8004d78 <_malloc_r+0xd0>
 8004d36:	2a0b      	cmp	r2, #11
 8004d38:	d917      	bls.n	8004d6a <_malloc_r+0xc2>
 8004d3a:	1961      	adds	r1, r4, r5
 8004d3c:	42a3      	cmp	r3, r4
 8004d3e:	6025      	str	r5, [r4, #0]
 8004d40:	bf18      	it	ne
 8004d42:	6059      	strne	r1, [r3, #4]
 8004d44:	6863      	ldr	r3, [r4, #4]
 8004d46:	bf08      	it	eq
 8004d48:	f8c8 1000 	streq.w	r1, [r8]
 8004d4c:	5162      	str	r2, [r4, r5]
 8004d4e:	604b      	str	r3, [r1, #4]
 8004d50:	4630      	mov	r0, r6
 8004d52:	f000 f82f 	bl	8004db4 <__malloc_unlock>
 8004d56:	f104 000b 	add.w	r0, r4, #11
 8004d5a:	1d23      	adds	r3, r4, #4
 8004d5c:	f020 0007 	bic.w	r0, r0, #7
 8004d60:	1ac2      	subs	r2, r0, r3
 8004d62:	bf1c      	itt	ne
 8004d64:	1a1b      	subne	r3, r3, r0
 8004d66:	50a3      	strne	r3, [r4, r2]
 8004d68:	e7af      	b.n	8004cca <_malloc_r+0x22>
 8004d6a:	6862      	ldr	r2, [r4, #4]
 8004d6c:	42a3      	cmp	r3, r4
 8004d6e:	bf0c      	ite	eq
 8004d70:	f8c8 2000 	streq.w	r2, [r8]
 8004d74:	605a      	strne	r2, [r3, #4]
 8004d76:	e7eb      	b.n	8004d50 <_malloc_r+0xa8>
 8004d78:	4623      	mov	r3, r4
 8004d7a:	6864      	ldr	r4, [r4, #4]
 8004d7c:	e7ae      	b.n	8004cdc <_malloc_r+0x34>
 8004d7e:	463c      	mov	r4, r7
 8004d80:	687f      	ldr	r7, [r7, #4]
 8004d82:	e7b6      	b.n	8004cf2 <_malloc_r+0x4a>
 8004d84:	461a      	mov	r2, r3
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	d1fb      	bne.n	8004d84 <_malloc_r+0xdc>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	6053      	str	r3, [r2, #4]
 8004d90:	e7de      	b.n	8004d50 <_malloc_r+0xa8>
 8004d92:	230c      	movs	r3, #12
 8004d94:	6033      	str	r3, [r6, #0]
 8004d96:	4630      	mov	r0, r6
 8004d98:	f000 f80c 	bl	8004db4 <__malloc_unlock>
 8004d9c:	e794      	b.n	8004cc8 <_malloc_r+0x20>
 8004d9e:	6005      	str	r5, [r0, #0]
 8004da0:	e7d6      	b.n	8004d50 <_malloc_r+0xa8>
 8004da2:	bf00      	nop
 8004da4:	2000038c 	.word	0x2000038c

08004da8 <__malloc_lock>:
 8004da8:	4801      	ldr	r0, [pc, #4]	@ (8004db0 <__malloc_lock+0x8>)
 8004daa:	f7ff bee0 	b.w	8004b6e <__retarget_lock_acquire_recursive>
 8004dae:	bf00      	nop
 8004db0:	20000384 	.word	0x20000384

08004db4 <__malloc_unlock>:
 8004db4:	4801      	ldr	r0, [pc, #4]	@ (8004dbc <__malloc_unlock+0x8>)
 8004db6:	f7ff bedb 	b.w	8004b70 <__retarget_lock_release_recursive>
 8004dba:	bf00      	nop
 8004dbc:	20000384 	.word	0x20000384

08004dc0 <__ssputs_r>:
 8004dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc4:	688e      	ldr	r6, [r1, #8]
 8004dc6:	461f      	mov	r7, r3
 8004dc8:	42be      	cmp	r6, r7
 8004dca:	680b      	ldr	r3, [r1, #0]
 8004dcc:	4682      	mov	sl, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	4690      	mov	r8, r2
 8004dd2:	d82d      	bhi.n	8004e30 <__ssputs_r+0x70>
 8004dd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ddc:	d026      	beq.n	8004e2c <__ssputs_r+0x6c>
 8004dde:	6965      	ldr	r5, [r4, #20]
 8004de0:	6909      	ldr	r1, [r1, #16]
 8004de2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004de6:	eba3 0901 	sub.w	r9, r3, r1
 8004dea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dee:	1c7b      	adds	r3, r7, #1
 8004df0:	444b      	add	r3, r9
 8004df2:	106d      	asrs	r5, r5, #1
 8004df4:	429d      	cmp	r5, r3
 8004df6:	bf38      	it	cc
 8004df8:	461d      	movcc	r5, r3
 8004dfa:	0553      	lsls	r3, r2, #21
 8004dfc:	d527      	bpl.n	8004e4e <__ssputs_r+0x8e>
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f7ff ff52 	bl	8004ca8 <_malloc_r>
 8004e04:	4606      	mov	r6, r0
 8004e06:	b360      	cbz	r0, 8004e62 <__ssputs_r+0xa2>
 8004e08:	6921      	ldr	r1, [r4, #16]
 8004e0a:	464a      	mov	r2, r9
 8004e0c:	f000 fba4 	bl	8005558 <memcpy>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	6126      	str	r6, [r4, #16]
 8004e1e:	6165      	str	r5, [r4, #20]
 8004e20:	444e      	add	r6, r9
 8004e22:	eba5 0509 	sub.w	r5, r5, r9
 8004e26:	6026      	str	r6, [r4, #0]
 8004e28:	60a5      	str	r5, [r4, #8]
 8004e2a:	463e      	mov	r6, r7
 8004e2c:	42be      	cmp	r6, r7
 8004e2e:	d900      	bls.n	8004e32 <__ssputs_r+0x72>
 8004e30:	463e      	mov	r6, r7
 8004e32:	6820      	ldr	r0, [r4, #0]
 8004e34:	4632      	mov	r2, r6
 8004e36:	4641      	mov	r1, r8
 8004e38:	f000 fb64 	bl	8005504 <memmove>
 8004e3c:	68a3      	ldr	r3, [r4, #8]
 8004e3e:	1b9b      	subs	r3, r3, r6
 8004e40:	60a3      	str	r3, [r4, #8]
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	4433      	add	r3, r6
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	2000      	movs	r0, #0
 8004e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4e:	462a      	mov	r2, r5
 8004e50:	f000 fb97 	bl	8005582 <_realloc_r>
 8004e54:	4606      	mov	r6, r0
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d1e0      	bne.n	8004e1c <__ssputs_r+0x5c>
 8004e5a:	6921      	ldr	r1, [r4, #16]
 8004e5c:	4650      	mov	r0, sl
 8004e5e:	f7ff feaf 	bl	8004bc0 <_free_r>
 8004e62:	230c      	movs	r3, #12
 8004e64:	f8ca 3000 	str.w	r3, [sl]
 8004e68:	89a3      	ldrh	r3, [r4, #12]
 8004e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e74:	e7e9      	b.n	8004e4a <__ssputs_r+0x8a>
	...

08004e78 <_svfiprintf_r>:
 8004e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7c:	4698      	mov	r8, r3
 8004e7e:	898b      	ldrh	r3, [r1, #12]
 8004e80:	061b      	lsls	r3, r3, #24
 8004e82:	b09d      	sub	sp, #116	@ 0x74
 8004e84:	4607      	mov	r7, r0
 8004e86:	460d      	mov	r5, r1
 8004e88:	4614      	mov	r4, r2
 8004e8a:	d510      	bpl.n	8004eae <_svfiprintf_r+0x36>
 8004e8c:	690b      	ldr	r3, [r1, #16]
 8004e8e:	b973      	cbnz	r3, 8004eae <_svfiprintf_r+0x36>
 8004e90:	2140      	movs	r1, #64	@ 0x40
 8004e92:	f7ff ff09 	bl	8004ca8 <_malloc_r>
 8004e96:	6028      	str	r0, [r5, #0]
 8004e98:	6128      	str	r0, [r5, #16]
 8004e9a:	b930      	cbnz	r0, 8004eaa <_svfiprintf_r+0x32>
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ea4:	b01d      	add	sp, #116	@ 0x74
 8004ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eaa:	2340      	movs	r3, #64	@ 0x40
 8004eac:	616b      	str	r3, [r5, #20]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eb2:	2320      	movs	r3, #32
 8004eb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ebc:	2330      	movs	r3, #48	@ 0x30
 8004ebe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800505c <_svfiprintf_r+0x1e4>
 8004ec2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ec6:	f04f 0901 	mov.w	r9, #1
 8004eca:	4623      	mov	r3, r4
 8004ecc:	469a      	mov	sl, r3
 8004ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ed2:	b10a      	cbz	r2, 8004ed8 <_svfiprintf_r+0x60>
 8004ed4:	2a25      	cmp	r2, #37	@ 0x25
 8004ed6:	d1f9      	bne.n	8004ecc <_svfiprintf_r+0x54>
 8004ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8004edc:	d00b      	beq.n	8004ef6 <_svfiprintf_r+0x7e>
 8004ede:	465b      	mov	r3, fp
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	f7ff ff6b 	bl	8004dc0 <__ssputs_r>
 8004eea:	3001      	adds	r0, #1
 8004eec:	f000 80a7 	beq.w	800503e <_svfiprintf_r+0x1c6>
 8004ef0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ef2:	445a      	add	r2, fp
 8004ef4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 809f 	beq.w	800503e <_svfiprintf_r+0x1c6>
 8004f00:	2300      	movs	r3, #0
 8004f02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f0a:	f10a 0a01 	add.w	sl, sl, #1
 8004f0e:	9304      	str	r3, [sp, #16]
 8004f10:	9307      	str	r3, [sp, #28]
 8004f12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f16:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f18:	4654      	mov	r4, sl
 8004f1a:	2205      	movs	r2, #5
 8004f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f20:	484e      	ldr	r0, [pc, #312]	@ (800505c <_svfiprintf_r+0x1e4>)
 8004f22:	f7fb f95d 	bl	80001e0 <memchr>
 8004f26:	9a04      	ldr	r2, [sp, #16]
 8004f28:	b9d8      	cbnz	r0, 8004f62 <_svfiprintf_r+0xea>
 8004f2a:	06d0      	lsls	r0, r2, #27
 8004f2c:	bf44      	itt	mi
 8004f2e:	2320      	movmi	r3, #32
 8004f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f34:	0711      	lsls	r1, r2, #28
 8004f36:	bf44      	itt	mi
 8004f38:	232b      	movmi	r3, #43	@ 0x2b
 8004f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f44:	d015      	beq.n	8004f72 <_svfiprintf_r+0xfa>
 8004f46:	9a07      	ldr	r2, [sp, #28]
 8004f48:	4654      	mov	r4, sl
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f04f 0c0a 	mov.w	ip, #10
 8004f50:	4621      	mov	r1, r4
 8004f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f56:	3b30      	subs	r3, #48	@ 0x30
 8004f58:	2b09      	cmp	r3, #9
 8004f5a:	d94b      	bls.n	8004ff4 <_svfiprintf_r+0x17c>
 8004f5c:	b1b0      	cbz	r0, 8004f8c <_svfiprintf_r+0x114>
 8004f5e:	9207      	str	r2, [sp, #28]
 8004f60:	e014      	b.n	8004f8c <_svfiprintf_r+0x114>
 8004f62:	eba0 0308 	sub.w	r3, r0, r8
 8004f66:	fa09 f303 	lsl.w	r3, r9, r3
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	9304      	str	r3, [sp, #16]
 8004f6e:	46a2      	mov	sl, r4
 8004f70:	e7d2      	b.n	8004f18 <_svfiprintf_r+0xa0>
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	1d19      	adds	r1, r3, #4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	9103      	str	r1, [sp, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bfbb      	ittet	lt
 8004f7e:	425b      	neglt	r3, r3
 8004f80:	f042 0202 	orrlt.w	r2, r2, #2
 8004f84:	9307      	strge	r3, [sp, #28]
 8004f86:	9307      	strlt	r3, [sp, #28]
 8004f88:	bfb8      	it	lt
 8004f8a:	9204      	strlt	r2, [sp, #16]
 8004f8c:	7823      	ldrb	r3, [r4, #0]
 8004f8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f90:	d10a      	bne.n	8004fa8 <_svfiprintf_r+0x130>
 8004f92:	7863      	ldrb	r3, [r4, #1]
 8004f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f96:	d132      	bne.n	8004ffe <_svfiprintf_r+0x186>
 8004f98:	9b03      	ldr	r3, [sp, #12]
 8004f9a:	1d1a      	adds	r2, r3, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	9203      	str	r2, [sp, #12]
 8004fa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fa4:	3402      	adds	r4, #2
 8004fa6:	9305      	str	r3, [sp, #20]
 8004fa8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800506c <_svfiprintf_r+0x1f4>
 8004fac:	7821      	ldrb	r1, [r4, #0]
 8004fae:	2203      	movs	r2, #3
 8004fb0:	4650      	mov	r0, sl
 8004fb2:	f7fb f915 	bl	80001e0 <memchr>
 8004fb6:	b138      	cbz	r0, 8004fc8 <_svfiprintf_r+0x150>
 8004fb8:	9b04      	ldr	r3, [sp, #16]
 8004fba:	eba0 000a 	sub.w	r0, r0, sl
 8004fbe:	2240      	movs	r2, #64	@ 0x40
 8004fc0:	4082      	lsls	r2, r0
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	3401      	adds	r4, #1
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fcc:	4824      	ldr	r0, [pc, #144]	@ (8005060 <_svfiprintf_r+0x1e8>)
 8004fce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fd2:	2206      	movs	r2, #6
 8004fd4:	f7fb f904 	bl	80001e0 <memchr>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d036      	beq.n	800504a <_svfiprintf_r+0x1d2>
 8004fdc:	4b21      	ldr	r3, [pc, #132]	@ (8005064 <_svfiprintf_r+0x1ec>)
 8004fde:	bb1b      	cbnz	r3, 8005028 <_svfiprintf_r+0x1b0>
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	3307      	adds	r3, #7
 8004fe4:	f023 0307 	bic.w	r3, r3, #7
 8004fe8:	3308      	adds	r3, #8
 8004fea:	9303      	str	r3, [sp, #12]
 8004fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fee:	4433      	add	r3, r6
 8004ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ff2:	e76a      	b.n	8004eca <_svfiprintf_r+0x52>
 8004ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	e7a8      	b.n	8004f50 <_svfiprintf_r+0xd8>
 8004ffe:	2300      	movs	r3, #0
 8005000:	3401      	adds	r4, #1
 8005002:	9305      	str	r3, [sp, #20]
 8005004:	4619      	mov	r1, r3
 8005006:	f04f 0c0a 	mov.w	ip, #10
 800500a:	4620      	mov	r0, r4
 800500c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005010:	3a30      	subs	r2, #48	@ 0x30
 8005012:	2a09      	cmp	r2, #9
 8005014:	d903      	bls.n	800501e <_svfiprintf_r+0x1a6>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0c6      	beq.n	8004fa8 <_svfiprintf_r+0x130>
 800501a:	9105      	str	r1, [sp, #20]
 800501c:	e7c4      	b.n	8004fa8 <_svfiprintf_r+0x130>
 800501e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005022:	4604      	mov	r4, r0
 8005024:	2301      	movs	r3, #1
 8005026:	e7f0      	b.n	800500a <_svfiprintf_r+0x192>
 8005028:	ab03      	add	r3, sp, #12
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	462a      	mov	r2, r5
 800502e:	4b0e      	ldr	r3, [pc, #56]	@ (8005068 <_svfiprintf_r+0x1f0>)
 8005030:	a904      	add	r1, sp, #16
 8005032:	4638      	mov	r0, r7
 8005034:	f3af 8000 	nop.w
 8005038:	1c42      	adds	r2, r0, #1
 800503a:	4606      	mov	r6, r0
 800503c:	d1d6      	bne.n	8004fec <_svfiprintf_r+0x174>
 800503e:	89ab      	ldrh	r3, [r5, #12]
 8005040:	065b      	lsls	r3, r3, #25
 8005042:	f53f af2d 	bmi.w	8004ea0 <_svfiprintf_r+0x28>
 8005046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005048:	e72c      	b.n	8004ea4 <_svfiprintf_r+0x2c>
 800504a:	ab03      	add	r3, sp, #12
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	462a      	mov	r2, r5
 8005050:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <_svfiprintf_r+0x1f0>)
 8005052:	a904      	add	r1, sp, #16
 8005054:	4638      	mov	r0, r7
 8005056:	f000 f879 	bl	800514c <_printf_i>
 800505a:	e7ed      	b.n	8005038 <_svfiprintf_r+0x1c0>
 800505c:	08005d19 	.word	0x08005d19
 8005060:	08005d23 	.word	0x08005d23
 8005064:	00000000 	.word	0x00000000
 8005068:	08004dc1 	.word	0x08004dc1
 800506c:	08005d1f 	.word	0x08005d1f

08005070 <_printf_common>:
 8005070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	4616      	mov	r6, r2
 8005076:	4698      	mov	r8, r3
 8005078:	688a      	ldr	r2, [r1, #8]
 800507a:	690b      	ldr	r3, [r1, #16]
 800507c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005080:	4293      	cmp	r3, r2
 8005082:	bfb8      	it	lt
 8005084:	4613      	movlt	r3, r2
 8005086:	6033      	str	r3, [r6, #0]
 8005088:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800508c:	4607      	mov	r7, r0
 800508e:	460c      	mov	r4, r1
 8005090:	b10a      	cbz	r2, 8005096 <_printf_common+0x26>
 8005092:	3301      	adds	r3, #1
 8005094:	6033      	str	r3, [r6, #0]
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	0699      	lsls	r1, r3, #26
 800509a:	bf42      	ittt	mi
 800509c:	6833      	ldrmi	r3, [r6, #0]
 800509e:	3302      	addmi	r3, #2
 80050a0:	6033      	strmi	r3, [r6, #0]
 80050a2:	6825      	ldr	r5, [r4, #0]
 80050a4:	f015 0506 	ands.w	r5, r5, #6
 80050a8:	d106      	bne.n	80050b8 <_printf_common+0x48>
 80050aa:	f104 0a19 	add.w	sl, r4, #25
 80050ae:	68e3      	ldr	r3, [r4, #12]
 80050b0:	6832      	ldr	r2, [r6, #0]
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	42ab      	cmp	r3, r5
 80050b6:	dc26      	bgt.n	8005106 <_printf_common+0x96>
 80050b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050bc:	6822      	ldr	r2, [r4, #0]
 80050be:	3b00      	subs	r3, #0
 80050c0:	bf18      	it	ne
 80050c2:	2301      	movne	r3, #1
 80050c4:	0692      	lsls	r2, r2, #26
 80050c6:	d42b      	bmi.n	8005120 <_printf_common+0xb0>
 80050c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050cc:	4641      	mov	r1, r8
 80050ce:	4638      	mov	r0, r7
 80050d0:	47c8      	blx	r9
 80050d2:	3001      	adds	r0, #1
 80050d4:	d01e      	beq.n	8005114 <_printf_common+0xa4>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	6922      	ldr	r2, [r4, #16]
 80050da:	f003 0306 	and.w	r3, r3, #6
 80050de:	2b04      	cmp	r3, #4
 80050e0:	bf02      	ittt	eq
 80050e2:	68e5      	ldreq	r5, [r4, #12]
 80050e4:	6833      	ldreq	r3, [r6, #0]
 80050e6:	1aed      	subeq	r5, r5, r3
 80050e8:	68a3      	ldr	r3, [r4, #8]
 80050ea:	bf0c      	ite	eq
 80050ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f0:	2500      	movne	r5, #0
 80050f2:	4293      	cmp	r3, r2
 80050f4:	bfc4      	itt	gt
 80050f6:	1a9b      	subgt	r3, r3, r2
 80050f8:	18ed      	addgt	r5, r5, r3
 80050fa:	2600      	movs	r6, #0
 80050fc:	341a      	adds	r4, #26
 80050fe:	42b5      	cmp	r5, r6
 8005100:	d11a      	bne.n	8005138 <_printf_common+0xc8>
 8005102:	2000      	movs	r0, #0
 8005104:	e008      	b.n	8005118 <_printf_common+0xa8>
 8005106:	2301      	movs	r3, #1
 8005108:	4652      	mov	r2, sl
 800510a:	4641      	mov	r1, r8
 800510c:	4638      	mov	r0, r7
 800510e:	47c8      	blx	r9
 8005110:	3001      	adds	r0, #1
 8005112:	d103      	bne.n	800511c <_printf_common+0xac>
 8005114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511c:	3501      	adds	r5, #1
 800511e:	e7c6      	b.n	80050ae <_printf_common+0x3e>
 8005120:	18e1      	adds	r1, r4, r3
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	2030      	movs	r0, #48	@ 0x30
 8005126:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800512a:	4422      	add	r2, r4
 800512c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005130:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005134:	3302      	adds	r3, #2
 8005136:	e7c7      	b.n	80050c8 <_printf_common+0x58>
 8005138:	2301      	movs	r3, #1
 800513a:	4622      	mov	r2, r4
 800513c:	4641      	mov	r1, r8
 800513e:	4638      	mov	r0, r7
 8005140:	47c8      	blx	r9
 8005142:	3001      	adds	r0, #1
 8005144:	d0e6      	beq.n	8005114 <_printf_common+0xa4>
 8005146:	3601      	adds	r6, #1
 8005148:	e7d9      	b.n	80050fe <_printf_common+0x8e>
	...

0800514c <_printf_i>:
 800514c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	7e0f      	ldrb	r7, [r1, #24]
 8005152:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005154:	2f78      	cmp	r7, #120	@ 0x78
 8005156:	4691      	mov	r9, r2
 8005158:	4680      	mov	r8, r0
 800515a:	460c      	mov	r4, r1
 800515c:	469a      	mov	sl, r3
 800515e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005162:	d807      	bhi.n	8005174 <_printf_i+0x28>
 8005164:	2f62      	cmp	r7, #98	@ 0x62
 8005166:	d80a      	bhi.n	800517e <_printf_i+0x32>
 8005168:	2f00      	cmp	r7, #0
 800516a:	f000 80d1 	beq.w	8005310 <_printf_i+0x1c4>
 800516e:	2f58      	cmp	r7, #88	@ 0x58
 8005170:	f000 80b8 	beq.w	80052e4 <_printf_i+0x198>
 8005174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005178:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800517c:	e03a      	b.n	80051f4 <_printf_i+0xa8>
 800517e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005182:	2b15      	cmp	r3, #21
 8005184:	d8f6      	bhi.n	8005174 <_printf_i+0x28>
 8005186:	a101      	add	r1, pc, #4	@ (adr r1, 800518c <_printf_i+0x40>)
 8005188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800518c:	080051e5 	.word	0x080051e5
 8005190:	080051f9 	.word	0x080051f9
 8005194:	08005175 	.word	0x08005175
 8005198:	08005175 	.word	0x08005175
 800519c:	08005175 	.word	0x08005175
 80051a0:	08005175 	.word	0x08005175
 80051a4:	080051f9 	.word	0x080051f9
 80051a8:	08005175 	.word	0x08005175
 80051ac:	08005175 	.word	0x08005175
 80051b0:	08005175 	.word	0x08005175
 80051b4:	08005175 	.word	0x08005175
 80051b8:	080052f7 	.word	0x080052f7
 80051bc:	08005223 	.word	0x08005223
 80051c0:	080052b1 	.word	0x080052b1
 80051c4:	08005175 	.word	0x08005175
 80051c8:	08005175 	.word	0x08005175
 80051cc:	08005319 	.word	0x08005319
 80051d0:	08005175 	.word	0x08005175
 80051d4:	08005223 	.word	0x08005223
 80051d8:	08005175 	.word	0x08005175
 80051dc:	08005175 	.word	0x08005175
 80051e0:	080052b9 	.word	0x080052b9
 80051e4:	6833      	ldr	r3, [r6, #0]
 80051e6:	1d1a      	adds	r2, r3, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6032      	str	r2, [r6, #0]
 80051ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051f4:	2301      	movs	r3, #1
 80051f6:	e09c      	b.n	8005332 <_printf_i+0x1e6>
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	6820      	ldr	r0, [r4, #0]
 80051fc:	1d19      	adds	r1, r3, #4
 80051fe:	6031      	str	r1, [r6, #0]
 8005200:	0606      	lsls	r6, r0, #24
 8005202:	d501      	bpl.n	8005208 <_printf_i+0xbc>
 8005204:	681d      	ldr	r5, [r3, #0]
 8005206:	e003      	b.n	8005210 <_printf_i+0xc4>
 8005208:	0645      	lsls	r5, r0, #25
 800520a:	d5fb      	bpl.n	8005204 <_printf_i+0xb8>
 800520c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005210:	2d00      	cmp	r5, #0
 8005212:	da03      	bge.n	800521c <_printf_i+0xd0>
 8005214:	232d      	movs	r3, #45	@ 0x2d
 8005216:	426d      	negs	r5, r5
 8005218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800521c:	4858      	ldr	r0, [pc, #352]	@ (8005380 <_printf_i+0x234>)
 800521e:	230a      	movs	r3, #10
 8005220:	e011      	b.n	8005246 <_printf_i+0xfa>
 8005222:	6821      	ldr	r1, [r4, #0]
 8005224:	6833      	ldr	r3, [r6, #0]
 8005226:	0608      	lsls	r0, r1, #24
 8005228:	f853 5b04 	ldr.w	r5, [r3], #4
 800522c:	d402      	bmi.n	8005234 <_printf_i+0xe8>
 800522e:	0649      	lsls	r1, r1, #25
 8005230:	bf48      	it	mi
 8005232:	b2ad      	uxthmi	r5, r5
 8005234:	2f6f      	cmp	r7, #111	@ 0x6f
 8005236:	4852      	ldr	r0, [pc, #328]	@ (8005380 <_printf_i+0x234>)
 8005238:	6033      	str	r3, [r6, #0]
 800523a:	bf14      	ite	ne
 800523c:	230a      	movne	r3, #10
 800523e:	2308      	moveq	r3, #8
 8005240:	2100      	movs	r1, #0
 8005242:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005246:	6866      	ldr	r6, [r4, #4]
 8005248:	60a6      	str	r6, [r4, #8]
 800524a:	2e00      	cmp	r6, #0
 800524c:	db05      	blt.n	800525a <_printf_i+0x10e>
 800524e:	6821      	ldr	r1, [r4, #0]
 8005250:	432e      	orrs	r6, r5
 8005252:	f021 0104 	bic.w	r1, r1, #4
 8005256:	6021      	str	r1, [r4, #0]
 8005258:	d04b      	beq.n	80052f2 <_printf_i+0x1a6>
 800525a:	4616      	mov	r6, r2
 800525c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005260:	fb03 5711 	mls	r7, r3, r1, r5
 8005264:	5dc7      	ldrb	r7, [r0, r7]
 8005266:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800526a:	462f      	mov	r7, r5
 800526c:	42bb      	cmp	r3, r7
 800526e:	460d      	mov	r5, r1
 8005270:	d9f4      	bls.n	800525c <_printf_i+0x110>
 8005272:	2b08      	cmp	r3, #8
 8005274:	d10b      	bne.n	800528e <_printf_i+0x142>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	07df      	lsls	r7, r3, #31
 800527a:	d508      	bpl.n	800528e <_printf_i+0x142>
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	6861      	ldr	r1, [r4, #4]
 8005280:	4299      	cmp	r1, r3
 8005282:	bfde      	ittt	le
 8005284:	2330      	movle	r3, #48	@ 0x30
 8005286:	f806 3c01 	strble.w	r3, [r6, #-1]
 800528a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800528e:	1b92      	subs	r2, r2, r6
 8005290:	6122      	str	r2, [r4, #16]
 8005292:	f8cd a000 	str.w	sl, [sp]
 8005296:	464b      	mov	r3, r9
 8005298:	aa03      	add	r2, sp, #12
 800529a:	4621      	mov	r1, r4
 800529c:	4640      	mov	r0, r8
 800529e:	f7ff fee7 	bl	8005070 <_printf_common>
 80052a2:	3001      	adds	r0, #1
 80052a4:	d14a      	bne.n	800533c <_printf_i+0x1f0>
 80052a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052aa:	b004      	add	sp, #16
 80052ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	f043 0320 	orr.w	r3, r3, #32
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	4832      	ldr	r0, [pc, #200]	@ (8005384 <_printf_i+0x238>)
 80052ba:	2778      	movs	r7, #120	@ 0x78
 80052bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	6831      	ldr	r1, [r6, #0]
 80052c4:	061f      	lsls	r7, r3, #24
 80052c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80052ca:	d402      	bmi.n	80052d2 <_printf_i+0x186>
 80052cc:	065f      	lsls	r7, r3, #25
 80052ce:	bf48      	it	mi
 80052d0:	b2ad      	uxthmi	r5, r5
 80052d2:	6031      	str	r1, [r6, #0]
 80052d4:	07d9      	lsls	r1, r3, #31
 80052d6:	bf44      	itt	mi
 80052d8:	f043 0320 	orrmi.w	r3, r3, #32
 80052dc:	6023      	strmi	r3, [r4, #0]
 80052de:	b11d      	cbz	r5, 80052e8 <_printf_i+0x19c>
 80052e0:	2310      	movs	r3, #16
 80052e2:	e7ad      	b.n	8005240 <_printf_i+0xf4>
 80052e4:	4826      	ldr	r0, [pc, #152]	@ (8005380 <_printf_i+0x234>)
 80052e6:	e7e9      	b.n	80052bc <_printf_i+0x170>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	f023 0320 	bic.w	r3, r3, #32
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	e7f6      	b.n	80052e0 <_printf_i+0x194>
 80052f2:	4616      	mov	r6, r2
 80052f4:	e7bd      	b.n	8005272 <_printf_i+0x126>
 80052f6:	6833      	ldr	r3, [r6, #0]
 80052f8:	6825      	ldr	r5, [r4, #0]
 80052fa:	6961      	ldr	r1, [r4, #20]
 80052fc:	1d18      	adds	r0, r3, #4
 80052fe:	6030      	str	r0, [r6, #0]
 8005300:	062e      	lsls	r6, r5, #24
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	d501      	bpl.n	800530a <_printf_i+0x1be>
 8005306:	6019      	str	r1, [r3, #0]
 8005308:	e002      	b.n	8005310 <_printf_i+0x1c4>
 800530a:	0668      	lsls	r0, r5, #25
 800530c:	d5fb      	bpl.n	8005306 <_printf_i+0x1ba>
 800530e:	8019      	strh	r1, [r3, #0]
 8005310:	2300      	movs	r3, #0
 8005312:	6123      	str	r3, [r4, #16]
 8005314:	4616      	mov	r6, r2
 8005316:	e7bc      	b.n	8005292 <_printf_i+0x146>
 8005318:	6833      	ldr	r3, [r6, #0]
 800531a:	1d1a      	adds	r2, r3, #4
 800531c:	6032      	str	r2, [r6, #0]
 800531e:	681e      	ldr	r6, [r3, #0]
 8005320:	6862      	ldr	r2, [r4, #4]
 8005322:	2100      	movs	r1, #0
 8005324:	4630      	mov	r0, r6
 8005326:	f7fa ff5b 	bl	80001e0 <memchr>
 800532a:	b108      	cbz	r0, 8005330 <_printf_i+0x1e4>
 800532c:	1b80      	subs	r0, r0, r6
 800532e:	6060      	str	r0, [r4, #4]
 8005330:	6863      	ldr	r3, [r4, #4]
 8005332:	6123      	str	r3, [r4, #16]
 8005334:	2300      	movs	r3, #0
 8005336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800533a:	e7aa      	b.n	8005292 <_printf_i+0x146>
 800533c:	6923      	ldr	r3, [r4, #16]
 800533e:	4632      	mov	r2, r6
 8005340:	4649      	mov	r1, r9
 8005342:	4640      	mov	r0, r8
 8005344:	47d0      	blx	sl
 8005346:	3001      	adds	r0, #1
 8005348:	d0ad      	beq.n	80052a6 <_printf_i+0x15a>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	079b      	lsls	r3, r3, #30
 800534e:	d413      	bmi.n	8005378 <_printf_i+0x22c>
 8005350:	68e0      	ldr	r0, [r4, #12]
 8005352:	9b03      	ldr	r3, [sp, #12]
 8005354:	4298      	cmp	r0, r3
 8005356:	bfb8      	it	lt
 8005358:	4618      	movlt	r0, r3
 800535a:	e7a6      	b.n	80052aa <_printf_i+0x15e>
 800535c:	2301      	movs	r3, #1
 800535e:	4632      	mov	r2, r6
 8005360:	4649      	mov	r1, r9
 8005362:	4640      	mov	r0, r8
 8005364:	47d0      	blx	sl
 8005366:	3001      	adds	r0, #1
 8005368:	d09d      	beq.n	80052a6 <_printf_i+0x15a>
 800536a:	3501      	adds	r5, #1
 800536c:	68e3      	ldr	r3, [r4, #12]
 800536e:	9903      	ldr	r1, [sp, #12]
 8005370:	1a5b      	subs	r3, r3, r1
 8005372:	42ab      	cmp	r3, r5
 8005374:	dcf2      	bgt.n	800535c <_printf_i+0x210>
 8005376:	e7eb      	b.n	8005350 <_printf_i+0x204>
 8005378:	2500      	movs	r5, #0
 800537a:	f104 0619 	add.w	r6, r4, #25
 800537e:	e7f5      	b.n	800536c <_printf_i+0x220>
 8005380:	08005d2a 	.word	0x08005d2a
 8005384:	08005d3b 	.word	0x08005d3b

08005388 <__sflush_r>:
 8005388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800538c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005390:	0716      	lsls	r6, r2, #28
 8005392:	4605      	mov	r5, r0
 8005394:	460c      	mov	r4, r1
 8005396:	d454      	bmi.n	8005442 <__sflush_r+0xba>
 8005398:	684b      	ldr	r3, [r1, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	dc02      	bgt.n	80053a4 <__sflush_r+0x1c>
 800539e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	dd48      	ble.n	8005436 <__sflush_r+0xae>
 80053a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	d045      	beq.n	8005436 <__sflush_r+0xae>
 80053aa:	2300      	movs	r3, #0
 80053ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053b0:	682f      	ldr	r7, [r5, #0]
 80053b2:	6a21      	ldr	r1, [r4, #32]
 80053b4:	602b      	str	r3, [r5, #0]
 80053b6:	d030      	beq.n	800541a <__sflush_r+0x92>
 80053b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	0759      	lsls	r1, r3, #29
 80053be:	d505      	bpl.n	80053cc <__sflush_r+0x44>
 80053c0:	6863      	ldr	r3, [r4, #4]
 80053c2:	1ad2      	subs	r2, r2, r3
 80053c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053c6:	b10b      	cbz	r3, 80053cc <__sflush_r+0x44>
 80053c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	2300      	movs	r3, #0
 80053ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053d0:	6a21      	ldr	r1, [r4, #32]
 80053d2:	4628      	mov	r0, r5
 80053d4:	47b0      	blx	r6
 80053d6:	1c43      	adds	r3, r0, #1
 80053d8:	89a3      	ldrh	r3, [r4, #12]
 80053da:	d106      	bne.n	80053ea <__sflush_r+0x62>
 80053dc:	6829      	ldr	r1, [r5, #0]
 80053de:	291d      	cmp	r1, #29
 80053e0:	d82b      	bhi.n	800543a <__sflush_r+0xb2>
 80053e2:	4a2a      	ldr	r2, [pc, #168]	@ (800548c <__sflush_r+0x104>)
 80053e4:	40ca      	lsrs	r2, r1
 80053e6:	07d6      	lsls	r6, r2, #31
 80053e8:	d527      	bpl.n	800543a <__sflush_r+0xb2>
 80053ea:	2200      	movs	r2, #0
 80053ec:	6062      	str	r2, [r4, #4]
 80053ee:	04d9      	lsls	r1, r3, #19
 80053f0:	6922      	ldr	r2, [r4, #16]
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	d504      	bpl.n	8005400 <__sflush_r+0x78>
 80053f6:	1c42      	adds	r2, r0, #1
 80053f8:	d101      	bne.n	80053fe <__sflush_r+0x76>
 80053fa:	682b      	ldr	r3, [r5, #0]
 80053fc:	b903      	cbnz	r3, 8005400 <__sflush_r+0x78>
 80053fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8005400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005402:	602f      	str	r7, [r5, #0]
 8005404:	b1b9      	cbz	r1, 8005436 <__sflush_r+0xae>
 8005406:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800540a:	4299      	cmp	r1, r3
 800540c:	d002      	beq.n	8005414 <__sflush_r+0x8c>
 800540e:	4628      	mov	r0, r5
 8005410:	f7ff fbd6 	bl	8004bc0 <_free_r>
 8005414:	2300      	movs	r3, #0
 8005416:	6363      	str	r3, [r4, #52]	@ 0x34
 8005418:	e00d      	b.n	8005436 <__sflush_r+0xae>
 800541a:	2301      	movs	r3, #1
 800541c:	4628      	mov	r0, r5
 800541e:	47b0      	blx	r6
 8005420:	4602      	mov	r2, r0
 8005422:	1c50      	adds	r0, r2, #1
 8005424:	d1c9      	bne.n	80053ba <__sflush_r+0x32>
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0c6      	beq.n	80053ba <__sflush_r+0x32>
 800542c:	2b1d      	cmp	r3, #29
 800542e:	d001      	beq.n	8005434 <__sflush_r+0xac>
 8005430:	2b16      	cmp	r3, #22
 8005432:	d11e      	bne.n	8005472 <__sflush_r+0xea>
 8005434:	602f      	str	r7, [r5, #0]
 8005436:	2000      	movs	r0, #0
 8005438:	e022      	b.n	8005480 <__sflush_r+0xf8>
 800543a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800543e:	b21b      	sxth	r3, r3
 8005440:	e01b      	b.n	800547a <__sflush_r+0xf2>
 8005442:	690f      	ldr	r7, [r1, #16]
 8005444:	2f00      	cmp	r7, #0
 8005446:	d0f6      	beq.n	8005436 <__sflush_r+0xae>
 8005448:	0793      	lsls	r3, r2, #30
 800544a:	680e      	ldr	r6, [r1, #0]
 800544c:	bf08      	it	eq
 800544e:	694b      	ldreq	r3, [r1, #20]
 8005450:	600f      	str	r7, [r1, #0]
 8005452:	bf18      	it	ne
 8005454:	2300      	movne	r3, #0
 8005456:	eba6 0807 	sub.w	r8, r6, r7
 800545a:	608b      	str	r3, [r1, #8]
 800545c:	f1b8 0f00 	cmp.w	r8, #0
 8005460:	dde9      	ble.n	8005436 <__sflush_r+0xae>
 8005462:	6a21      	ldr	r1, [r4, #32]
 8005464:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005466:	4643      	mov	r3, r8
 8005468:	463a      	mov	r2, r7
 800546a:	4628      	mov	r0, r5
 800546c:	47b0      	blx	r6
 800546e:	2800      	cmp	r0, #0
 8005470:	dc08      	bgt.n	8005484 <__sflush_r+0xfc>
 8005472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800547a:	81a3      	strh	r3, [r4, #12]
 800547c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005484:	4407      	add	r7, r0
 8005486:	eba8 0800 	sub.w	r8, r8, r0
 800548a:	e7e7      	b.n	800545c <__sflush_r+0xd4>
 800548c:	20400001 	.word	0x20400001

08005490 <_fflush_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	690b      	ldr	r3, [r1, #16]
 8005494:	4605      	mov	r5, r0
 8005496:	460c      	mov	r4, r1
 8005498:	b913      	cbnz	r3, 80054a0 <_fflush_r+0x10>
 800549a:	2500      	movs	r5, #0
 800549c:	4628      	mov	r0, r5
 800549e:	bd38      	pop	{r3, r4, r5, pc}
 80054a0:	b118      	cbz	r0, 80054aa <_fflush_r+0x1a>
 80054a2:	6a03      	ldr	r3, [r0, #32]
 80054a4:	b90b      	cbnz	r3, 80054aa <_fflush_r+0x1a>
 80054a6:	f7ff f9a5 	bl	80047f4 <__sinit>
 80054aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f3      	beq.n	800549a <_fflush_r+0xa>
 80054b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054b4:	07d0      	lsls	r0, r2, #31
 80054b6:	d404      	bmi.n	80054c2 <_fflush_r+0x32>
 80054b8:	0599      	lsls	r1, r3, #22
 80054ba:	d402      	bmi.n	80054c2 <_fflush_r+0x32>
 80054bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054be:	f7ff fb56 	bl	8004b6e <__retarget_lock_acquire_recursive>
 80054c2:	4628      	mov	r0, r5
 80054c4:	4621      	mov	r1, r4
 80054c6:	f7ff ff5f 	bl	8005388 <__sflush_r>
 80054ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054cc:	07da      	lsls	r2, r3, #31
 80054ce:	4605      	mov	r5, r0
 80054d0:	d4e4      	bmi.n	800549c <_fflush_r+0xc>
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	059b      	lsls	r3, r3, #22
 80054d6:	d4e1      	bmi.n	800549c <_fflush_r+0xc>
 80054d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054da:	f7ff fb49 	bl	8004b70 <__retarget_lock_release_recursive>
 80054de:	e7dd      	b.n	800549c <_fflush_r+0xc>

080054e0 <fiprintf>:
 80054e0:	b40e      	push	{r1, r2, r3}
 80054e2:	b503      	push	{r0, r1, lr}
 80054e4:	4601      	mov	r1, r0
 80054e6:	ab03      	add	r3, sp, #12
 80054e8:	4805      	ldr	r0, [pc, #20]	@ (8005500 <fiprintf+0x20>)
 80054ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ee:	6800      	ldr	r0, [r0, #0]
 80054f0:	9301      	str	r3, [sp, #4]
 80054f2:	f000 f89d 	bl	8005630 <_vfiprintf_r>
 80054f6:	b002      	add	sp, #8
 80054f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054fc:	b003      	add	sp, #12
 80054fe:	4770      	bx	lr
 8005500:	20000018 	.word	0x20000018

08005504 <memmove>:
 8005504:	4288      	cmp	r0, r1
 8005506:	b510      	push	{r4, lr}
 8005508:	eb01 0402 	add.w	r4, r1, r2
 800550c:	d902      	bls.n	8005514 <memmove+0x10>
 800550e:	4284      	cmp	r4, r0
 8005510:	4623      	mov	r3, r4
 8005512:	d807      	bhi.n	8005524 <memmove+0x20>
 8005514:	1e43      	subs	r3, r0, #1
 8005516:	42a1      	cmp	r1, r4
 8005518:	d008      	beq.n	800552c <memmove+0x28>
 800551a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800551e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005522:	e7f8      	b.n	8005516 <memmove+0x12>
 8005524:	4402      	add	r2, r0
 8005526:	4601      	mov	r1, r0
 8005528:	428a      	cmp	r2, r1
 800552a:	d100      	bne.n	800552e <memmove+0x2a>
 800552c:	bd10      	pop	{r4, pc}
 800552e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005536:	e7f7      	b.n	8005528 <memmove+0x24>

08005538 <_sbrk_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d06      	ldr	r5, [pc, #24]	@ (8005554 <_sbrk_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fb ff9c 	bl	8001480 <_sbrk>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_sbrk_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_sbrk_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20000380 	.word	0x20000380

08005558 <memcpy>:
 8005558:	440a      	add	r2, r1
 800555a:	4291      	cmp	r1, r2
 800555c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005560:	d100      	bne.n	8005564 <memcpy+0xc>
 8005562:	4770      	bx	lr
 8005564:	b510      	push	{r4, lr}
 8005566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800556a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800556e:	4291      	cmp	r1, r2
 8005570:	d1f9      	bne.n	8005566 <memcpy+0xe>
 8005572:	bd10      	pop	{r4, pc}

08005574 <abort>:
 8005574:	b508      	push	{r3, lr}
 8005576:	2006      	movs	r0, #6
 8005578:	f000 fa2e 	bl	80059d8 <raise>
 800557c:	2001      	movs	r0, #1
 800557e:	f7fb ff07 	bl	8001390 <_exit>

08005582 <_realloc_r>:
 8005582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005586:	4607      	mov	r7, r0
 8005588:	4614      	mov	r4, r2
 800558a:	460d      	mov	r5, r1
 800558c:	b921      	cbnz	r1, 8005598 <_realloc_r+0x16>
 800558e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005592:	4611      	mov	r1, r2
 8005594:	f7ff bb88 	b.w	8004ca8 <_malloc_r>
 8005598:	b92a      	cbnz	r2, 80055a6 <_realloc_r+0x24>
 800559a:	f7ff fb11 	bl	8004bc0 <_free_r>
 800559e:	4625      	mov	r5, r4
 80055a0:	4628      	mov	r0, r5
 80055a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a6:	f000 fa33 	bl	8005a10 <_malloc_usable_size_r>
 80055aa:	4284      	cmp	r4, r0
 80055ac:	4606      	mov	r6, r0
 80055ae:	d802      	bhi.n	80055b6 <_realloc_r+0x34>
 80055b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055b4:	d8f4      	bhi.n	80055a0 <_realloc_r+0x1e>
 80055b6:	4621      	mov	r1, r4
 80055b8:	4638      	mov	r0, r7
 80055ba:	f7ff fb75 	bl	8004ca8 <_malloc_r>
 80055be:	4680      	mov	r8, r0
 80055c0:	b908      	cbnz	r0, 80055c6 <_realloc_r+0x44>
 80055c2:	4645      	mov	r5, r8
 80055c4:	e7ec      	b.n	80055a0 <_realloc_r+0x1e>
 80055c6:	42b4      	cmp	r4, r6
 80055c8:	4622      	mov	r2, r4
 80055ca:	4629      	mov	r1, r5
 80055cc:	bf28      	it	cs
 80055ce:	4632      	movcs	r2, r6
 80055d0:	f7ff ffc2 	bl	8005558 <memcpy>
 80055d4:	4629      	mov	r1, r5
 80055d6:	4638      	mov	r0, r7
 80055d8:	f7ff faf2 	bl	8004bc0 <_free_r>
 80055dc:	e7f1      	b.n	80055c2 <_realloc_r+0x40>

080055de <__sfputc_r>:
 80055de:	6893      	ldr	r3, [r2, #8]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	b410      	push	{r4}
 80055e6:	6093      	str	r3, [r2, #8]
 80055e8:	da08      	bge.n	80055fc <__sfputc_r+0x1e>
 80055ea:	6994      	ldr	r4, [r2, #24]
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	db01      	blt.n	80055f4 <__sfputc_r+0x16>
 80055f0:	290a      	cmp	r1, #10
 80055f2:	d103      	bne.n	80055fc <__sfputc_r+0x1e>
 80055f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055f8:	f000 b932 	b.w	8005860 <__swbuf_r>
 80055fc:	6813      	ldr	r3, [r2, #0]
 80055fe:	1c58      	adds	r0, r3, #1
 8005600:	6010      	str	r0, [r2, #0]
 8005602:	7019      	strb	r1, [r3, #0]
 8005604:	4608      	mov	r0, r1
 8005606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800560a:	4770      	bx	lr

0800560c <__sfputs_r>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	4606      	mov	r6, r0
 8005610:	460f      	mov	r7, r1
 8005612:	4614      	mov	r4, r2
 8005614:	18d5      	adds	r5, r2, r3
 8005616:	42ac      	cmp	r4, r5
 8005618:	d101      	bne.n	800561e <__sfputs_r+0x12>
 800561a:	2000      	movs	r0, #0
 800561c:	e007      	b.n	800562e <__sfputs_r+0x22>
 800561e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005622:	463a      	mov	r2, r7
 8005624:	4630      	mov	r0, r6
 8005626:	f7ff ffda 	bl	80055de <__sfputc_r>
 800562a:	1c43      	adds	r3, r0, #1
 800562c:	d1f3      	bne.n	8005616 <__sfputs_r+0xa>
 800562e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005630 <_vfiprintf_r>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	460d      	mov	r5, r1
 8005636:	b09d      	sub	sp, #116	@ 0x74
 8005638:	4614      	mov	r4, r2
 800563a:	4698      	mov	r8, r3
 800563c:	4606      	mov	r6, r0
 800563e:	b118      	cbz	r0, 8005648 <_vfiprintf_r+0x18>
 8005640:	6a03      	ldr	r3, [r0, #32]
 8005642:	b90b      	cbnz	r3, 8005648 <_vfiprintf_r+0x18>
 8005644:	f7ff f8d6 	bl	80047f4 <__sinit>
 8005648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800564a:	07d9      	lsls	r1, r3, #31
 800564c:	d405      	bmi.n	800565a <_vfiprintf_r+0x2a>
 800564e:	89ab      	ldrh	r3, [r5, #12]
 8005650:	059a      	lsls	r2, r3, #22
 8005652:	d402      	bmi.n	800565a <_vfiprintf_r+0x2a>
 8005654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005656:	f7ff fa8a 	bl	8004b6e <__retarget_lock_acquire_recursive>
 800565a:	89ab      	ldrh	r3, [r5, #12]
 800565c:	071b      	lsls	r3, r3, #28
 800565e:	d501      	bpl.n	8005664 <_vfiprintf_r+0x34>
 8005660:	692b      	ldr	r3, [r5, #16]
 8005662:	b99b      	cbnz	r3, 800568c <_vfiprintf_r+0x5c>
 8005664:	4629      	mov	r1, r5
 8005666:	4630      	mov	r0, r6
 8005668:	f000 f938 	bl	80058dc <__swsetup_r>
 800566c:	b170      	cbz	r0, 800568c <_vfiprintf_r+0x5c>
 800566e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005670:	07dc      	lsls	r4, r3, #31
 8005672:	d504      	bpl.n	800567e <_vfiprintf_r+0x4e>
 8005674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005678:	b01d      	add	sp, #116	@ 0x74
 800567a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	0598      	lsls	r0, r3, #22
 8005682:	d4f7      	bmi.n	8005674 <_vfiprintf_r+0x44>
 8005684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005686:	f7ff fa73 	bl	8004b70 <__retarget_lock_release_recursive>
 800568a:	e7f3      	b.n	8005674 <_vfiprintf_r+0x44>
 800568c:	2300      	movs	r3, #0
 800568e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005690:	2320      	movs	r3, #32
 8005692:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005696:	f8cd 800c 	str.w	r8, [sp, #12]
 800569a:	2330      	movs	r3, #48	@ 0x30
 800569c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800584c <_vfiprintf_r+0x21c>
 80056a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056a4:	f04f 0901 	mov.w	r9, #1
 80056a8:	4623      	mov	r3, r4
 80056aa:	469a      	mov	sl, r3
 80056ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056b0:	b10a      	cbz	r2, 80056b6 <_vfiprintf_r+0x86>
 80056b2:	2a25      	cmp	r2, #37	@ 0x25
 80056b4:	d1f9      	bne.n	80056aa <_vfiprintf_r+0x7a>
 80056b6:	ebba 0b04 	subs.w	fp, sl, r4
 80056ba:	d00b      	beq.n	80056d4 <_vfiprintf_r+0xa4>
 80056bc:	465b      	mov	r3, fp
 80056be:	4622      	mov	r2, r4
 80056c0:	4629      	mov	r1, r5
 80056c2:	4630      	mov	r0, r6
 80056c4:	f7ff ffa2 	bl	800560c <__sfputs_r>
 80056c8:	3001      	adds	r0, #1
 80056ca:	f000 80a7 	beq.w	800581c <_vfiprintf_r+0x1ec>
 80056ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056d0:	445a      	add	r2, fp
 80056d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80056d4:	f89a 3000 	ldrb.w	r3, [sl]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 809f 	beq.w	800581c <_vfiprintf_r+0x1ec>
 80056de:	2300      	movs	r3, #0
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056e8:	f10a 0a01 	add.w	sl, sl, #1
 80056ec:	9304      	str	r3, [sp, #16]
 80056ee:	9307      	str	r3, [sp, #28]
 80056f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80056f6:	4654      	mov	r4, sl
 80056f8:	2205      	movs	r2, #5
 80056fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056fe:	4853      	ldr	r0, [pc, #332]	@ (800584c <_vfiprintf_r+0x21c>)
 8005700:	f7fa fd6e 	bl	80001e0 <memchr>
 8005704:	9a04      	ldr	r2, [sp, #16]
 8005706:	b9d8      	cbnz	r0, 8005740 <_vfiprintf_r+0x110>
 8005708:	06d1      	lsls	r1, r2, #27
 800570a:	bf44      	itt	mi
 800570c:	2320      	movmi	r3, #32
 800570e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005712:	0713      	lsls	r3, r2, #28
 8005714:	bf44      	itt	mi
 8005716:	232b      	movmi	r3, #43	@ 0x2b
 8005718:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800571c:	f89a 3000 	ldrb.w	r3, [sl]
 8005720:	2b2a      	cmp	r3, #42	@ 0x2a
 8005722:	d015      	beq.n	8005750 <_vfiprintf_r+0x120>
 8005724:	9a07      	ldr	r2, [sp, #28]
 8005726:	4654      	mov	r4, sl
 8005728:	2000      	movs	r0, #0
 800572a:	f04f 0c0a 	mov.w	ip, #10
 800572e:	4621      	mov	r1, r4
 8005730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005734:	3b30      	subs	r3, #48	@ 0x30
 8005736:	2b09      	cmp	r3, #9
 8005738:	d94b      	bls.n	80057d2 <_vfiprintf_r+0x1a2>
 800573a:	b1b0      	cbz	r0, 800576a <_vfiprintf_r+0x13a>
 800573c:	9207      	str	r2, [sp, #28]
 800573e:	e014      	b.n	800576a <_vfiprintf_r+0x13a>
 8005740:	eba0 0308 	sub.w	r3, r0, r8
 8005744:	fa09 f303 	lsl.w	r3, r9, r3
 8005748:	4313      	orrs	r3, r2
 800574a:	9304      	str	r3, [sp, #16]
 800574c:	46a2      	mov	sl, r4
 800574e:	e7d2      	b.n	80056f6 <_vfiprintf_r+0xc6>
 8005750:	9b03      	ldr	r3, [sp, #12]
 8005752:	1d19      	adds	r1, r3, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	9103      	str	r1, [sp, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	bfbb      	ittet	lt
 800575c:	425b      	neglt	r3, r3
 800575e:	f042 0202 	orrlt.w	r2, r2, #2
 8005762:	9307      	strge	r3, [sp, #28]
 8005764:	9307      	strlt	r3, [sp, #28]
 8005766:	bfb8      	it	lt
 8005768:	9204      	strlt	r2, [sp, #16]
 800576a:	7823      	ldrb	r3, [r4, #0]
 800576c:	2b2e      	cmp	r3, #46	@ 0x2e
 800576e:	d10a      	bne.n	8005786 <_vfiprintf_r+0x156>
 8005770:	7863      	ldrb	r3, [r4, #1]
 8005772:	2b2a      	cmp	r3, #42	@ 0x2a
 8005774:	d132      	bne.n	80057dc <_vfiprintf_r+0x1ac>
 8005776:	9b03      	ldr	r3, [sp, #12]
 8005778:	1d1a      	adds	r2, r3, #4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	9203      	str	r2, [sp, #12]
 800577e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005782:	3402      	adds	r4, #2
 8005784:	9305      	str	r3, [sp, #20]
 8005786:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800585c <_vfiprintf_r+0x22c>
 800578a:	7821      	ldrb	r1, [r4, #0]
 800578c:	2203      	movs	r2, #3
 800578e:	4650      	mov	r0, sl
 8005790:	f7fa fd26 	bl	80001e0 <memchr>
 8005794:	b138      	cbz	r0, 80057a6 <_vfiprintf_r+0x176>
 8005796:	9b04      	ldr	r3, [sp, #16]
 8005798:	eba0 000a 	sub.w	r0, r0, sl
 800579c:	2240      	movs	r2, #64	@ 0x40
 800579e:	4082      	lsls	r2, r0
 80057a0:	4313      	orrs	r3, r2
 80057a2:	3401      	adds	r4, #1
 80057a4:	9304      	str	r3, [sp, #16]
 80057a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057aa:	4829      	ldr	r0, [pc, #164]	@ (8005850 <_vfiprintf_r+0x220>)
 80057ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057b0:	2206      	movs	r2, #6
 80057b2:	f7fa fd15 	bl	80001e0 <memchr>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d03f      	beq.n	800583a <_vfiprintf_r+0x20a>
 80057ba:	4b26      	ldr	r3, [pc, #152]	@ (8005854 <_vfiprintf_r+0x224>)
 80057bc:	bb1b      	cbnz	r3, 8005806 <_vfiprintf_r+0x1d6>
 80057be:	9b03      	ldr	r3, [sp, #12]
 80057c0:	3307      	adds	r3, #7
 80057c2:	f023 0307 	bic.w	r3, r3, #7
 80057c6:	3308      	adds	r3, #8
 80057c8:	9303      	str	r3, [sp, #12]
 80057ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057cc:	443b      	add	r3, r7
 80057ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80057d0:	e76a      	b.n	80056a8 <_vfiprintf_r+0x78>
 80057d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80057d6:	460c      	mov	r4, r1
 80057d8:	2001      	movs	r0, #1
 80057da:	e7a8      	b.n	800572e <_vfiprintf_r+0xfe>
 80057dc:	2300      	movs	r3, #0
 80057de:	3401      	adds	r4, #1
 80057e0:	9305      	str	r3, [sp, #20]
 80057e2:	4619      	mov	r1, r3
 80057e4:	f04f 0c0a 	mov.w	ip, #10
 80057e8:	4620      	mov	r0, r4
 80057ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ee:	3a30      	subs	r2, #48	@ 0x30
 80057f0:	2a09      	cmp	r2, #9
 80057f2:	d903      	bls.n	80057fc <_vfiprintf_r+0x1cc>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0c6      	beq.n	8005786 <_vfiprintf_r+0x156>
 80057f8:	9105      	str	r1, [sp, #20]
 80057fa:	e7c4      	b.n	8005786 <_vfiprintf_r+0x156>
 80057fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005800:	4604      	mov	r4, r0
 8005802:	2301      	movs	r3, #1
 8005804:	e7f0      	b.n	80057e8 <_vfiprintf_r+0x1b8>
 8005806:	ab03      	add	r3, sp, #12
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	462a      	mov	r2, r5
 800580c:	4b12      	ldr	r3, [pc, #72]	@ (8005858 <_vfiprintf_r+0x228>)
 800580e:	a904      	add	r1, sp, #16
 8005810:	4630      	mov	r0, r6
 8005812:	f3af 8000 	nop.w
 8005816:	4607      	mov	r7, r0
 8005818:	1c78      	adds	r0, r7, #1
 800581a:	d1d6      	bne.n	80057ca <_vfiprintf_r+0x19a>
 800581c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800581e:	07d9      	lsls	r1, r3, #31
 8005820:	d405      	bmi.n	800582e <_vfiprintf_r+0x1fe>
 8005822:	89ab      	ldrh	r3, [r5, #12]
 8005824:	059a      	lsls	r2, r3, #22
 8005826:	d402      	bmi.n	800582e <_vfiprintf_r+0x1fe>
 8005828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800582a:	f7ff f9a1 	bl	8004b70 <__retarget_lock_release_recursive>
 800582e:	89ab      	ldrh	r3, [r5, #12]
 8005830:	065b      	lsls	r3, r3, #25
 8005832:	f53f af1f 	bmi.w	8005674 <_vfiprintf_r+0x44>
 8005836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005838:	e71e      	b.n	8005678 <_vfiprintf_r+0x48>
 800583a:	ab03      	add	r3, sp, #12
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	462a      	mov	r2, r5
 8005840:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <_vfiprintf_r+0x228>)
 8005842:	a904      	add	r1, sp, #16
 8005844:	4630      	mov	r0, r6
 8005846:	f7ff fc81 	bl	800514c <_printf_i>
 800584a:	e7e4      	b.n	8005816 <_vfiprintf_r+0x1e6>
 800584c:	08005d19 	.word	0x08005d19
 8005850:	08005d23 	.word	0x08005d23
 8005854:	00000000 	.word	0x00000000
 8005858:	0800560d 	.word	0x0800560d
 800585c:	08005d1f 	.word	0x08005d1f

08005860 <__swbuf_r>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	460e      	mov	r6, r1
 8005864:	4614      	mov	r4, r2
 8005866:	4605      	mov	r5, r0
 8005868:	b118      	cbz	r0, 8005872 <__swbuf_r+0x12>
 800586a:	6a03      	ldr	r3, [r0, #32]
 800586c:	b90b      	cbnz	r3, 8005872 <__swbuf_r+0x12>
 800586e:	f7fe ffc1 	bl	80047f4 <__sinit>
 8005872:	69a3      	ldr	r3, [r4, #24]
 8005874:	60a3      	str	r3, [r4, #8]
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	071a      	lsls	r2, r3, #28
 800587a:	d501      	bpl.n	8005880 <__swbuf_r+0x20>
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	b943      	cbnz	r3, 8005892 <__swbuf_r+0x32>
 8005880:	4621      	mov	r1, r4
 8005882:	4628      	mov	r0, r5
 8005884:	f000 f82a 	bl	80058dc <__swsetup_r>
 8005888:	b118      	cbz	r0, 8005892 <__swbuf_r+0x32>
 800588a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800588e:	4638      	mov	r0, r7
 8005890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	6922      	ldr	r2, [r4, #16]
 8005896:	1a98      	subs	r0, r3, r2
 8005898:	6963      	ldr	r3, [r4, #20]
 800589a:	b2f6      	uxtb	r6, r6
 800589c:	4283      	cmp	r3, r0
 800589e:	4637      	mov	r7, r6
 80058a0:	dc05      	bgt.n	80058ae <__swbuf_r+0x4e>
 80058a2:	4621      	mov	r1, r4
 80058a4:	4628      	mov	r0, r5
 80058a6:	f7ff fdf3 	bl	8005490 <_fflush_r>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d1ed      	bne.n	800588a <__swbuf_r+0x2a>
 80058ae:	68a3      	ldr	r3, [r4, #8]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	60a3      	str	r3, [r4, #8]
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	6022      	str	r2, [r4, #0]
 80058ba:	701e      	strb	r6, [r3, #0]
 80058bc:	6962      	ldr	r2, [r4, #20]
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d004      	beq.n	80058ce <__swbuf_r+0x6e>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	07db      	lsls	r3, r3, #31
 80058c8:	d5e1      	bpl.n	800588e <__swbuf_r+0x2e>
 80058ca:	2e0a      	cmp	r6, #10
 80058cc:	d1df      	bne.n	800588e <__swbuf_r+0x2e>
 80058ce:	4621      	mov	r1, r4
 80058d0:	4628      	mov	r0, r5
 80058d2:	f7ff fddd 	bl	8005490 <_fflush_r>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d0d9      	beq.n	800588e <__swbuf_r+0x2e>
 80058da:	e7d6      	b.n	800588a <__swbuf_r+0x2a>

080058dc <__swsetup_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4b29      	ldr	r3, [pc, #164]	@ (8005984 <__swsetup_r+0xa8>)
 80058e0:	4605      	mov	r5, r0
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	460c      	mov	r4, r1
 80058e6:	b118      	cbz	r0, 80058f0 <__swsetup_r+0x14>
 80058e8:	6a03      	ldr	r3, [r0, #32]
 80058ea:	b90b      	cbnz	r3, 80058f0 <__swsetup_r+0x14>
 80058ec:	f7fe ff82 	bl	80047f4 <__sinit>
 80058f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f4:	0719      	lsls	r1, r3, #28
 80058f6:	d422      	bmi.n	800593e <__swsetup_r+0x62>
 80058f8:	06da      	lsls	r2, r3, #27
 80058fa:	d407      	bmi.n	800590c <__swsetup_r+0x30>
 80058fc:	2209      	movs	r2, #9
 80058fe:	602a      	str	r2, [r5, #0]
 8005900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005904:	81a3      	strh	r3, [r4, #12]
 8005906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800590a:	e033      	b.n	8005974 <__swsetup_r+0x98>
 800590c:	0758      	lsls	r0, r3, #29
 800590e:	d512      	bpl.n	8005936 <__swsetup_r+0x5a>
 8005910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005912:	b141      	cbz	r1, 8005926 <__swsetup_r+0x4a>
 8005914:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005918:	4299      	cmp	r1, r3
 800591a:	d002      	beq.n	8005922 <__swsetup_r+0x46>
 800591c:	4628      	mov	r0, r5
 800591e:	f7ff f94f 	bl	8004bc0 <_free_r>
 8005922:	2300      	movs	r3, #0
 8005924:	6363      	str	r3, [r4, #52]	@ 0x34
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800592c:	81a3      	strh	r3, [r4, #12]
 800592e:	2300      	movs	r3, #0
 8005930:	6063      	str	r3, [r4, #4]
 8005932:	6923      	ldr	r3, [r4, #16]
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	f043 0308 	orr.w	r3, r3, #8
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	b94b      	cbnz	r3, 8005956 <__swsetup_r+0x7a>
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800594c:	d003      	beq.n	8005956 <__swsetup_r+0x7a>
 800594e:	4621      	mov	r1, r4
 8005950:	4628      	mov	r0, r5
 8005952:	f000 f88b 	bl	8005a6c <__smakebuf_r>
 8005956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800595a:	f013 0201 	ands.w	r2, r3, #1
 800595e:	d00a      	beq.n	8005976 <__swsetup_r+0x9a>
 8005960:	2200      	movs	r2, #0
 8005962:	60a2      	str	r2, [r4, #8]
 8005964:	6962      	ldr	r2, [r4, #20]
 8005966:	4252      	negs	r2, r2
 8005968:	61a2      	str	r2, [r4, #24]
 800596a:	6922      	ldr	r2, [r4, #16]
 800596c:	b942      	cbnz	r2, 8005980 <__swsetup_r+0xa4>
 800596e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005972:	d1c5      	bne.n	8005900 <__swsetup_r+0x24>
 8005974:	bd38      	pop	{r3, r4, r5, pc}
 8005976:	0799      	lsls	r1, r3, #30
 8005978:	bf58      	it	pl
 800597a:	6962      	ldrpl	r2, [r4, #20]
 800597c:	60a2      	str	r2, [r4, #8]
 800597e:	e7f4      	b.n	800596a <__swsetup_r+0x8e>
 8005980:	2000      	movs	r0, #0
 8005982:	e7f7      	b.n	8005974 <__swsetup_r+0x98>
 8005984:	20000018 	.word	0x20000018

08005988 <_raise_r>:
 8005988:	291f      	cmp	r1, #31
 800598a:	b538      	push	{r3, r4, r5, lr}
 800598c:	4605      	mov	r5, r0
 800598e:	460c      	mov	r4, r1
 8005990:	d904      	bls.n	800599c <_raise_r+0x14>
 8005992:	2316      	movs	r3, #22
 8005994:	6003      	str	r3, [r0, #0]
 8005996:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800599e:	b112      	cbz	r2, 80059a6 <_raise_r+0x1e>
 80059a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059a4:	b94b      	cbnz	r3, 80059ba <_raise_r+0x32>
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 f830 	bl	8005a0c <_getpid_r>
 80059ac:	4622      	mov	r2, r4
 80059ae:	4601      	mov	r1, r0
 80059b0:	4628      	mov	r0, r5
 80059b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059b6:	f000 b817 	b.w	80059e8 <_kill_r>
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d00a      	beq.n	80059d4 <_raise_r+0x4c>
 80059be:	1c59      	adds	r1, r3, #1
 80059c0:	d103      	bne.n	80059ca <_raise_r+0x42>
 80059c2:	2316      	movs	r3, #22
 80059c4:	6003      	str	r3, [r0, #0]
 80059c6:	2001      	movs	r0, #1
 80059c8:	e7e7      	b.n	800599a <_raise_r+0x12>
 80059ca:	2100      	movs	r1, #0
 80059cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80059d0:	4620      	mov	r0, r4
 80059d2:	4798      	blx	r3
 80059d4:	2000      	movs	r0, #0
 80059d6:	e7e0      	b.n	800599a <_raise_r+0x12>

080059d8 <raise>:
 80059d8:	4b02      	ldr	r3, [pc, #8]	@ (80059e4 <raise+0xc>)
 80059da:	4601      	mov	r1, r0
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	f7ff bfd3 	b.w	8005988 <_raise_r>
 80059e2:	bf00      	nop
 80059e4:	20000018 	.word	0x20000018

080059e8 <_kill_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4d07      	ldr	r5, [pc, #28]	@ (8005a08 <_kill_r+0x20>)
 80059ec:	2300      	movs	r3, #0
 80059ee:	4604      	mov	r4, r0
 80059f0:	4608      	mov	r0, r1
 80059f2:	4611      	mov	r1, r2
 80059f4:	602b      	str	r3, [r5, #0]
 80059f6:	f7fb fcbb 	bl	8001370 <_kill>
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	d102      	bne.n	8005a04 <_kill_r+0x1c>
 80059fe:	682b      	ldr	r3, [r5, #0]
 8005a00:	b103      	cbz	r3, 8005a04 <_kill_r+0x1c>
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	bd38      	pop	{r3, r4, r5, pc}
 8005a06:	bf00      	nop
 8005a08:	20000380 	.word	0x20000380

08005a0c <_getpid_r>:
 8005a0c:	f7fb bca8 	b.w	8001360 <_getpid>

08005a10 <_malloc_usable_size_r>:
 8005a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a14:	1f18      	subs	r0, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	bfbc      	itt	lt
 8005a1a:	580b      	ldrlt	r3, [r1, r0]
 8005a1c:	18c0      	addlt	r0, r0, r3
 8005a1e:	4770      	bx	lr

08005a20 <__swhatbuf_r>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	460c      	mov	r4, r1
 8005a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	b096      	sub	sp, #88	@ 0x58
 8005a2c:	4615      	mov	r5, r2
 8005a2e:	461e      	mov	r6, r3
 8005a30:	da0d      	bge.n	8005a4e <__swhatbuf_r+0x2e>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a38:	f04f 0100 	mov.w	r1, #0
 8005a3c:	bf14      	ite	ne
 8005a3e:	2340      	movne	r3, #64	@ 0x40
 8005a40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a44:	2000      	movs	r0, #0
 8005a46:	6031      	str	r1, [r6, #0]
 8005a48:	602b      	str	r3, [r5, #0]
 8005a4a:	b016      	add	sp, #88	@ 0x58
 8005a4c:	bd70      	pop	{r4, r5, r6, pc}
 8005a4e:	466a      	mov	r2, sp
 8005a50:	f000 f848 	bl	8005ae4 <_fstat_r>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	dbec      	blt.n	8005a32 <__swhatbuf_r+0x12>
 8005a58:	9901      	ldr	r1, [sp, #4]
 8005a5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a62:	4259      	negs	r1, r3
 8005a64:	4159      	adcs	r1, r3
 8005a66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a6a:	e7eb      	b.n	8005a44 <__swhatbuf_r+0x24>

08005a6c <__smakebuf_r>:
 8005a6c:	898b      	ldrh	r3, [r1, #12]
 8005a6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a70:	079d      	lsls	r5, r3, #30
 8005a72:	4606      	mov	r6, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	d507      	bpl.n	8005a88 <__smakebuf_r+0x1c>
 8005a78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	6123      	str	r3, [r4, #16]
 8005a80:	2301      	movs	r3, #1
 8005a82:	6163      	str	r3, [r4, #20]
 8005a84:	b003      	add	sp, #12
 8005a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a88:	ab01      	add	r3, sp, #4
 8005a8a:	466a      	mov	r2, sp
 8005a8c:	f7ff ffc8 	bl	8005a20 <__swhatbuf_r>
 8005a90:	9f00      	ldr	r7, [sp, #0]
 8005a92:	4605      	mov	r5, r0
 8005a94:	4639      	mov	r1, r7
 8005a96:	4630      	mov	r0, r6
 8005a98:	f7ff f906 	bl	8004ca8 <_malloc_r>
 8005a9c:	b948      	cbnz	r0, 8005ab2 <__smakebuf_r+0x46>
 8005a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa2:	059a      	lsls	r2, r3, #22
 8005aa4:	d4ee      	bmi.n	8005a84 <__smakebuf_r+0x18>
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	f043 0302 	orr.w	r3, r3, #2
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	e7e2      	b.n	8005a78 <__smakebuf_r+0xc>
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	6020      	str	r0, [r4, #0]
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	9b01      	ldr	r3, [sp, #4]
 8005abe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005ac2:	b15b      	cbz	r3, 8005adc <__smakebuf_r+0x70>
 8005ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f000 f81d 	bl	8005b08 <_isatty_r>
 8005ace:	b128      	cbz	r0, 8005adc <__smakebuf_r+0x70>
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	f023 0303 	bic.w	r3, r3, #3
 8005ad6:	f043 0301 	orr.w	r3, r3, #1
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	431d      	orrs	r5, r3
 8005ae0:	81a5      	strh	r5, [r4, #12]
 8005ae2:	e7cf      	b.n	8005a84 <__smakebuf_r+0x18>

08005ae4 <_fstat_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d07      	ldr	r5, [pc, #28]	@ (8005b04 <_fstat_r+0x20>)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	4604      	mov	r4, r0
 8005aec:	4608      	mov	r0, r1
 8005aee:	4611      	mov	r1, r2
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	f7fb fc9d 	bl	8001430 <_fstat>
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	d102      	bne.n	8005b00 <_fstat_r+0x1c>
 8005afa:	682b      	ldr	r3, [r5, #0]
 8005afc:	b103      	cbz	r3, 8005b00 <_fstat_r+0x1c>
 8005afe:	6023      	str	r3, [r4, #0]
 8005b00:	bd38      	pop	{r3, r4, r5, pc}
 8005b02:	bf00      	nop
 8005b04:	20000380 	.word	0x20000380

08005b08 <_isatty_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d06      	ldr	r5, [pc, #24]	@ (8005b24 <_isatty_r+0x1c>)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4604      	mov	r4, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	602b      	str	r3, [r5, #0]
 8005b14:	f7fb fc9c 	bl	8001450 <_isatty>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_isatty_r+0x1a>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_isatty_r+0x1a>
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	20000380 	.word	0x20000380

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
